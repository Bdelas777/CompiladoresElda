== INICIO DE PRUEBAS - 2025-05-04 22:46:25.801963 ==

[L-ID-01] Identificador simple
Código:
variable
Tokens: [('TOKEN_ID', 'variable')]
--------------------------------------------------------------------------------
[L-ID-02] Identificador con números y guiones
Código:
var1_name2
Tokens: [('TOKEN_ID', 'var1_name2')]
--------------------------------------------------------------------------------
[L-ID-03] Identificador inválido (empieza con número)
Código:
1invalid
Tokens: [('TOKEN_CTE_INT', 1), ('TOKEN_ID', 'invalid')]
--------------------------------------------------------------------------------
[L-ID-04] Identificador inválido (empieza con guión)
Código:
_invalid
Illegal character '_' at line 1
Tokens: [('TOKEN_ID', 'invalid')]
--------------------------------------------------------------------------------
[L-INT-01] Entero válido
Código:
123
Tokens: [('TOKEN_CTE_INT', 123)]
--------------------------------------------------------------------------------
[L-INT-02] Entero con signo negativo (se tokenizará como TOKEN_MINUS y TOKEN_CTE_INT)
Código:
-123
Tokens: [('TOKEN_MINUS', '-'), ('TOKEN_CTE_INT', 123)]
--------------------------------------------------------------------------------
[L-FLOAT-01] Flotante válido
Código:
123.45
Tokens: [('TOKEN_CTE_FLOAT', 123.45)]
--------------------------------------------------------------------------------
[L-FLOAT-02] Flotante inválido (falta parte decimal)
Código:
123.
Illegal character '.' at line 1
Tokens: [('TOKEN_CTE_INT', 123)]
--------------------------------------------------------------------------------
[L-FLOAT-03] Flotante inválido (falta parte entera)
Código:
.45
Illegal character '.' at line 1
Tokens: [('TOKEN_CTE_INT', 45)]
--------------------------------------------------------------------------------
[L-STR-01] String válido
Código:
"Hello world"
Tokens: [('TOKEN_CTE_STRING', 'Hello world')]
--------------------------------------------------------------------------------
[L-STR-02] String inválido (comillas dentro)
Código:
"Cadena con "comillas""
Tokens: [('TOKEN_CTE_STRING', 'Cadena con '), ('TOKEN_ID', 'comillas'), ('TOKEN_CTE_STRING', '')]
--------------------------------------------------------------------------------
[L-RES-01] Palabras reservadas
Código:
program var int float if else while do print void main end
Tokens: [('TOKEN_PROGRAM', 'program'), ('TOKEN_VAR', 'var'), ('TOKEN_INT', 'int'), ('TOKEN_FLOAT', 'float'), ('TOKEN_IF', 'if'), ('TOKEN_ELSE', 'else'), ('TOKEN_WHILE', 'while'), ('TOKEN_DO', 'do'), ('TOKEN_PRINT', 'print'), ('TOKEN_VOID', 'void'), ('TOKEN_MAIN', 'main'), ('TOKEN_END', 'end')]
--------------------------------------------------------------------------------
[L-OP-01] Operadores
Código:
+ - * / > < != =
Tokens: [('TOKEN_PLUS', '+'), ('TOKEN_MINUS', '-'), ('TOKEN_MULT', '*'), ('TOKEN_DIV', '/'), ('TOKEN_GT', '>'), ('TOKEN_LT', '<'), ('TOKEN_NE', '!='), ('TOKEN_ASSIGN', '=')]
--------------------------------------------------------------------------------
[L-SYM-01] Símbolos especiales
Código:
; , : ( ) { }
Tokens: [('TOKEN_SEMICOLON', ';'), ('TOKEN_COMMA', ','), ('TOKEN_COLON', ':'), ('TOKEN_LPAREN', '('), ('TOKEN_RPAREN', ')'), ('TOKEN_LBRACE', '{'), ('TOKEN_RBRACE', '}')]
--------------------------------------------------------------------------------
[P-STRUCT-01] Programa mínimo válido
Código:
program MyProgram;
    main {
    }
    end
Program MyProgram started
Main function declared
Main function ended
Program MyProgram completed
Resultado del parser: ('programa', 'MyProgram', None, [], ('body', []))
--------------------------------------------------------------------------------
[P-STRUCT-02] Programa con declaración de variable
Código:
program MyProgram;
    var x: int;
    main {
    }
    end
Added 'x' to temporary variable list
Set current type to Type.INT
Added global variable 'x' of type Type.INT
Starting variable declaration in scope 'global'
Program MyProgram started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program MyProgram completed
Resultado del parser: ('programa', 'MyProgram', ('vars', [('variable', ['x'], 'int')]), [], ('body', []))
--------------------------------------------------------------------------------
[P-STRUCT-03] Programa sin identificador (inválido)
Código:
program;
    main {
    }
    end
ERROR: Syntax error at ';', line 13
ERROR: Token type: TOKEN_SEMICOLON
Resultado del parser: None
--------------------------------------------------------------------------------
[P-STRUCT-04] Programa sin punto y coma después del identificador (inválido)
Código:
program MyProgram
    main {
    }
    end
ERROR: Syntax error at 'main', line 19
ERROR: Token type: TOKEN_MAIN
Resultado del parser: None
--------------------------------------------------------------------------------
[P-STRUCT-05] Programa sin 'end' (inválido)
Código:
program MyProgram;
    main {
    }
ERROR: Syntax error at EOF
Resultado del parser: None
--------------------------------------------------------------------------------
[P-STRUCT-06] Programa sin palabra clave 'program' (inválido)
Código:
MyProgram;
    main {
    }
    end
ERROR: Syntax error at 'MyProgram', line 27
ERROR: Token type: TOKEN_ID
Resultado del parser: None
--------------------------------------------------------------------------------
[P-VAR-01] Declaración de variable simple
Código:
program Test;
    var x: int;
    main {
    }
    end
SEMANTIC ERROR: Variable 'x' already declared in global scope
Set current type to Type.INT
Starting variable declaration in scope 'global'
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', ('vars', [('variable', ['x'], 'int')]), [], ('body', []))
--------------------------------------------------------------------------------
[P-VAR-02] Declaración de múltiples variables del mismo tipo
Código:
program Test;
    var x, y, z: int;
    main {
    }
    end
Added 'z' to temporary variable list
Added 'y' to temporary variable list
SEMANTIC ERROR: Variable 'x' already declared in global scope
Added 'y' to temporary variable list
Added 'z' to temporary variable list
Set current type to Type.INT
Added global variable 'z' of type Type.INT
Added global variable 'y' of type Type.INT
Added global variable 'y' of type Type.INT
Added global variable 'z' of type Type.INT
Starting variable declaration in scope 'global'
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', ('vars', [('variable', ['x', 'y', 'z'], 'int')]), [], ('body', []))
--------------------------------------------------------------------------------
[P-VAR-03] Declaración de variables de diferentes tipos
Código:
program Test;
    var x: int;
    var y: float;
    main {
    }
    end
ERROR: Syntax error at 'var', line 46
ERROR: Token type: TOKEN_VAR
Resultado del parser: None
--------------------------------------------------------------------------------
[P-VAR-04] Declaración de variable sin punto y coma (inválido)
Código:
program Test;
    var x: int
    main {
    }
    end
ERROR: Syntax error at 'main', line 53
ERROR: Token type: TOKEN_MAIN
Resultado del parser: None
--------------------------------------------------------------------------------
[P-VAR-05] Declaración de variable sin dos puntos (inválido)
Código:
program Test;
    var x int;
    main {
    }
    end
ERROR: Syntax error at 'int', line 58
ERROR: Token type: TOKEN_INT
Resultado del parser: None
--------------------------------------------------------------------------------
[P-VAR-06] Declaración de variable con coma adicional (inválido)
Código:
program Test;
    var x, y,: int;
    main {
    }
    end
ERROR: Syntax error at ':', line 64
ERROR: Token type: TOKEN_COLON
Resultado del parser: None
--------------------------------------------------------------------------------
[P-VAR-07] Declaración de variable con tipo no soportado (inválido)
Código:
program Test;
    var x: string;
    main {
    }
    end
ERROR: Syntax error at 'string', line 70
ERROR: Token type: TOKEN_ID
Resultado del parser: None
--------------------------------------------------------------------------------
[P-FUNC-01] Función simple
Código:
program Test;
    void func() {
    };
    main {
    }
    end
ERROR: Syntax error at '{', line 76
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-FUNC-02] Función con un parámetro
Código:
program Test;
    void func(x: int) {
    };
    main {
    }
    end
ERROR: Syntax error at '{', line 83
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-FUNC-03] Función con múltiples parámetros
Código:
program Test;
    void func(x: int, y: float) {
    };
    main {
    }
    end
ERROR: Syntax error at '{', line 90
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-FUNC-04] Función con variable local
Código:
program Test;
    void func() 
    var local: int;
    {
        local = 10;
    };
    main {
    }
    end
ERROR: Syntax error at 'var', line 98
ERROR: Token type: TOKEN_VAR
Resultado del parser: None
--------------------------------------------------------------------------------
[P-FUNC-05] Función con sentencia de asignación
Código:
program Test;
    void func() {
        x = 5;
    };
    main {
    }
    end
ERROR: Syntax error at '{', line 107
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-FUNC-06] Función sin punto y coma final (inválido)
Código:
program Test;
    void func() {
    }
    main {
    }
    end
ERROR: Syntax error at '{', line 115
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-FUNC-07] Función sin paréntesis (inválido)
Código:
program Test;
    void func {
    };
    main {
    }
    end
ERROR: Syntax error at '{', line 122
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-ASSIGN-01] Asignación simple
Código:
program Test;
    main {
        x = 5;
    }
    end
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('assign', 'x', ('constant', 5))]))
--------------------------------------------------------------------------------
[P-ASSIGN-02] Asignación con expresión
Código:
program Test;
    main {
        x = y + 10;
    }
    end
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('assign', 'x', ('operation', ('id', 'y', 'type', <Type.INT: 1>), '+', ('constant', 10), 'type', <Type.INT: 1>))]))
--------------------------------------------------------------------------------
[P-ASSIGN-03] Asignación con expresión compleja
Código:
program Test;
    main {
        x = (y + 2) * 3;
    }
    end
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('assign', 'x', ('operation', ('operation', ('id', 'y', 'type', <Type.INT: 1>), '+', ('constant', 2), 'type', <Type.INT: 1>), '*', ('constant', 3), 'type', <Type.INT: 1>))]))
--------------------------------------------------------------------------------
[P-ASSIGN-04] Asignación sin punto y coma (inválido)
Código:
program Test;
    main {
        x = 5
    }
    end
ERROR: Syntax error at '}', line 149
ERROR: Token type: TOKEN_RBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-ASSIGN-05] Asignación inválida (constante en lado izquierdo)
Código:
program Test;
    main {
        5 = x;
    }
    end
ERROR: Syntax error at '5', line 154
ERROR: Token type: TOKEN_CTE_INT
Resultado del parser: None
--------------------------------------------------------------------------------
[P-IF-01] Condicional simple
Código:
program Test;
    main {
        if (x > 5) {
            y = 1;
        };
    }
    end
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('if', ('comparison', ('id', 'x', 'type', <Type.INT: 1>), '>', ('constant', 5), 'type', <Type.BOOL: 3>), ('body', [('assign', 'y', ('constant', 1))]), None)]))
--------------------------------------------------------------------------------
[P-IF-02] Condicional con else
Código:
program Test;
    main {
        if (x > 5) {
            y = 1;
        } else {
            y = 0;
        };
    }
    end
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('if', ('comparison', ('id', 'x', 'type', <Type.INT: 1>), '>', ('constant', 5), 'type', <Type.BOOL: 3>), ('body', [('assign', 'y', ('constant', 1))]), ('body', [('assign', 'y', ('constant', 0))]))]))
--------------------------------------------------------------------------------
[P-IF-03] Condicionales anidados
Código:
program Test;
    main {
        if (x > 5) {
            if (y < 10) {
                z = 1;
            };
        };
    }
    end
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('if', ('comparison', ('id', 'x', 'type', <Type.INT: 1>), '>', ('constant', 5), 'type', <Type.BOOL: 3>), ('body', [('if', ('comparison', ('id', 'y', 'type', <Type.INT: 1>), '<', ('constant', 10), 'type', <Type.BOOL: 3>), ('body', [('assign', 'z', ('constant', 1))]), None)]), None)]))
--------------------------------------------------------------------------------
[P-IF-04] Condicional sin paréntesis (inválido)
Código:
program Test;
    main {
        if x > 5 {
            y = 1;
        };
    }
    end
ERROR: Syntax error at 'x', line 188
ERROR: Token type: TOKEN_ID
Resultado del parser: None
--------------------------------------------------------------------------------
[P-IF-05] Condicional sin punto y coma (inválido)
Código:
program Test;
    main {
        if (x > 5) {
            y = 1;
        }
    }
    end
ERROR: Syntax error at '}', line 199
ERROR: Token type: TOKEN_RBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-WHILE-01] Ciclo while simple
Código:
program Test;
    main {
        while (x > 0) do {
            x = x - 1;
        };
    }
    end
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('while', ('comparison', ('id', 'x', 'type', <Type.INT: 1>), '>', ('constant', 0), 'type', <Type.BOOL: 3>), ('body', [('assign', 'x', ('operation', ('id', 'x', 'type', <Type.INT: 1>), '-', ('constant', 1), 'type', <Type.INT: 1>))]))]))
--------------------------------------------------------------------------------
[P-WHILE-02] Ciclos while anidados
Código:
program Test;
    main {
        while (x > 0) do {
            while (y < 10) do {
                y = y + 1;
            };
        };
    }
    end
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('while', ('comparison', ('id', 'x', 'type', <Type.INT: 1>), '>', ('constant', 0), 'type', <Type.BOOL: 3>), ('body', [('while', ('comparison', ('id', 'y', 'type', <Type.INT: 1>), '<', ('constant', 10), 'type', <Type.BOOL: 3>), ('body', [('assign', 'y', ('operation', ('id', 'y', 'type', <Type.INT: 1>), '+', ('constant', 1), 'type', <Type.INT: 1>))]))]))]))
--------------------------------------------------------------------------------
[P-WHILE-03] Ciclo while con múltiples sentencias
Código:
program Test;
    main {
        while (x > 0) do {
            y = y + 1;
            x = x - 1;
        };
    }
    end
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('while', ('comparison', ('id', 'x', 'type', <Type.INT: 1>), '>', ('constant', 0), 'type', <Type.BOOL: 3>), ('body', [('assign', 'y', ('operation', ('id', 'y', 'type', <Type.INT: 1>), '+', ('constant', 1), 'type', <Type.INT: 1>)), ('assign', 'x', ('operation', ('id', 'x', 'type', <Type.INT: 1>), '-', ('constant', 1), 'type', <Type.INT: 1>))]))]))
--------------------------------------------------------------------------------
[P-WHILE-04] Ciclo while sin palabra 'do' (inválido)
Código:
program Test;
    main {
        while (x > 0) {
            x = x - 1;
        };
    }
    end
ERROR: Syntax error at '{', line 231
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-WHILE-05] Ciclo while sin punto y coma (inválido)
Código:
program Test;
    main {
        while (x > 0) do {
            x = x - 1;
        }
    }
    end
ERROR: Syntax error at '}', line 242
ERROR: Token type: TOKEN_RBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-PRINT-01] Sentencia print con string
Código:
program Test;
    main {
        print("Hello");
    }
    end
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('print', [('string', 'Hello')])]))
--------------------------------------------------------------------------------
[P-PRINT-02] Sentencia print con expresión
Código:
program Test;
    main {
        print(x + y);
    }
    end
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('print', [('operation', ('id', 'x', 'type', <Type.INT: 1>), '+', ('id', 'y', 'type', <Type.INT: 1>), 'type', <Type.INT: 1>)])]))
--------------------------------------------------------------------------------
[P-PRINT-03] Sentencia print con múltiples valores
Código:
program Test;
    main {
        print("Value:", x, y + z);
    }
    end
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('print', [('string', 'Value:'), ('id', 'x', 'type', <Type.INT: 1>), ('operation', ('id', 'y', 'type', <Type.INT: 1>), '+', ('id', 'z', 'type', <Type.INT: 1>), 'type', <Type.INT: 1>)])]))
--------------------------------------------------------------------------------
[P-PRINT-04] Sentencia print sin paréntesis (inválido)
Código:
program Test;
    main {
        print "Hello";
    }
    end
ERROR: Syntax error at 'Hello', line 265
ERROR: Token type: TOKEN_CTE_STRING
Resultado del parser: None
--------------------------------------------------------------------------------
[P-PRINT-05] Sentencia print sin punto y coma (inválido)
Código:
program Test;
    main {
        print("Hello")
    }
    end
ERROR: Syntax error at '}', line 272
ERROR: Token type: TOKEN_RBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-CALL-01] Llamada a función simple
Código:
program Test;
    void func() {
    };
    main {
        func();
    }
    end
ERROR: Syntax error at '{', line 276
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-CALL-02] Llamada a función con argumento
Código:
program Test;
    void func(x: int) {
    };
    main {
        func(10);
    }
    end
ERROR: Syntax error at '{', line 284
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-CALL-03] Llamada a función con múltiples argumentos
Código:
program Test;
    void func(x: int, y: int) {
    };
    main {
        func(x, y + 1);
    }
    end
ERROR: Syntax error at '{', line 292
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-CALL-04] Llamada a función sin paréntesis (inválido)
Código:
program Test;
    void func() {
    };
    main {
        func;
    }
    end
ERROR: Syntax error at '{', line 300
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-CALL-05] Llamada a función sin punto y coma (inválido)
Código:
program Test;
    void func() {
    };
    main {
        func()
    }
    end
ERROR: Syntax error at '{', line 308
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-EXPR-01] Expresión con suma
Código:
program Test;
    main {
        x = a + b;
    }
    end
SEMANTIC ERROR: Variable 'a' not declared
SEMANTIC ERROR: Variable 'b' not declared
SEMANTIC ERROR: Incompatible types in operation Operation.PLUS: Type.ERROR and Type.ERROR
SEMANTIC ERROR: Incompatible types in assignment to 'x': Cannot assign Type.ERROR to Type.INT
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('assign', 'x', ('operation', ('id', 'a', 'type', <Type.ERROR: 5>), '+', ('id', 'b', 'type', <Type.ERROR: 5>), 'type', <Type.ERROR: 5>))]))
--------------------------------------------------------------------------------
[P-EXPR-02] Expresión con multiplicación
Código:
program Test;
    main {
        x = a * b;
    }
    end
SEMANTIC ERROR: Variable 'a' not declared
SEMANTIC ERROR: Variable 'b' not declared
SEMANTIC ERROR: Incompatible types in operation Operation.MULTIPLY: Type.ERROR and Type.ERROR
SEMANTIC ERROR: Incompatible types in assignment to 'x': Cannot assign Type.ERROR to Type.INT
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('assign', 'x', ('operation', ('id', 'a', 'type', <Type.ERROR: 5>), '*', ('id', 'b', 'type', <Type.ERROR: 5>), 'type', <Type.ERROR: 5>))]))
--------------------------------------------------------------------------------
[P-EXPR-03] Expresión con comparación
Código:
program Test;
    main {
        if (a > b) {
            x = 1;
        };
    }
    end
SEMANTIC ERROR: Variable 'a' not declared
SEMANTIC ERROR: Variable 'b' not declared
SEMANTIC ERROR: Incompatible types in operation Operation.GREATER: Type.ERROR and Type.ERROR
SEMANTIC ERROR: Condition expression must be boolean, got Type.ERROR
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('if', ('comparison', ('id', 'a', 'type', <Type.ERROR: 5>), '>', ('id', 'b', 'type', <Type.ERROR: 5>), 'type', <Type.ERROR: 5>), ('body', [('assign', 'x', ('constant', 1))]), None)]))
--------------------------------------------------------------------------------
[P-EXPR-04] Expresión compleja con paréntesis
Código:
program Test;
    main {
        x = (a + b) * (c - 1);
    }
    end
SEMANTIC ERROR: Variable 'a' not declared
SEMANTIC ERROR: Variable 'b' not declared
SEMANTIC ERROR: Incompatible types in operation Operation.PLUS: Type.ERROR and Type.ERROR
SEMANTIC ERROR: Variable 'c' not declared
SEMANTIC ERROR: Incompatible types in operation Operation.MINUS: Type.ERROR and Type.INT
SEMANTIC ERROR: Incompatible types in operation Operation.MULTIPLY: Type.ERROR and Type.ERROR
SEMANTIC ERROR: Incompatible types in assignment to 'x': Cannot assign Type.ERROR to Type.INT
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('assign', 'x', ('operation', ('operation', ('id', 'a', 'type', <Type.ERROR: 5>), '+', ('id', 'b', 'type', <Type.ERROR: 5>), 'type', <Type.ERROR: 5>), '*', ('operation', ('id', 'c', 'type', <Type.ERROR: 5>), '-', ('constant', 1), 'type', <Type.ERROR: 5>), 'type', <Type.ERROR: 5>))]))
--------------------------------------------------------------------------------
[P-EXPR-05] Expresión con precedencia de operadores
Código:
program Test;
    main {
        x = a + b * c;
    }
    end
SEMANTIC ERROR: Variable 'a' not declared
SEMANTIC ERROR: Variable 'b' not declared
SEMANTIC ERROR: Variable 'c' not declared
SEMANTIC ERROR: Incompatible types in operation Operation.MULTIPLY: Type.ERROR and Type.ERROR
SEMANTIC ERROR: Incompatible types in operation Operation.PLUS: Type.ERROR and Type.ERROR
SEMANTIC ERROR: Incompatible types in assignment to 'x': Cannot assign Type.ERROR to Type.INT
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('assign', 'x', ('operation', ('id', 'a', 'type', <Type.ERROR: 5>), '+', ('operation', ('id', 'b', 'type', <Type.ERROR: 5>), '*', ('id', 'c', 'type', <Type.ERROR: 5>), 'type', <Type.ERROR: 5>), 'type', <Type.ERROR: 5>))]))
--------------------------------------------------------------------------------
[P-EXPR-06] Expresión con operador unario
Código:
program Test;
    main {
        x = -a;
    }
    end
SEMANTIC ERROR: Variable 'a' not declared
SEMANTIC ERROR: Unary operation not supported for type Type.ERROR
SEMANTIC ERROR: Incompatible types in assignment to 'x': Cannot assign Type.ERROR to Type.INT
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('assign', 'x', ('unary', '-', ('id', 'a', 'type', <Type.ERROR: 5>), 'type', <Type.ERROR: 5>))]))
--------------------------------------------------------------------------------
[P-EXPR-07] Expresión con paréntesis anidados
Código:
program Test;
    main {
        x = ((a + b) * c);
    }
    end
SEMANTIC ERROR: Variable 'a' not declared
SEMANTIC ERROR: Variable 'b' not declared
SEMANTIC ERROR: Incompatible types in operation Operation.PLUS: Type.ERROR and Type.ERROR
SEMANTIC ERROR: Variable 'c' not declared
SEMANTIC ERROR: Incompatible types in operation Operation.MULTIPLY: Type.ERROR and Type.ERROR
SEMANTIC ERROR: Incompatible types in assignment to 'x': Cannot assign Type.ERROR to Type.INT
Program Test started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program Test completed
Resultado del parser: ('programa', 'Test', None, [], ('body', [('assign', 'x', ('operation', ('operation', ('id', 'a', 'type', <Type.ERROR: 5>), '+', ('id', 'b', 'type', <Type.ERROR: 5>), 'type', <Type.ERROR: 5>), '*', ('id', 'c', 'type', <Type.ERROR: 5>), 'type', <Type.ERROR: 5>))]))
--------------------------------------------------------------------------------
[P-FULL-01] Programa simple con una variable, asignación y print
Código:
program simple;
    var x: int;
    main {
        x = 5;
        print(x);
    }
    end
SEMANTIC ERROR: Variable 'x' already declared in global scope
Set current type to Type.INT
Starting variable declaration in scope 'global'
Program simple started
SEMANTIC ERROR: Function 'main' already declared
Main function ended
Program simple completed
Resultado del parser: ('programa', 'simple', ('vars', [('variable', ['x'], 'int')]), [], ('body', [('assign', 'x', ('constant', 5)), ('print', [('id', 'x', 'type', <Type.INT: 1>)])]))
--------------------------------------------------------------------------------
[P-FULL-02] Programa con función y llamada a función
Código:
program withFunctions;
    var x, y: int;

    void increment(val: int) {
        x = val + 1;
    };

    main {
        y = 10;
        increment(y);
        print(x);
    }
    end
SEMANTIC ERROR: Variable 'y' already declared in global scope
SEMANTIC ERROR: Variable 'x' already declared in global scope
SEMANTIC ERROR: Variable 'y' already declared in global scope
Set current type to Type.INT
Starting variable declaration in scope 'global'
ERROR: Syntax error at '{', line 370
ERROR: Token type: TOKEN_LBRACE
Resultado del parser: None
--------------------------------------------------------------------------------
[P-FULL-03] Programa complejo con variables, funciones, ciclos y condicionales
Código:
program complex;
    var i, max: int;
    var result: float;

    void calculateSum(limit: int) 
    var sum: int;
    {
        i = 1;
        sum = 0;
        while (i <= limit) do {
            sum = sum + i;
            i = i + 1;
        };
        result = sum;
    };

    main {
        max = 100;
        calculateSum(max);
        
        if (result > 5000) {
            print("Large sum:", result);
        } else {
            print("Small sum:", result);
        };
    }
    end
Added 'max' to temporary variable list
ERROR: Syntax error at 'var', line 383
ERROR: Token type: TOKEN_VAR
Resultado del parser: None
--------------------------------------------------------------------------------

== FIN DE PRUEBAS - 2025-05-04 22:46:25.817349 ==

