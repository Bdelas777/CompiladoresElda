2025-05-25 09:27:02,780 - INFO - Starting test suite
2025-05-25 09:27:02,782 - INFO - Date and time: 2025-05-25 09:27:02
2025-05-25 09:27:02,784 - INFO - Saved test program 'arithmetic' to test_programs\arithmetic.txt
2025-05-25 09:27:02,787 - INFO - Saved test program 'if_else' to test_programs\if_else.txt
2025-05-25 09:27:02,790 - INFO - Saved test program 'while_loop' to test_programs\while_loop.txt
2025-05-25 09:27:02,794 - INFO - Saved test program 'functions' to test_programs\functions.txt
2025-05-25 09:27:02,801 - INFO - Saved test program 'float_operations' to test_programs\float_operations.txt
2025-05-25 09:27:02,817 - INFO - Saved test program 'negative_values' to test_programs\negative_values.txt
2025-05-25 09:27:02,818 - INFO - 
Running test: arithmetic
2025-05-25 09:27:02,818 - INFO - ======== TESTING: arithmetic ========
2025-05-25 09:27:02,818 - INFO - Program code:

program test;
    var a, b, c : int;
        result : float;
    main {
        a = 5;
        b = 3;
        c = 2;
        result = a + b + c * 2;
        print(result);
    }
    end
    
2025-05-25 09:27:02,821 - INFO - Compilation successful!
2025-05-25 09:27:02,821 - INFO - QUADRUPLES:
2025-05-25 09:27:02,821 - INFO - 
Adding ID 'a' to temp list in scope: global
Added 'a' to temporary variable list in scope: global
Adding ID 'b' to temp list in scope: global
Added 'b' to temporary variable list in scope: global
Adding ID 'c' to temp list in scope: global
Added 'c' to temporary variable list in scope: global
Set current type to Type.INT
Adding variables to table in scope: global
Added global variable 'a' of type Type.INT at address 5000
Added global variable 'b' of type Type.INT at address 5001
Added global variable 'c' of type Type.INT at address 5002
Adding ID 'result' to temp list in scope: global
Added 'result' to temporary variable list in scope: global
Set current type to Type.FLOAT
Adding variables to table in scope: global
Added global variable 'result' of type Type.FLOAT at address 8000
Starting variable declaration in scope 'global'
Pushed scope: main, current scope stack: ['global', 'main']
Main function declared, scope changed to main
Processing operand: c of type Type.INT
[] PilaO
Processing operand: 2 of type Type.INT
['c'] PilaO
['c', '2'] PilaO
Check c 2 *
Processing operand: a of type Type.INT
[15000] PilaO
Processing operand: b of type Type.INT
[15000, 'a'] PilaO
[15000, 'a', 'b'] PilaO
Check a b +
Processing operand: 15001 of type Type.INT
[15000, 15001] PilaO
Processing operand: 15001 of type Type.INT
[15000, 15001, 15001] PilaO
[15000, 15001, 15001, 15001] PilaO
Check 15001 15001 +
Program test started, scope reset to global
Program test completed

===== QUADRUPLES WITH MEMORY ADDRESSES =====
INDEX: (OPERATOR, LEFT_OPERAND, RIGHT_OPERAND, RESULT)
      EXPLANATION
----------------------------------------------------------------------

===== FUNCTION DIRECTORY =====
Function: main - Start Address: None
----------------------------------------------------------------------
0: (goto, None, None, 1)
      jump to quadruple 1
----------------------------------------------------------------------
1: (=, 20000, None, 5000)
      assign value of constant(5) to a (global)
----------------------------------------------------------------------
2: (=, 20001, None, 5001)
      assign value of constant(3) to b (global)
----------------------------------------------------------------------
3: (=, 20002, None, 5002)
      assign value of constant(2) to c (global)
----------------------------------------------------------------------
4: (*, 5002, 20002, 15000)
      multiply c (global) and constant(2), store result in addr:15000
----------------------------------------------------------------------
5: (+, 5000, 5001, 15001)
      add a (global) and b (global), store result in addr:15001
----------------------------------------------------------------------
6: (+, 15001, 15001, 15002)
      add addr:15001 and addr:15001, store result in addr:15002
----------------------------------------------------------------------
7: (=, 15002, None, 8000)
      assign value of addr:15002 to result (global)
----------------------------------------------------------------------
8: (print, 8000, None, None)
      print value result (global)
----------------------------------------------------------------------

2025-05-25 09:27:02,823 - INFO - ======== END TEST: arithmetic ========

2025-05-25 09:27:02,824 - INFO - 
Running test: if_else
2025-05-25 09:27:02,824 - INFO - ======== TESTING: if_else ========
2025-05-25 09:27:02,824 - INFO - Program code:

program control_if;
var
    x, y, max : int;
main {
    x = 15;
    y = 7;
    
    if (x > y) {
        max = x;
        print("El mayor es x: ", max);
    } else {
        max = y;
        print("El mayor es y: ", max);
    };
    
    if (x < 10) {
        print("x es menor que 10");
    } else {
        print("x es mayor o igual que 10");
    };
}
end

2025-05-25 09:27:02,827 - INFO - Compilation successful!
2025-05-25 09:27:02,829 - INFO - QUADRUPLES:
2025-05-25 09:27:02,835 - INFO - 
Adding ID 'x' to temp list in scope: global
Added 'x' to temporary variable list in scope: global
Adding ID 'y' to temp list in scope: global
Added 'y' to temporary variable list in scope: global
Adding ID 'max' to temp list in scope: global
Added 'max' to temporary variable list in scope: global
Set current type to Type.INT
Adding variables to table in scope: global
Added global variable 'x' of type Type.INT at address 5000
Added global variable 'y' of type Type.INT at address 5001
Added global variable 'max' of type Type.INT at address 5002
Starting variable declaration in scope 'global'
Pushed scope: main, current scope stack: ['global', 'main']
Main function declared, scope changed to main
Left type: Type.INT, Right type: Type.INT, Operator: Operation.GREATER
Processing operand: x of type Type.INT
[] PilaO
Processing operand: y of type Type.INT
['x'] PilaO
['x', 'y'] PilaO
Check x y >
Left type: Type.INT, Right type: Type.INT, Operator: Operation.LESS
Processing operand: x of type Type.INT
[19000] PilaO
Processing operand: 10 of type Type.INT
[19000, 'x'] PilaO
[19000, 'x', '10'] PilaO
Check x 10 <
Program control_if started, scope reset to global
Program control_if completed

===== QUADRUPLES WITH MEMORY ADDRESSES =====
INDEX: (OPERATOR, LEFT_OPERAND, RIGHT_OPERAND, RESULT)
      EXPLANATION
----------------------------------------------------------------------

===== FUNCTION DIRECTORY =====
Function: main - Start Address: None
----------------------------------------------------------------------
0: (goto, None, None, 1)
      jump to quadruple 1
----------------------------------------------------------------------
1: (=, 20000, None, 5000)
      assign value of constant(15) to x (global)
----------------------------------------------------------------------
2: (=, 20001, None, 5001)
      assign value of constant(7) to y (global)
----------------------------------------------------------------------
3: (>, 5000, 5001, 19000)
      compare if x (global) is greater than y (global), store boolean result in addr:19000
----------------------------------------------------------------------
4: (gotof, 19000, None, 9)
      if addr:19000 is false, jump to quadruple 9
----------------------------------------------------------------------
5: (=, 5000, None, 5002)
      assign value of x (global) to max (global)
----------------------------------------------------------------------
6: (print, El mayor es x: , None, None)
      print value addr:El mayor es x: 
----------------------------------------------------------------------
7: (print, 5002, None, None)
      print value max (global)
----------------------------------------------------------------------
8: (goto, None, None, 12)
      jump to quadruple 12
----------------------------------------------------------------------
9: (=, 5001, None, 5002)
      assign value of y (global) to max (global)
----------------------------------------------------------------------
10: (print, El mayor es y: , None, None)
      print value addr:El mayor es y: 
----------------------------------------------------------------------
11: (print, 5002, None, None)
      print value max (global)
----------------------------------------------------------------------
12: (<, 5000, 20002, 19001)
      compare if x (global) is less than constant(10), store boolean result in addr:19001
----------------------------------------------------------------------
13: (gotof, 19001, None, 16)
      if addr:19001 is false, jump to quadruple 16
----------------------------------------------------------------------
14: (print, x es menor que 10, None, None)
      print value addr:x es menor que 10
----------------------------------------------------------------------
15: (goto, None, None, 17)
      jump to quadruple 17
----------------------------------------------------------------------
16: (print, x es mayor o igual que 10, None, None)
      print value addr:x es mayor o igual que 10
----------------------------------------------------------------------

2025-05-25 09:27:02,837 - INFO - ======== END TEST: if_else ========

2025-05-25 09:27:02,838 - INFO - 
Running test: while_loop
2025-05-25 09:27:02,839 - INFO - ======== TESTING: while_loop ========
2025-05-25 09:27:02,842 - INFO - Program code:

program ciclo_while;
var
    contador, suma : int;
main {
    contador = 1;
    suma = 0;
    
    while (contador < 5) do {
        suma = suma + contador;
        print("Iteración: ", contador, " Suma actual: ", suma);
        contador = contador + 1;
    };
    
    print("Suma final: ", suma);
}
end

2025-05-25 09:27:02,844 - INFO - Compilation successful!
2025-05-25 09:27:02,850 - INFO - QUADRUPLES:
2025-05-25 09:27:02,851 - INFO - 
Adding ID 'contador' to temp list in scope: global
Added 'contador' to temporary variable list in scope: global
Adding ID 'suma' to temp list in scope: global
Added 'suma' to temporary variable list in scope: global
Set current type to Type.INT
Adding variables to table in scope: global
Added global variable 'contador' of type Type.INT at address 5000
Added global variable 'suma' of type Type.INT at address 5001
Starting variable declaration in scope 'global'
Pushed scope: main, current scope stack: ['global', 'main']
Main function declared, scope changed to main
Left type: Type.INT, Right type: Type.INT, Operator: Operation.LESS
Processing operand: contador of type Type.INT
[] PilaO
Processing operand: 5 of type Type.INT
['contador'] PilaO
['contador', '5'] PilaO
Check contador 5 <
Processing operand: suma of type Type.INT
[19000] PilaO
Processing operand: contador of type Type.INT
[19000, 'suma'] PilaO
[19000, 'suma', 'contador'] PilaO
Check suma contador +
Processing operand: contador of type Type.INT
[19000, 15000] PilaO
Processing operand: 1 of type Type.INT
[19000, 15000, 'contador'] PilaO
[19000, 15000, 'contador', '1'] PilaO
Check contador 1 +
Program ciclo_while started, scope reset to global
Program ciclo_while completed

===== QUADRUPLES WITH MEMORY ADDRESSES =====
INDEX: (OPERATOR, LEFT_OPERAND, RIGHT_OPERAND, RESULT)
      EXPLANATION
----------------------------------------------------------------------

===== FUNCTION DIRECTORY =====
Function: main - Start Address: None
----------------------------------------------------------------------
0: (goto, None, None, 1)
      jump to quadruple 1
----------------------------------------------------------------------
1: (=, 20000, None, 5000)
      assign value of constant(1) to contador (global)
----------------------------------------------------------------------
2: (=, 20001, None, 5001)
      assign value of constant(0) to suma (global)
----------------------------------------------------------------------
3: (<, 5000, 20002, 19000)
      compare if contador (global) is less than constant(5), store boolean result in addr:19000
----------------------------------------------------------------------
4: (gotof, 19000, None, 14)
      if addr:19000 is false, jump to quadruple 14
----------------------------------------------------------------------
5: (+, 5001, 5000, 15000)
      add suma (global) and contador (global), store result in addr:15000
----------------------------------------------------------------------
6: (=, 15000, None, 5001)
      assign value of addr:15000 to suma (global)
----------------------------------------------------------------------
7: (print, Iteración: , None, None)
      print value addr:Iteración: 
----------------------------------------------------------------------
8: (print, 5000, None, None)
      print value contador (global)
----------------------------------------------------------------------
9: (print,  Suma actual: , None, None)
      print value addr: Suma actual: 
----------------------------------------------------------------------
10: (print, 5001, None, None)
      print value suma (global)
----------------------------------------------------------------------
11: (+, 5000, 20000, 15001)
      add contador (global) and constant(1), store result in addr:15001
----------------------------------------------------------------------
12: (=, 15001, None, 5000)
      assign value of addr:15001 to contador (global)
----------------------------------------------------------------------
13: (goto, None, None, 3)
      jump to quadruple 3
----------------------------------------------------------------------
14: (print, Suma final: , None, None)
      print value addr:Suma final: 
----------------------------------------------------------------------
15: (print, 5001, None, None)
      print value suma (global)
----------------------------------------------------------------------

2025-05-25 09:27:02,852 - INFO - ======== END TEST: while_loop ========

2025-05-25 09:27:02,853 - INFO - 
Running test: functions
2025-05-25 09:27:02,855 - INFO - ======== TESTING: functions ========
2025-05-25 09:27:02,856 - INFO - Program code:

program funciones;
var
    resultado, num1, num2 : int;

void sumar(a : int, b : int)
[
    var res : int;
    {
        res = a + b;
        print("La suma es: ", res);
    }
];

void multiplicar(c : int, d : int)
[
    var res : int;
    {
        res = c * d;
        print("El producto es: ", res);
    }
];

main {
    num1 = 8;
    num2 = 3;
    
    sumar(num1, num2);
    multiplicar(num1, num2);
    
    sumar(5, 7);
    multiplicar(num1 + 2, num2 * 2);
}
end

2025-05-25 09:27:02,865 - INFO - Compilation successful!
2025-05-25 09:27:02,867 - INFO - QUADRUPLES:
2025-05-25 09:27:02,867 - INFO - 
Adding ID 'resultado' to temp list in scope: global
Added 'resultado' to temporary variable list in scope: global
Adding ID 'num1' to temp list in scope: global
Added 'num1' to temporary variable list in scope: global
Adding ID 'num2' to temp list in scope: global
Added 'num2' to temporary variable list in scope: global
Set current type to Type.INT
Adding variables to table in scope: global
Added global variable 'resultado' of type Type.INT at address 5000
Added global variable 'num1' of type Type.INT at address 5001
Added global variable 'num2' of type Type.INT at address 5002
Starting variable declaration in scope 'global'
Pushed scope: sumar, current scope stack: ['global', 'sumar']
Declared function 'sumar' with return type Type.VOID, scope changed to: sumar
Added parameter 'a' of type Type.INT at address 11000 to function 'sumar'
Added parameter 'b' of type Type.INT at address 11001 to function 'sumar'
Adding ID 'res' to temp list in scope: sumar
Added 'res' to temporary variable list in scope: sumar
Set current type to Type.INT
Adding variables to table in scope: sumar
Added local variable 'res' of type Type.INT at address 11002 to function 'sumar'
Starting variable declaration in scope 'sumar'
Processing operand: a of type Type.INT
[] PilaO
Processing operand: b of type Type.INT
['a'] PilaO
['a', 'b'] PilaO
Check a b +
Popped scope: sumar, current scope is now: global
Ended function 'sumar' declaration, returned to scope: global
Pushed scope: multiplicar, current scope stack: ['global', 'multiplicar']
Declared function 'multiplicar' with return type Type.VOID, scope changed to: multiplicar
Added parameter 'c' of type Type.INT at address 11003 to function 'multiplicar'
Added parameter 'd' of type Type.INT at address 11004 to function 'multiplicar'
Adding ID 'res' to temp list in scope: multiplicar
Added 'res' to temporary variable list in scope: multiplicar
Set current type to Type.INT
Adding variables to table in scope: multiplicar
Added local variable 'res' of type Type.INT at address 11005 to function 'multiplicar'
Starting variable declaration in scope 'multiplicar'
Processing operand: c of type Type.INT
[15000] PilaO
Processing operand: d of type Type.INT
[15000, 'c'] PilaO
[15000, 'c', 'd'] PilaO
Check c d *
Popped scope: multiplicar, current scope is now: global
Ended function 'multiplicar' declaration, returned to scope: global
Pushed scope: main, current scope stack: ['global', 'main']
Main function declared, scope changed to main
Processing operand: num1 of type Type.INT
[15000, 15001] PilaO
Processing operand: 2 of type Type.INT
[15000, 15001, 'num1'] PilaO
[15000, 15001, 'num1', '2'] PilaO
Check num1 2 +
Processing operand: num2 of type Type.INT
[15000, 15001, 15002] PilaO
Processing operand: 2 of type Type.INT
[15000, 15001, 15002, 'num2'] PilaO
[15000, 15001, 15002, 'num2', '2'] PilaO
Check num2 2 *
Program funciones started, scope reset to global
Program funciones completed

===== QUADRUPLES WITH MEMORY ADDRESSES =====
INDEX: (OPERATOR, LEFT_OPERAND, RIGHT_OPERAND, RESULT)
      EXPLANATION
----------------------------------------------------------------------

===== FUNCTION DIRECTORY =====
Function: sumar - Start Address: 1
Function: multiplicar - Start Address: 6
Function: main - Start Address: None
----------------------------------------------------------------------
0: (goto, None, None, 11)
      jump to quadruple 11
----------------------------------------------------------------------

==================== FUNCTION: SUMAR ====================
Starting at quadruple 1
----------------------------------------------------------------------
1: (+, 11000, 11001, 15000)
      add addr:11000 and addr:11001, store result in addr:15000
----------------------------------------------------------------------
2: (=, 15000, None, 11002)
      assign value of addr:15000 to addr:11002
----------------------------------------------------------------------
3: (print, La suma es: , None, None)
      print value addr:La suma es: 
----------------------------------------------------------------------
4: (print, 11002, None, None)
      print value addr:11002
----------------------------------------------------------------------
5: (ENDFUNC, None, None, None)
      perform operation ENDFUNC with operand None
==================== END OF SUMAR ====================
----------------------------------------------------------------------

==================== FUNCTION: MULTIPLICAR ====================
Starting at quadruple 6
----------------------------------------------------------------------
6: (*, 11003, 11004, 15001)
      multiply addr:11003 and addr:11004, store result in addr:15001
----------------------------------------------------------------------
7: (=, 15001, None, 11005)
      assign value of addr:15001 to addr:11005
----------------------------------------------------------------------
8: (print, El producto es: , None, None)
      print value addr:El producto es: 
----------------------------------------------------------------------
9: (print, 11005, None, None)
      print value addr:11005
----------------------------------------------------------------------
10: (ENDFUNC, None, None, None)
      perform operation ENDFUNC with operand None
==================== END OF MULTIPLICAR ====================
----------------------------------------------------------------------
11: (=, 20000, None, 5001)
      assign value of constant(8) to num1 (global)
----------------------------------------------------------------------
12: (=, 20001, None, 5002)
      assign value of constant(3) to num2 (global)
----------------------------------------------------------------------
13: (ERA, sumar, None, None)
      perform operation ERA with operand addr:sumar
----------------------------------------------------------------------
14: (parámetro, 5001, par1, None)
      perform operation parámetro with operands num1 (global), addr:par1, result in None
----------------------------------------------------------------------
15: (parámetro, 5002, par2, None)
      perform operation parámetro with operands num2 (global), addr:par2, result in None
----------------------------------------------------------------------
16: (GOSUB, sumar, None, None)
      perform operation GOSUB with operand addr:sumar
----------------------------------------------------------------------
17: (ERA, multiplicar, None, None)
      perform operation ERA with operand addr:multiplicar
----------------------------------------------------------------------
18: (parámetro, 5001, par1, None)
      perform operation parámetro with operands num1 (global), addr:par1, result in None
----------------------------------------------------------------------
19: (parámetro, 5002, par2, None)
      perform operation parámetro with operands num2 (global), addr:par2, result in None
----------------------------------------------------------------------
20: (GOSUB, multiplicar, None, None)
      perform operation GOSUB with operand addr:multiplicar
----------------------------------------------------------------------
21: (ERA, sumar, None, None)
      perform operation ERA with operand addr:sumar
----------------------------------------------------------------------
22: (parámetro, 20002, par1, None)
      perform operation parámetro with operands constant(5), addr:par1, result in None
----------------------------------------------------------------------
23: (parámetro, 20003, par2, None)
      perform operation parámetro with operands constant(7), addr:par2, result in None
----------------------------------------------------------------------
24: (GOSUB, sumar, None, None)
      perform operation GOSUB with operand addr:sumar
----------------------------------------------------------------------
25: (ERA, multiplicar, None, None)
      perform operation ERA with operand addr:multiplicar
----------------------------------------------------------------------
26: (+, 5001, 20004, 15002)
      add num1 (global) and constant(2), store result in addr:15002
----------------------------------------------------------------------
27: (parámetro, 15002, par1, None)
      perform operation parámetro with operands addr:15002, addr:par1, result in None
----------------------------------------------------------------------
28: (*, 5002, 20004, 15003)
      multiply num2 (global) and constant(2), store result in addr:15003
----------------------------------------------------------------------
29: (parámetro, 15003, par2, None)
      perform operation parámetro with operands addr:15003, addr:par2, result in None
----------------------------------------------------------------------
30: (GOSUB, multiplicar, None, None)
      perform operation GOSUB with operand addr:multiplicar
----------------------------------------------------------------------

2025-05-25 09:27:02,877 - INFO - ======== END TEST: functions ========

2025-05-25 09:27:02,877 - INFO - 
Running test: float_operations
2025-05-25 09:27:02,878 - INFO - ======== TESTING: float_operations ========
2025-05-25 09:27:02,878 - INFO - Program code:

program operaciones_flotantes;
var
    x : float;
    y : int;
    z : float;

main {
    x = 3.5;
    y = 2;
    
    z = x * y + 1.5;
    print("Resultado flotante: ", z);
}
end

2025-05-25 09:27:02,880 - INFO - Compilation successful!
2025-05-25 09:27:02,880 - INFO - QUADRUPLES:
2025-05-25 09:27:02,880 - INFO - 
Adding ID 'x' to temp list in scope: global
Added 'x' to temporary variable list in scope: global
Set current type to Type.FLOAT
Adding variables to table in scope: global
Added global variable 'x' of type Type.FLOAT at address 8000
Adding ID 'y' to temp list in scope: global
Added 'y' to temporary variable list in scope: global
Set current type to Type.INT
Adding variables to table in scope: global
Added global variable 'y' of type Type.INT at address 5000
Adding ID 'z' to temp list in scope: global
Added 'z' to temporary variable list in scope: global
Set current type to Type.FLOAT
Adding variables to table in scope: global
Added global variable 'z' of type Type.FLOAT at address 8001
Starting variable declaration in scope 'global'
Pushed scope: main, current scope stack: ['global', 'main']
Main function declared, scope changed to main
Processing operand: x of type Type.FLOAT
[] PilaO
Processing operand: y of type Type.INT
['x'] PilaO
['x', 'y'] PilaO
Check x y *
Processing operand: 17000 of type Type.FLOAT
[17000] PilaO
Processing operand: 1.5 of type Type.FLOAT
[17000, 17000] PilaO
[17000, 17000, '1.5'] PilaO
Check 17000 1.5 +
Program operaciones_flotantes started, scope reset to global
Program operaciones_flotantes completed

===== QUADRUPLES WITH MEMORY ADDRESSES =====
INDEX: (OPERATOR, LEFT_OPERAND, RIGHT_OPERAND, RESULT)
      EXPLANATION
----------------------------------------------------------------------

===== FUNCTION DIRECTORY =====
Function: main - Start Address: None
----------------------------------------------------------------------
0: (goto, None, None, 1)
      jump to quadruple 1
----------------------------------------------------------------------
1: (=, 20500, None, 8000)
      assign value of constant(3.5) to x (global)
----------------------------------------------------------------------
2: (=, 20000, None, 5000)
      assign value of constant(2) to y (global)
----------------------------------------------------------------------
3: (*, 8000, 5000, 17000)
      multiply x (global) and y (global), store result in addr:17000
----------------------------------------------------------------------
4: (+, 17000, 20501, 17001)
      add addr:17000 and constant(1.5), store result in addr:17001
----------------------------------------------------------------------
5: (=, 17001, None, 8001)
      assign value of addr:17001 to z (global)
----------------------------------------------------------------------
6: (print, Resultado flotante: , None, None)
      print value addr:Resultado flotante: 
----------------------------------------------------------------------
7: (print, 8001, None, None)
      print value z (global)
----------------------------------------------------------------------

2025-05-25 09:27:02,882 - INFO - ======== END TEST: float_operations ========

2025-05-25 09:27:02,882 - INFO - 
Running test: negative_values
2025-05-25 09:27:02,882 - INFO - ======== TESTING: negative_values ========
2025-05-25 09:27:02,883 - INFO - Program code:

program negativos;
var
    a, b : int;
    resultado : int;

main {
    a = -5;
    b = 3;
    resultado = a + b;
    print("Resultado con negativos: ", resultado);
}
end

2025-05-25 09:27:02,885 - INFO - Compilation successful!
2025-05-25 09:27:02,885 - INFO - QUADRUPLES:
2025-05-25 09:27:02,885 - INFO - 
Adding ID 'a' to temp list in scope: global
Added 'a' to temporary variable list in scope: global
Adding ID 'b' to temp list in scope: global
Added 'b' to temporary variable list in scope: global
Set current type to Type.INT
Adding variables to table in scope: global
Added global variable 'a' of type Type.INT at address 5000
Added global variable 'b' of type Type.INT at address 5001
Adding ID 'resultado' to temp list in scope: global
Added 'resultado' to temporary variable list in scope: global
Set current type to Type.INT
Adding variables to table in scope: global
Added global variable 'resultado' of type Type.INT at address 5002
Starting variable declaration in scope 'global'
Pushed scope: main, current scope stack: ['global', 'main']
Main function declared, scope changed to main
Processing operand: -1 of type Type.INT
[] PilaO
Processing operand: 5 of type Type.INT
['-1'] PilaO
['-1', '5'] PilaO
Check -1 5 *
Processing operand: a of type Type.INT
[15000] PilaO
Processing operand: b of type Type.INT
[15000, 'a'] PilaO
[15000, 'a', 'b'] PilaO
Check a b +
Program negativos started, scope reset to global
Program negativos completed

===== QUADRUPLES WITH MEMORY ADDRESSES =====
INDEX: (OPERATOR, LEFT_OPERAND, RIGHT_OPERAND, RESULT)
      EXPLANATION
----------------------------------------------------------------------

===== FUNCTION DIRECTORY =====
Function: main - Start Address: None
----------------------------------------------------------------------
0: (goto, None, None, 1)
      jump to quadruple 1
----------------------------------------------------------------------
1: (*, 20000, 20001, 15000)
      multiply constant(-1) and constant(5), store result in addr:15000
----------------------------------------------------------------------
2: (=, 15000, None, 5000)
      assign value of addr:15000 to a (global)
----------------------------------------------------------------------
3: (=, 20002, None, 5001)
      assign value of constant(3) to b (global)
----------------------------------------------------------------------
4: (+, 5000, 5001, 15001)
      add a (global) and b (global), store result in addr:15001
----------------------------------------------------------------------
5: (=, 15001, None, 5002)
      assign value of addr:15001 to resultado (global)
----------------------------------------------------------------------
6: (print, Resultado con negativos: , None, None)
      print value addr:Resultado con negativos: 
----------------------------------------------------------------------
7: (print, 5002, None, None)
      print value resultado (global)
----------------------------------------------------------------------

2025-05-25 09:27:02,897 - INFO - ======== END TEST: negative_values ========

2025-05-25 09:27:02,897 - INFO - 
======== TEST SUMMARY ========
2025-05-25 09:27:02,897 - INFO - arithmetic: PASS
2025-05-25 09:27:02,897 - INFO - if_else: PASS
2025-05-25 09:27:02,897 - INFO - while_loop: PASS
2025-05-25 09:27:02,897 - INFO - functions: PASS
2025-05-25 09:27:02,899 - INFO - float_operations: PASS
2025-05-25 09:27:02,899 - INFO - negative_values: PASS
2025-05-25 09:27:02,899 - INFO - 
Test suite completed
