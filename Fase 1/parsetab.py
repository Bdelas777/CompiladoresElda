
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TOKEN_ASSIGN TOKEN_COLON TOKEN_COMMA TOKEN_CTE_FLOAT TOKEN_CTE_INT TOKEN_CTE_STRING TOKEN_DIV TOKEN_DO TOKEN_ELSE TOKEN_END TOKEN_FLOAT TOKEN_GT TOKEN_ID TOKEN_IF TOKEN_INT TOKEN_LBRACE TOKEN_LCOL TOKEN_LPAREN TOKEN_LT TOKEN_MAIN TOKEN_MINUS TOKEN_MULT TOKEN_NE TOKEN_PLUS TOKEN_PRINT TOKEN_PROGRAM TOKEN_RBRACE TOKEN_RCOL TOKEN_RPAREN TOKEN_SEMICOLON TOKEN_VAR TOKEN_VOID TOKEN_WHILEprograma : TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON saveGo dec_var dec_funcs TOKEN_MAIN fillMain body TOKEN_ENDsaveGo : emptyfillMain : emptydec_var : vars\n    | emptydec_funcs : funcs dec_funcs\n    | emptyvars : TOKEN_VAR variable rep_varrep_var  : variable rep_var\n    |  emptyvariable : TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLONmas_ids : TOKEN_COMMA TOKEN_ID mas_ids\n    |  emptytype : TOKEN_INT\n    | TOKEN_FLOATbody : TOKEN_LBRACE dec_statements TOKEN_RBRACEdec_statements : statement dec_statements\n    | emptystatement : assign\n        | condition\n        | cycle\n        | f_call\n        | printprint : TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLONexpresiones : TOKEN_CTE_STRING comas\n    | expresion comascomas : TOKEN_COMMA expresion comas\n    | TOKEN_COMMA TOKEN_CTE_STRING comas\n    | emptysaveQuad : emptyGotoF : emptycycle : TOKEN_WHILE TOKEN_LPAREN saveQuad expresion GotoF TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLONsaveQuadIF : emptyGotoFIF : emptycondition : TOKEN_IF TOKEN_LPAREN expresion saveQuadIF TOKEN_RPAREN body GotoFIF else TOKEN_SEMICOLONelse : TOKEN_ELSE body\n    | emptycte : TOKEN_CTE_INT\n    | TOKEN_CTE_FLOATexpresion : exp compararcomparar  : signo exp\n    | emptysigno : TOKEN_GT\n    | TOKEN_LT\n    | TOKEN_NEexp  : termino suma_restasuma_resta : TOKEN_PLUS termino suma_resta\n    | TOKEN_MINUS termino suma_resta\n    | emptytermino : factor multi_divmulti_div  : operacion_mul_div factor multi_div  \n    | emptyoperacion_mul_div : TOKEN_DIV\n    | TOKEN_MULTfactor : definicion\n    | operacionesdefinicion : TOKEN_LPAREN expresion TOKEN_RPARENoperaciones : opciones_mas_menos id_cteopciones_mas_menos : TOKEN_PLUS\n    | TOKEN_MINUS\n    | emptyid_cte : TOKEN_ID\n    | ctefuncs : TOKEN_VOID TOKEN_ID save_func_start TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL end_func TOKEN_SEMICOLONsave_func_start : emptyend_func : emptyscopefun : emptytipo : def_tipo\n    | emptydef_tipo : TOKEN_ID TOKEN_COLON type comacoma : TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma\n    | emptyvar : vars \n    | emptyf_call : TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad TOKEN_SEMICOLONera_quad : emptygosub_quad : emptydef_exp : expresion param_quad coma2\n    | emptyparam_quad : emptycoma2 : TOKEN_COMMA expresion param_quad_coma coma2\n    | emptyparam_quad_coma : emptyassign : TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLONempty :'
    
_lr_action_items = {'TOKEN_PROGRAM':([0,],[2,]),'$end':([1,40,],[0,-1,]),'TOKEN_ID':([2,10,14,15,20,24,34,35,42,44,45,46,47,48,57,60,63,64,65,74,75,76,77,78,79,81,82,88,90,92,93,94,96,97,100,102,103,112,118,122,138,149,157,174,176,],[3,16,19,16,16,32,49,53,49,-19,-20,-21,-22,-23,-11,-85,-85,-85,-85,-85,106,-59,-60,-61,-85,-85,-30,-84,-85,-43,-44,-45,-85,-85,-85,-53,-54,-61,-85,141,-24,-85,-75,-35,-32,]),'TOKEN_SEMICOLON':([3,36,37,38,58,68,69,70,71,72,73,89,91,95,98,99,101,105,106,107,108,109,116,127,128,129,130,131,132,143,144,145,146,147,151,156,159,160,163,164,167,169,170,175,],[4,57,-14,-15,-16,88,-85,-85,-85,-55,-56,-40,-42,-46,-49,-50,-52,-58,-62,-63,-38,-39,138,-41,-85,-85,-85,-57,-85,-47,-48,-51,157,-77,-85,-85,-85,-34,172,-66,174,-37,176,-36,]),'TOKEN_VAR':([4,5,6,87,],[-85,10,-2,10,]),'TOKEN_VOID':([4,5,6,7,8,9,12,15,20,21,22,30,57,172,],[-85,-85,-2,14,-4,-5,14,-85,-85,-8,-10,-9,-11,-64,]),'TOKEN_MAIN':([4,5,6,7,8,9,11,12,13,15,18,20,21,22,30,57,172,],[-85,-85,-2,-85,-4,-5,17,-85,-7,-85,-6,-85,-8,-10,-9,-11,-64,]),'TOKEN_LBRACE':([15,17,20,21,22,26,27,30,57,87,124,125,126,135,161,168,],[-85,-85,-85,-8,-10,34,-3,-9,-11,-85,34,-73,-74,34,34,34,]),'TOKEN_COMMA':([16,32,37,38,69,70,71,72,73,84,85,86,89,91,95,98,99,101,105,106,107,108,109,111,127,128,129,130,131,133,134,139,140,143,144,145,158,162,165,166,],[24,24,-14,-15,-85,-85,-85,-55,-56,118,118,122,-40,-42,-46,-49,-50,-52,-58,-62,-63,-38,-39,-85,-41,-85,-85,-85,-57,149,-80,118,118,-47,-48,-51,-85,122,149,-83,]),'TOKEN_COLON':([16,23,25,32,39,53,141,],[-85,31,-13,-85,-12,66,155,]),'TOKEN_LPAREN':([19,28,29,49,50,51,52,60,61,62,63,64,65,74,79,81,82,90,92,93,94,96,97,100,102,103,118,149,],[-85,35,-65,-85,63,64,65,74,79,-76,74,-85,74,74,74,74,-30,74,-43,-44,-45,74,74,74,-53,-54,74,74,]),'TOKEN_INT':([31,66,155,],[37,37,37,]),'TOKEN_FLOAT':([31,66,155,],[38,38,38,]),'TOKEN_END':([33,58,],[40,-16,]),'TOKEN_RBRACE':([34,41,42,43,44,45,46,47,48,59,88,138,157,174,176,],[-85,58,-85,-18,-19,-20,-21,-22,-23,-17,-84,-24,-75,-35,-32,]),'TOKEN_IF':([34,42,44,45,46,47,48,88,138,157,174,176,],[50,50,-19,-20,-21,-22,-23,-84,-24,-75,-35,-32,]),'TOKEN_WHILE':([34,42,44,45,46,47,48,88,138,157,174,176,],[51,51,-19,-20,-21,-22,-23,-84,-24,-75,-35,-32,]),'TOKEN_PRINT':([34,42,44,45,46,47,48,88,138,157,174,176,],[52,52,-19,-20,-21,-22,-23,-84,-24,-75,-35,-32,]),'TOKEN_RPAREN':([35,37,38,54,55,56,69,70,71,72,73,79,80,83,84,85,86,89,91,95,98,99,101,104,105,106,107,108,109,110,111,112,113,114,115,117,119,120,121,123,127,128,129,130,131,133,134,136,137,139,140,143,144,145,148,150,153,154,158,162,165,166,171,173,],[-85,-14,-15,67,-68,-69,-85,-85,-85,-55,-56,-85,-85,116,-85,-85,-85,-40,-42,-46,-49,-50,-52,131,-58,-62,-63,-38,-39,132,-85,-79,135,-33,-85,-25,-29,-26,-70,-72,-41,-85,-85,-85,-57,-85,-80,152,-31,-85,-85,-47,-48,-51,-78,-82,-27,-28,-85,-85,-85,-83,-71,-81,]),'TOKEN_ASSIGN':([49,],[60,]),'TOKEN_RCOL':([58,142,],[-16,156,]),'TOKEN_ELSE':([58,151,159,160,],[-16,-85,168,-34,]),'TOKEN_PLUS':([60,63,64,65,70,71,72,73,74,79,81,82,90,92,93,94,96,97,99,100,101,102,103,105,106,107,108,109,118,128,129,130,131,145,149,],[76,76,-85,76,96,-85,-55,-56,76,76,76,-30,76,-43,-44,-45,76,76,-50,76,-52,-53,-54,-58,-62,-63,-38,-39,76,96,96,-85,-57,-51,76,]),'TOKEN_MINUS':([60,63,64,65,70,71,72,73,74,79,81,82,90,92,93,94,96,97,99,100,101,102,103,105,106,107,108,109,118,128,129,130,131,145,149,],[77,77,-85,77,97,-85,-55,-56,77,77,77,-30,77,-43,-44,-45,77,77,-50,77,-52,-53,-54,-58,-62,-63,-38,-39,77,97,97,-85,-57,-51,77,]),'TOKEN_CTE_INT':([60,63,64,65,74,75,76,77,78,79,81,82,90,92,93,94,96,97,100,102,103,112,118,149,],[-85,-85,-85,-85,-85,108,-59,-60,-61,-85,-85,-30,-85,-43,-44,-45,-85,-85,-85,-53,-54,-61,-85,-85,]),'TOKEN_CTE_FLOAT':([60,63,64,65,74,75,76,77,78,79,81,82,90,92,93,94,96,97,100,102,103,112,118,149,],[-85,-85,-85,-85,-85,109,-59,-60,-61,-85,-85,-30,-85,-43,-44,-45,-85,-85,-85,-53,-54,-61,-85,-85,]),'TOKEN_CTE_STRING':([65,118,],[84,140,]),'TOKEN_LCOL':([67,],[87,]),'TOKEN_GT':([69,70,71,72,73,95,98,99,101,105,106,107,108,109,128,129,130,131,143,144,145,],[92,-85,-85,-55,-56,-46,-49,-50,-52,-58,-62,-63,-38,-39,-85,-85,-85,-57,-47,-48,-51,]),'TOKEN_LT':([69,70,71,72,73,95,98,99,101,105,106,107,108,109,128,129,130,131,143,144,145,],[93,-85,-85,-55,-56,-46,-49,-50,-52,-58,-62,-63,-38,-39,-85,-85,-85,-57,-47,-48,-51,]),'TOKEN_NE':([69,70,71,72,73,95,98,99,101,105,106,107,108,109,128,129,130,131,143,144,145,],[94,-85,-85,-55,-56,-46,-49,-50,-52,-58,-62,-63,-38,-39,-85,-85,-85,-57,-47,-48,-51,]),'TOKEN_DIV':([71,72,73,105,106,107,108,109,130,131,],[102,-55,-56,-58,-62,-63,-38,-39,102,-57,]),'TOKEN_MULT':([71,72,73,105,106,107,108,109,130,131,],[103,-55,-56,-58,-62,-63,-38,-39,103,-57,]),'TOKEN_DO':([152,],[161,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'saveGo':([4,],[5,]),'empty':([4,5,7,12,15,16,17,19,20,32,34,35,42,49,60,63,64,65,69,70,71,74,79,80,81,84,85,86,87,90,96,97,100,111,115,118,128,129,130,132,133,139,140,149,151,156,158,159,162,165,],[6,9,13,13,22,25,27,29,22,25,43,56,43,62,78,78,82,78,91,98,101,78,112,114,78,119,119,123,126,78,78,78,78,134,137,78,98,98,101,147,150,119,119,78,160,164,166,169,123,150,]),'dec_var':([5,],[7,]),'vars':([5,87,],[8,125,]),'dec_funcs':([7,12,],[11,18,]),'funcs':([7,12,],[12,12,]),'variable':([10,15,20,],[15,20,20,]),'rep_var':([15,20,],[21,30,]),'mas_ids':([16,32,],[23,39,]),'fillMain':([17,],[26,]),'save_func_start':([19,],[28,]),'body':([26,124,135,161,168,],[33,142,151,170,175,]),'type':([31,66,155,],[36,86,162,]),'dec_statements':([34,42,],[41,59,]),'statement':([34,42,],[42,42,]),'assign':([34,42,],[44,44,]),'condition':([34,42,],[45,45,]),'cycle':([34,42,],[46,46,]),'f_call':([34,42,],[47,47,]),'print':([34,42,],[48,48,]),'tipo':([35,],[54,]),'def_tipo':([35,],[55,]),'era_quad':([49,],[61,]),'expresion':([60,63,65,74,79,81,118,149,],[68,80,85,104,111,115,139,158,]),'exp':([60,63,65,74,79,81,90,118,149,],[69,69,69,69,69,69,127,69,69,]),'termino':([60,63,65,74,79,81,90,96,97,118,149,],[70,70,70,70,70,70,70,128,129,70,70,]),'factor':([60,63,65,74,79,81,90,96,97,100,118,149,],[71,71,71,71,71,71,71,71,71,130,71,71,]),'definicion':([60,63,65,74,79,81,90,96,97,100,118,149,],[72,72,72,72,72,72,72,72,72,72,72,72,]),'operaciones':([60,63,65,74,79,81,90,96,97,100,118,149,],[73,73,73,73,73,73,73,73,73,73,73,73,]),'opciones_mas_menos':([60,63,65,74,79,81,90,96,97,100,118,149,],[75,75,75,75,75,75,75,75,75,75,75,75,]),'saveQuad':([64,],[81,]),'expresiones':([65,],[83,]),'comparar':([69,],[89,]),'signo':([69,],[90,]),'suma_resta':([70,128,129,],[95,143,144,]),'multi_div':([71,130,],[99,145,]),'operacion_mul_div':([71,130,],[100,100,]),'id_cte':([75,],[105,]),'cte':([75,],[107,]),'def_exp':([79,],[110,]),'saveQuadIF':([80,],[113,]),'comas':([84,85,139,140,],[117,120,153,154,]),'coma':([86,162,],[121,171,]),'var':([87,],[124,]),'param_quad':([111,],[133,]),'GotoF':([115,],[136,]),'gosub_quad':([132,],[146,]),'coma2':([133,165,],[148,173,]),'GotoFIF':([151,],[159,]),'end_func':([156,],[163,]),'param_quad_coma':([158,],[165,]),'else':([159,],[167,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON saveGo dec_var dec_funcs TOKEN_MAIN fillMain body TOKEN_END','programa',10,'p_programa','yacc.py',24),
  ('saveGo -> empty','saveGo',1,'p_saveGo','yacc.py',33),
  ('fillMain -> empty','fillMain',1,'p_fillMain','yacc.py',41),
  ('dec_var -> vars','dec_var',1,'p_dec_var','yacc.py',49),
  ('dec_var -> empty','dec_var',1,'p_dec_var','yacc.py',50),
  ('dec_funcs -> funcs dec_funcs','dec_funcs',2,'p_dec_funcs','yacc.py',54),
  ('dec_funcs -> empty','dec_funcs',1,'p_dec_funcs','yacc.py',55),
  ('vars -> TOKEN_VAR variable rep_var','vars',3,'p_vars','yacc.py',65),
  ('rep_var -> variable rep_var','rep_var',2,'p_rep_var','yacc.py',73),
  ('rep_var -> empty','rep_var',1,'p_rep_var','yacc.py',74),
  ('variable -> TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLON','variable',5,'p_variable','yacc.py',84),
  ('mas_ids -> TOKEN_COMMA TOKEN_ID mas_ids','mas_ids',3,'p_mas_ids','yacc.py',94),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','yacc.py',95),
  ('type -> TOKEN_INT','type',1,'p_type','yacc.py',105),
  ('type -> TOKEN_FLOAT','type',1,'p_type','yacc.py',106),
  ('body -> TOKEN_LBRACE dec_statements TOKEN_RBRACE','body',3,'p_body','yacc.py',115),
  ('dec_statements -> statement dec_statements','dec_statements',2,'p_dec_statements','yacc.py',119),
  ('dec_statements -> empty','dec_statements',1,'p_dec_statements','yacc.py',120),
  ('statement -> assign','statement',1,'p_statement','yacc.py',130),
  ('statement -> condition','statement',1,'p_statement','yacc.py',131),
  ('statement -> cycle','statement',1,'p_statement','yacc.py',132),
  ('statement -> f_call','statement',1,'p_statement','yacc.py',133),
  ('statement -> print','statement',1,'p_statement','yacc.py',134),
  ('print -> TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLON','print',5,'p_print','yacc.py',138),
  ('expresiones -> TOKEN_CTE_STRING comas','expresiones',2,'p_expresiones','yacc.py',148),
  ('expresiones -> expresion comas','expresiones',2,'p_expresiones','yacc.py',149),
  ('comas -> TOKEN_COMMA expresion comas','comas',3,'p_comas','yacc.py',156),
  ('comas -> TOKEN_COMMA TOKEN_CTE_STRING comas','comas',3,'p_comas','yacc.py',157),
  ('comas -> empty','comas',1,'p_comas','yacc.py',158),
  ('saveQuad -> empty','saveQuad',1,'p_saveQuad','yacc.py',168),
  ('GotoF -> empty','GotoF',1,'p_GotoF','yacc.py',173),
  ('cycle -> TOKEN_WHILE TOKEN_LPAREN saveQuad expresion GotoF TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLON','cycle',9,'p_cycle','yacc.py',180),
  ('saveQuadIF -> empty','saveQuadIF',1,'p_saveQuadIF','yacc.py',195),
  ('GotoFIF -> empty','GotoFIF',1,'p_GotoFIF','yacc.py',204),
  ('condition -> TOKEN_IF TOKEN_LPAREN expresion saveQuadIF TOKEN_RPAREN body GotoFIF else TOKEN_SEMICOLON','condition',9,'p_condition','yacc.py',216),
  ('else -> TOKEN_ELSE body','else',2,'p_else','yacc.py',230),
  ('else -> empty','else',1,'p_else','yacc.py',231),
  ('cte -> TOKEN_CTE_INT','cte',1,'p_cte','yacc.py',238),
  ('cte -> TOKEN_CTE_FLOAT','cte',1,'p_cte','yacc.py',239),
  ('expresion -> exp comparar','expresion',2,'p_expresion','yacc.py',246),
  ('comparar -> signo exp','comparar',2,'p_comparar','yacc.py',264),
  ('comparar -> empty','comparar',1,'p_comparar','yacc.py',265),
  ('signo -> TOKEN_GT','signo',1,'p_signo','yacc.py',272),
  ('signo -> TOKEN_LT','signo',1,'p_signo','yacc.py',273),
  ('signo -> TOKEN_NE','signo',1,'p_signo','yacc.py',274),
  ('exp -> termino suma_resta','exp',2,'p_exp','yacc.py',278),
  ('suma_resta -> TOKEN_PLUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',296),
  ('suma_resta -> TOKEN_MINUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',297),
  ('suma_resta -> empty','suma_resta',1,'p_suma_resta','yacc.py',298),
  ('termino -> factor multi_div','termino',2,'p_termino','yacc.py',308),
  ('multi_div -> operacion_mul_div factor multi_div','multi_div',3,'p_multi_div','yacc.py',326),
  ('multi_div -> empty','multi_div',1,'p_multi_div','yacc.py',327),
  ('operacion_mul_div -> TOKEN_DIV','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',337),
  ('operacion_mul_div -> TOKEN_MULT','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',338),
  ('factor -> definicion','factor',1,'p_factor','yacc.py',342),
  ('factor -> operaciones','factor',1,'p_factor','yacc.py',343),
  ('definicion -> TOKEN_LPAREN expresion TOKEN_RPAREN','definicion',3,'p_definicion','yacc.py',347),
  ('operaciones -> opciones_mas_menos id_cte','operaciones',2,'p_operaciones','yacc.py',354),
  ('opciones_mas_menos -> TOKEN_PLUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',371),
  ('opciones_mas_menos -> TOKEN_MINUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',372),
  ('opciones_mas_menos -> empty','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',373),
  ('id_cte -> TOKEN_ID','id_cte',1,'p_id_cte','yacc.py',377),
  ('id_cte -> cte','id_cte',1,'p_id_cte','yacc.py',378),
  ('funcs -> TOKEN_VOID TOKEN_ID save_func_start TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL end_func TOKEN_SEMICOLON','funcs',12,'p_funcs','yacc.py',394),
  ('save_func_start -> empty','save_func_start',1,'p_save_func_start','yacc.py',401),
  ('end_func -> empty','end_func',1,'p_end_func','yacc.py',410),
  ('scopefun -> empty','scopefun',1,'p_scopefun','yacc.py',418),
  ('tipo -> def_tipo','tipo',1,'p_tipo','yacc.py',424),
  ('tipo -> empty','tipo',1,'p_tipo','yacc.py',425),
  ('def_tipo -> TOKEN_ID TOKEN_COLON type coma','def_tipo',4,'p_def_tipo','yacc.py',438),
  ('coma -> TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma','coma',5,'p_coma','yacc.py',445),
  ('coma -> empty','coma',1,'p_coma','yacc.py',446),
  ('var -> vars','var',1,'p_var','yacc.py',457),
  ('var -> empty','var',1,'p_var','yacc.py',458),
  ('f_call -> TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad TOKEN_SEMICOLON','f_call',7,'p_f_call','yacc.py',462),
  ('era_quad -> empty','era_quad',1,'p_era_quad','yacc.py',480),
  ('gosub_quad -> empty','gosub_quad',1,'p_gosub_quad','yacc.py',487),
  ('def_exp -> expresion param_quad coma2','def_exp',3,'p_def_exp','yacc.py',494),
  ('def_exp -> empty','def_exp',1,'p_def_exp','yacc.py',495),
  ('param_quad -> empty','param_quad',1,'p_param_quad','yacc.py',505),
  ('coma2 -> TOKEN_COMMA expresion param_quad_coma coma2','coma2',4,'p_coma2','yacc.py',514),
  ('coma2 -> empty','coma2',1,'p_coma2','yacc.py',515),
  ('param_quad_coma -> empty','param_quad_coma',1,'p_param_quad_coma','yacc.py',522),
  ('assign -> TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLON','assign',4,'p_assign','yacc.py',533),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',543),
]
