
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TOKEN_ASSIGN TOKEN_COLON TOKEN_COMMA TOKEN_CTE_FLOAT TOKEN_CTE_INT TOKEN_CTE_STRING TOKEN_DIV TOKEN_DO TOKEN_ELSE TOKEN_END TOKEN_FLOAT TOKEN_FOR TOKEN_GT TOKEN_ID TOKEN_IF TOKEN_INT TOKEN_LBRACE TOKEN_LCOL TOKEN_LPAREN TOKEN_LT TOKEN_MAIN TOKEN_MINUS TOKEN_MULT TOKEN_NE TOKEN_PLUS TOKEN_PRINT TOKEN_PROGRAM TOKEN_RBRACE TOKEN_RCOL TOKEN_RETURN TOKEN_RPAREN TOKEN_SEMICOLON TOKEN_VAR TOKEN_VOID TOKEN_WHILEprograma : TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON saveGo dec_var dec_funcs TOKEN_MAIN fillMain body TOKEN_ENDsaveGo : emptyfillMain : emptydec_var : vars\n    | emptydec_funcs : funcs dec_funcs\n    | emptyvars : TOKEN_VAR variable rep_varrep_var  : variable rep_var\n    |  emptyvariable : TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLONmas_ids : TOKEN_COMMA TOKEN_ID mas_ids\n    |  emptytype : TOKEN_INT\n    | TOKEN_FLOAT\n    | TOKEN_VOIDbody : TOKEN_LBRACE dec_statements TOKEN_RBRACEdec_statements : statement dec_statements\n    | emptystatement : assign\n        | condition\n        | cycle\n        | f_call\n        | print\n        | for_cycle\n        | return_stmtreturn_stmt : TOKEN_RETURN expresion TOKEN_SEMICOLONprint : TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLONexpresiones : TOKEN_CTE_STRING comas\n    | expresion comascomas : TOKEN_COMMA expresion comas\n    | TOKEN_COMMA TOKEN_CTE_STRING comas\n    | emptysaveQuad : emptyGotoF : emptycycle : TOKEN_WHILE TOKEN_LPAREN saveQuad expresion GotoF TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLONsaveQuadIF : emptyGotoFIF : emptycondition : TOKEN_IF TOKEN_LPAREN expresion saveQuadIF TOKEN_RPAREN body GotoFIF else TOKEN_SEMICOLONelse : TOKEN_ELSE body\n    | emptycte : TOKEN_CTE_INT\n    | TOKEN_CTE_FLOATexpresion : exp compararcomparar  : signo exp\n    | emptysigno : TOKEN_GT\n    | TOKEN_LT\n    | TOKEN_NEexp : termino suma_restaoperacion_sum_res : TOKEN_PLUS\n    | TOKEN_MINUSsuma_resta  : operacion_sum_res termino suma_resta\n                    | emptytermino : factor multi_divmulti_div : operacion_mul_div factor multi_div\n                    | emptyoperacion_mul_div : TOKEN_DIV\n    | TOKEN_MULTfactor : definicion\n    | operacionesdefinicion : TOKEN_LPAREN expresion TOKEN_RPARENoperaciones : opciones_mas_menos id_cteopciones_mas_menos : TOKEN_PLUS\n    | TOKEN_MINUS\n    | emptyid_cte : TOKEN_ID\n    | cte\n    | function_call_exprfunction_call_expr : TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad_exprfuncs : type TOKEN_ID save_func_start TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL end_func TOKEN_SEMICOLONsave_func_start : emptyend_func : emptytipo : def_tipo\n    | emptydef_tipo : TOKEN_ID TOKEN_COLON type comacoma : TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma\n    | emptyvar : vars \n    | emptyf_call : TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad TOKEN_SEMICOLONera_quad : emptygosub_quad : emptygosub_quad_expr : emptydef_exp : expresion param_quad coma2\n    | emptyparam_quad : emptycoma2 : TOKEN_COMMA expresion param_quad_coma coma2\n    | emptyparam_quad_coma : emptyassign : TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLONfor_cycle : TOKEN_FOR TOKEN_LPAREN for_init TOKEN_SEMICOLON saveQuadFor expresion GotoFFor TOKEN_SEMICOLON for_increment TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLONfor_init : assign_for\n                | emptyassign_for : TOKEN_ID TOKEN_ASSIGN expresionfor_increment : assign_for\n                     | emptysaveQuadFor : emptyGotoFFor : emptyempty :'
    
_lr_action_items = {'TOKEN_PROGRAM':([0,],[2,]),'$end':([1,41,],[0,-1,]),'TOKEN_ID':([2,10,14,15,16,17,18,23,27,37,38,43,45,46,47,48,49,50,51,57,62,65,68,69,70,71,78,79,80,81,82,86,88,89,97,99,101,102,103,105,107,108,110,112,113,123,126,132,135,136,143,154,157,158,162,168,178,195,201,203,210,],[3,19,22,-14,-15,-16,19,19,35,52,58,52,-20,-21,-22,-23,-24,-25,-26,-100,-11,-100,-100,-100,-100,96,-100,116,-64,-65,-66,-100,-100,-34,-27,-100,-47,-48,-49,-100,-51,-52,-100,-58,-59,-91,-66,-100,-100,-100,163,-28,-100,-98,-100,-100,-81,96,-39,-36,-92,]),'TOKEN_SEMICOLON':([3,15,16,17,39,63,71,72,73,74,75,76,77,85,93,94,95,98,100,104,106,109,111,115,116,117,118,119,120,130,137,138,139,140,148,159,160,161,165,166,170,174,177,180,181,183,184,185,187,188,191,193,194,196,197,202,209,],[4,-14,-15,-16,62,-17,-100,97,-100,-100,-100,-60,-61,123,135,-93,-94,-44,-46,-50,-54,-55,-57,-63,-67,-68,-69,-42,-43,154,-45,-100,-100,-62,-100,-95,-53,-56,178,-83,-100,-100,-100,-100,-38,195,-99,-100,199,-73,201,-41,203,-70,-84,-40,210,]),'TOKEN_VAR':([4,5,6,122,],[-100,10,-2,10,]),'TOKEN_INT':([4,5,6,7,8,9,12,18,23,24,25,33,34,62,83,176,199,],[-100,-100,-2,15,-4,-5,15,-100,-100,-8,-10,-9,15,-11,15,15,-71,]),'TOKEN_FLOAT':([4,5,6,7,8,9,12,18,23,24,25,33,34,62,83,176,199,],[-100,-100,-2,16,-4,-5,16,-100,-100,-8,-10,-9,16,-11,16,16,-71,]),'TOKEN_VOID':([4,5,6,7,8,9,12,18,23,24,25,33,34,62,83,176,199,],[-100,-100,-2,17,-4,-5,17,-100,-100,-8,-10,-9,17,-11,17,17,-71,]),'TOKEN_MAIN':([4,5,6,7,8,9,11,12,13,18,21,23,24,25,33,62,199,],[-100,-100,-2,-100,-4,-5,20,-100,-7,-100,-6,-100,-8,-10,-9,-11,-71,]),'TOKEN_COMMA':([15,16,17,19,35,73,74,75,76,77,91,92,98,100,104,106,109,111,115,116,117,118,119,120,121,125,137,138,139,140,149,150,155,156,160,161,179,185,186,189,190,196,197,],[-14,-15,-16,27,27,-100,-100,-100,-60,-61,132,132,-44,-46,-50,-54,-55,-57,-63,-67,-68,-69,-42,-43,143,-100,-45,-100,-100,-62,168,-87,132,132,-53,-56,-100,-100,143,168,-90,-70,-84,]),'TOKEN_RPAREN':([15,16,17,38,59,60,61,73,74,75,76,77,86,87,90,91,92,98,100,104,106,109,111,114,115,116,117,118,119,120,121,124,125,126,127,128,129,131,133,134,137,138,139,140,142,144,149,150,152,153,155,156,159,160,161,162,167,169,172,173,175,179,185,186,189,190,195,196,197,198,200,204,205,206,],[-14,-15,-16,-100,84,-74,-75,-100,-100,-100,-60,-61,-100,-100,130,-100,-100,-44,-46,-50,-54,-55,-57,140,-63,-67,-68,-69,-42,-43,-100,148,-100,-86,151,-37,-100,-29,-33,-30,-45,-100,-100,-62,-76,-78,-100,-87,171,-35,-100,-100,-95,-53,-56,-100,-85,-89,-31,-32,185,-100,-100,-100,-100,-90,-100,-70,-84,-77,-88,207,-96,-97,]),'TOKEN_LBRACE':([18,20,23,24,25,29,30,33,62,122,145,146,147,151,182,192,208,],[-100,-100,-100,-8,-10,37,-3,-9,-11,-100,37,-79,-80,37,37,37,37,]),'TOKEN_COLON':([19,26,28,35,40,58,163,],[-100,34,-13,-100,-12,83,176,]),'TOKEN_LPAREN':([22,31,32,52,53,54,55,56,57,65,66,67,68,69,70,78,86,88,89,99,101,102,103,105,107,108,110,112,113,116,132,135,136,141,157,158,162,168,],[-100,38,-72,-100,68,69,70,71,78,78,86,-82,78,-100,78,78,78,78,-34,78,-47,-48,-49,78,-51,-52,78,-58,-59,-100,78,-100,78,162,78,-98,78,78,]),'TOKEN_END':([36,63,],[41,-17,]),'TOKEN_RBRACE':([37,42,43,44,45,46,47,48,49,50,51,64,97,123,154,178,201,203,210,],[-100,63,-100,-19,-20,-21,-22,-23,-24,-25,-26,-18,-27,-91,-28,-81,-39,-36,-92,]),'TOKEN_IF':([37,43,45,46,47,48,49,50,51,97,123,154,178,201,203,210,],[53,53,-20,-21,-22,-23,-24,-25,-26,-27,-91,-28,-81,-39,-36,-92,]),'TOKEN_WHILE':([37,43,45,46,47,48,49,50,51,97,123,154,178,201,203,210,],[54,54,-20,-21,-22,-23,-24,-25,-26,-27,-91,-28,-81,-39,-36,-92,]),'TOKEN_PRINT':([37,43,45,46,47,48,49,50,51,97,123,154,178,201,203,210,],[55,55,-20,-21,-22,-23,-24,-25,-26,-27,-91,-28,-81,-39,-36,-92,]),'TOKEN_FOR':([37,43,45,46,47,48,49,50,51,97,123,154,178,201,203,210,],[56,56,-20,-21,-22,-23,-24,-25,-26,-27,-91,-28,-81,-39,-36,-92,]),'TOKEN_RETURN':([37,43,45,46,47,48,49,50,51,97,123,154,178,201,203,210,],[57,57,-20,-21,-22,-23,-24,-25,-26,-27,-91,-28,-81,-39,-36,-92,]),'TOKEN_ASSIGN':([52,96,],[65,136,]),'TOKEN_PLUS':([57,65,68,69,70,74,75,76,77,78,86,88,89,99,101,102,103,105,107,108,109,110,111,112,113,115,116,117,118,119,120,132,135,136,138,139,140,157,158,161,162,168,185,196,197,],[80,80,80,-100,80,107,-100,-60,-61,80,80,80,-34,80,-47,-48,-49,80,-51,-52,-55,80,-57,-58,-59,-63,-67,-68,-69,-42,-43,80,-100,80,107,-100,-62,80,-98,-56,80,80,-100,-70,-84,]),'TOKEN_MINUS':([57,65,68,69,70,74,75,76,77,78,86,88,89,99,101,102,103,105,107,108,109,110,111,112,113,115,116,117,118,119,120,132,135,136,138,139,140,157,158,161,162,168,185,196,197,],[81,81,81,-100,81,108,-100,-60,-61,81,81,81,-34,81,-47,-48,-49,81,-51,-52,-55,81,-57,-58,-59,-63,-67,-68,-69,-42,-43,81,-100,81,108,-100,-62,81,-98,-56,81,81,-100,-70,-84,]),'TOKEN_CTE_INT':([57,65,68,69,70,78,79,80,81,82,86,88,89,99,101,102,103,105,107,108,110,112,113,126,132,135,136,157,158,162,168,],[-100,-100,-100,-100,-100,-100,119,-64,-65,-66,-100,-100,-34,-100,-47,-48,-49,-100,-51,-52,-100,-58,-59,-66,-100,-100,-100,-100,-98,-100,-100,]),'TOKEN_CTE_FLOAT':([57,65,68,69,70,78,79,80,81,82,86,88,89,99,101,102,103,105,107,108,110,112,113,126,132,135,136,157,158,162,168,],[-100,-100,-100,-100,-100,-100,120,-64,-65,-66,-100,-100,-34,-100,-47,-48,-49,-100,-51,-52,-100,-58,-59,-66,-100,-100,-100,-100,-98,-100,-100,]),'TOKEN_RCOL':([63,164,],[-17,177,]),'TOKEN_ELSE':([63,170,180,181,],[-17,-100,192,-38,]),'TOKEN_CTE_STRING':([70,132,],[91,156,]),'TOKEN_GT':([73,74,75,76,77,104,106,109,111,115,116,117,118,119,120,138,139,140,160,161,185,196,197,],[101,-100,-100,-60,-61,-50,-54,-55,-57,-63,-67,-68,-69,-42,-43,-100,-100,-62,-53,-56,-100,-70,-84,]),'TOKEN_LT':([73,74,75,76,77,104,106,109,111,115,116,117,118,119,120,138,139,140,160,161,185,196,197,],[102,-100,-100,-60,-61,-50,-54,-55,-57,-63,-67,-68,-69,-42,-43,-100,-100,-62,-53,-56,-100,-70,-84,]),'TOKEN_NE':([73,74,75,76,77,104,106,109,111,115,116,117,118,119,120,138,139,140,160,161,185,196,197,],[103,-100,-100,-60,-61,-50,-54,-55,-57,-63,-67,-68,-69,-42,-43,-100,-100,-62,-53,-56,-100,-70,-84,]),'TOKEN_DIV':([75,76,77,115,116,117,118,119,120,139,140,185,196,197,],[112,-60,-61,-63,-67,-68,-69,-42,-43,112,-62,-100,-70,-84,]),'TOKEN_MULT':([75,76,77,115,116,117,118,119,120,139,140,185,196,197,],[113,-60,-61,-63,-67,-68,-69,-42,-43,113,-62,-100,-70,-84,]),'TOKEN_LCOL':([84,],[122,]),'TOKEN_DO':([171,207,],[182,208,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'saveGo':([4,],[5,]),'empty':([4,5,7,12,18,19,20,22,23,35,37,38,43,52,57,65,68,69,70,71,73,74,75,78,86,87,88,91,92,99,105,110,116,121,122,125,129,132,135,136,138,139,148,149,155,156,157,162,168,170,174,177,179,180,185,186,189,195,],[6,9,13,13,25,28,30,32,25,28,44,61,44,67,82,82,82,89,82,95,100,106,111,82,126,128,82,133,133,82,82,82,67,144,147,150,153,82,158,82,106,111,166,169,133,133,82,126,82,181,184,188,190,193,197,144,169,206,]),'dec_var':([5,],[7,]),'vars':([5,122,],[8,146,]),'dec_funcs':([7,12,],[11,21,]),'funcs':([7,12,],[12,12,]),'type':([7,12,34,83,176,],[14,14,39,121,186,]),'variable':([10,18,23,],[18,23,23,]),'rep_var':([18,23,],[24,33,]),'mas_ids':([19,35,],[26,40,]),'fillMain':([20,],[29,]),'save_func_start':([22,],[31,]),'body':([29,145,151,182,192,208,],[36,164,170,194,202,209,]),'dec_statements':([37,43,],[42,64,]),'statement':([37,43,],[43,43,]),'assign':([37,43,],[45,45,]),'condition':([37,43,],[46,46,]),'cycle':([37,43,],[47,47,]),'f_call':([37,43,],[48,48,]),'print':([37,43,],[49,49,]),'for_cycle':([37,43,],[50,50,]),'return_stmt':([37,43,],[51,51,]),'tipo':([38,],[59,]),'def_tipo':([38,],[60,]),'era_quad':([52,116,],[66,141,]),'expresion':([57,65,68,70,78,86,88,132,136,157,162,168,],[72,85,87,92,114,125,129,155,159,174,125,179,]),'exp':([57,65,68,70,78,86,88,99,132,136,157,162,168,],[73,73,73,73,73,73,73,137,73,73,73,73,73,]),'termino':([57,65,68,70,78,86,88,99,105,132,136,157,162,168,],[74,74,74,74,74,74,74,74,138,74,74,74,74,74,]),'factor':([57,65,68,70,78,86,88,99,105,110,132,136,157,162,168,],[75,75,75,75,75,75,75,75,75,139,75,75,75,75,75,]),'definicion':([57,65,68,70,78,86,88,99,105,110,132,136,157,162,168,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'operaciones':([57,65,68,70,78,86,88,99,105,110,132,136,157,162,168,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'opciones_mas_menos':([57,65,68,70,78,86,88,99,105,110,132,136,157,162,168,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'saveQuad':([69,],[88,]),'expresiones':([70,],[90,]),'for_init':([71,],[93,]),'assign_for':([71,195,],[94,205,]),'comparar':([73,],[98,]),'signo':([73,],[99,]),'suma_resta':([74,138,],[104,160,]),'operacion_sum_res':([74,138,],[105,105,]),'multi_div':([75,139,],[109,161,]),'operacion_mul_div':([75,139,],[110,110,]),'id_cte':([79,],[115,]),'cte':([79,],[117,]),'function_call_expr':([79,],[118,]),'def_exp':([86,162,],[124,175,]),'saveQuadIF':([87,],[127,]),'comas':([91,92,155,156,],[131,134,172,173,]),'coma':([121,186,],[142,198,]),'var':([122,],[145,]),'param_quad':([125,],[149,]),'GotoF':([129,],[152,]),'saveQuadFor':([135,],[157,]),'gosub_quad':([148,],[165,]),'coma2':([149,189,],[167,200,]),'GotoFIF':([170,],[180,]),'GotoFFor':([174,],[183,]),'end_func':([177,],[187,]),'param_quad_coma':([179,],[189,]),'else':([180,],[191,]),'gosub_quad_expr':([185,],[196,]),'for_increment':([195,],[204,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON saveGo dec_var dec_funcs TOKEN_MAIN fillMain body TOKEN_END','programa',10,'p_programa','yacc.py',39),
  ('saveGo -> empty','saveGo',1,'p_saveGo','yacc.py',47),
  ('fillMain -> empty','fillMain',1,'p_fillMain','yacc.py',53),
  ('dec_var -> vars','dec_var',1,'p_dec_var','yacc.py',65),
  ('dec_var -> empty','dec_var',1,'p_dec_var','yacc.py',66),
  ('dec_funcs -> funcs dec_funcs','dec_funcs',2,'p_dec_funcs','yacc.py',70),
  ('dec_funcs -> empty','dec_funcs',1,'p_dec_funcs','yacc.py',71),
  ('vars -> TOKEN_VAR variable rep_var','vars',3,'p_vars','yacc.py',81),
  ('rep_var -> variable rep_var','rep_var',2,'p_rep_var','yacc.py',89),
  ('rep_var -> empty','rep_var',1,'p_rep_var','yacc.py',90),
  ('variable -> TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLON','variable',5,'p_variable','yacc.py',100),
  ('mas_ids -> TOKEN_COMMA TOKEN_ID mas_ids','mas_ids',3,'p_mas_ids','yacc.py',110),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','yacc.py',111),
  ('type -> TOKEN_INT','type',1,'p_type','yacc.py',121),
  ('type -> TOKEN_FLOAT','type',1,'p_type','yacc.py',122),
  ('type -> TOKEN_VOID','type',1,'p_type','yacc.py',123),
  ('body -> TOKEN_LBRACE dec_statements TOKEN_RBRACE','body',3,'p_body','yacc.py',132),
  ('dec_statements -> statement dec_statements','dec_statements',2,'p_dec_statements','yacc.py',136),
  ('dec_statements -> empty','dec_statements',1,'p_dec_statements','yacc.py',137),
  ('statement -> assign','statement',1,'p_statement','yacc.py',147),
  ('statement -> condition','statement',1,'p_statement','yacc.py',148),
  ('statement -> cycle','statement',1,'p_statement','yacc.py',149),
  ('statement -> f_call','statement',1,'p_statement','yacc.py',150),
  ('statement -> print','statement',1,'p_statement','yacc.py',151),
  ('statement -> for_cycle','statement',1,'p_statement','yacc.py',152),
  ('statement -> return_stmt','statement',1,'p_statement','yacc.py',153),
  ('return_stmt -> TOKEN_RETURN expresion TOKEN_SEMICOLON','return_stmt',3,'p_return_stmt','yacc.py',157),
  ('print -> TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLON','print',5,'p_print','yacc.py',168),
  ('expresiones -> TOKEN_CTE_STRING comas','expresiones',2,'p_expresiones','yacc.py',179),
  ('expresiones -> expresion comas','expresiones',2,'p_expresiones','yacc.py',180),
  ('comas -> TOKEN_COMMA expresion comas','comas',3,'p_comas','yacc.py',187),
  ('comas -> TOKEN_COMMA TOKEN_CTE_STRING comas','comas',3,'p_comas','yacc.py',188),
  ('comas -> empty','comas',1,'p_comas','yacc.py',189),
  ('saveQuad -> empty','saveQuad',1,'p_saveQuad','yacc.py',199),
  ('GotoF -> empty','GotoF',1,'p_GotoF','yacc.py',203),
  ('cycle -> TOKEN_WHILE TOKEN_LPAREN saveQuad expresion GotoF TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLON','cycle',9,'p_cycle','yacc.py',209),
  ('saveQuadIF -> empty','saveQuadIF',1,'p_saveQuadIF','yacc.py',219),
  ('GotoFIF -> empty','GotoFIF',1,'p_GotoFIF','yacc.py',225),
  ('condition -> TOKEN_IF TOKEN_LPAREN expresion saveQuadIF TOKEN_RPAREN body GotoFIF else TOKEN_SEMICOLON','condition',9,'p_condition','yacc.py',232),
  ('else -> TOKEN_ELSE body','else',2,'p_else','yacc.py',242),
  ('else -> empty','else',1,'p_else','yacc.py',243),
  ('cte -> TOKEN_CTE_INT','cte',1,'p_cte','yacc.py',250),
  ('cte -> TOKEN_CTE_FLOAT','cte',1,'p_cte','yacc.py',251),
  ('expresion -> exp comparar','expresion',2,'p_expresion','yacc.py',258),
  ('comparar -> signo exp','comparar',2,'p_comparar','yacc.py',278),
  ('comparar -> empty','comparar',1,'p_comparar','yacc.py',279),
  ('signo -> TOKEN_GT','signo',1,'p_signo','yacc.py',286),
  ('signo -> TOKEN_LT','signo',1,'p_signo','yacc.py',287),
  ('signo -> TOKEN_NE','signo',1,'p_signo','yacc.py',288),
  ('exp -> termino suma_resta','exp',2,'p_exp','yacc.py',292),
  ('operacion_sum_res -> TOKEN_PLUS','operacion_sum_res',1,'p_operacion_sum_res','yacc.py',317),
  ('operacion_sum_res -> TOKEN_MINUS','operacion_sum_res',1,'p_operacion_sum_res','yacc.py',318),
  ('suma_resta -> operacion_sum_res termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',322),
  ('suma_resta -> empty','suma_resta',1,'p_suma_resta','yacc.py',323),
  ('termino -> factor multi_div','termino',2,'p_termino','yacc.py',333),
  ('multi_div -> operacion_mul_div factor multi_div','multi_div',3,'p_multi_div','yacc.py',357),
  ('multi_div -> empty','multi_div',1,'p_multi_div','yacc.py',358),
  ('operacion_mul_div -> TOKEN_DIV','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',368),
  ('operacion_mul_div -> TOKEN_MULT','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',369),
  ('factor -> definicion','factor',1,'p_factor','yacc.py',373),
  ('factor -> operaciones','factor',1,'p_factor','yacc.py',374),
  ('definicion -> TOKEN_LPAREN expresion TOKEN_RPAREN','definicion',3,'p_definicion','yacc.py',378),
  ('operaciones -> opciones_mas_menos id_cte','operaciones',2,'p_operaciones','yacc.py',384),
  ('opciones_mas_menos -> TOKEN_PLUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',401),
  ('opciones_mas_menos -> TOKEN_MINUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',402),
  ('opciones_mas_menos -> empty','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',403),
  ('id_cte -> TOKEN_ID','id_cte',1,'p_id_cte','yacc.py',407),
  ('id_cte -> cte','id_cte',1,'p_id_cte','yacc.py',408),
  ('id_cte -> function_call_expr','id_cte',1,'p_id_cte','yacc.py',409),
  ('function_call_expr -> TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad_expr','function_call_expr',6,'p_function_call_expr','yacc.py',424),
  ('funcs -> type TOKEN_ID save_func_start TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL end_func TOKEN_SEMICOLON','funcs',12,'p_funcs','yacc.py',444),
  ('save_func_start -> empty','save_func_start',1,'p_save_func_start','yacc.py',451),
  ('end_func -> empty','end_func',1,'p_end_func','yacc.py',468),
  ('tipo -> def_tipo','tipo',1,'p_tipo','yacc.py',474),
  ('tipo -> empty','tipo',1,'p_tipo','yacc.py',475),
  ('def_tipo -> TOKEN_ID TOKEN_COLON type coma','def_tipo',4,'p_def_tipo','yacc.py',488),
  ('coma -> TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma','coma',5,'p_coma','yacc.py',495),
  ('coma -> empty','coma',1,'p_coma','yacc.py',496),
  ('var -> vars','var',1,'p_var','yacc.py',507),
  ('var -> empty','var',1,'p_var','yacc.py',508),
  ('f_call -> TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad TOKEN_SEMICOLON','f_call',7,'p_f_call','yacc.py',512),
  ('era_quad -> empty','era_quad',1,'p_era_quad','yacc.py',529),
  ('gosub_quad -> empty','gosub_quad',1,'p_gosub_quad','yacc.py',536),
  ('gosub_quad_expr -> empty','gosub_quad_expr',1,'p_gosub_quad_expr','yacc.py',542),
  ('def_exp -> expresion param_quad coma2','def_exp',3,'p_def_exp','yacc.py',548),
  ('def_exp -> empty','def_exp',1,'p_def_exp','yacc.py',549),
  ('param_quad -> empty','param_quad',1,'p_param_quad','yacc.py',559),
  ('coma2 -> TOKEN_COMMA expresion param_quad_coma coma2','coma2',4,'p_coma2','yacc.py',568),
  ('coma2 -> empty','coma2',1,'p_coma2','yacc.py',569),
  ('param_quad_coma -> empty','param_quad_coma',1,'p_param_quad_coma','yacc.py',576),
  ('assign -> TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLON','assign',4,'p_assign','yacc.py',585),
  ('for_cycle -> TOKEN_FOR TOKEN_LPAREN for_init TOKEN_SEMICOLON saveQuadFor expresion GotoFFor TOKEN_SEMICOLON for_increment TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLON','for_cycle',13,'p_for_cycle','yacc.py',594),
  ('for_init -> assign_for','for_init',1,'p_for_init','yacc.py',625),
  ('for_init -> empty','for_init',1,'p_for_init','yacc.py',626),
  ('assign_for -> TOKEN_ID TOKEN_ASSIGN expresion','assign_for',3,'p_assign_for','yacc.py',630),
  ('for_increment -> assign_for','for_increment',1,'p_for_increment','yacc.py',639),
  ('for_increment -> empty','for_increment',1,'p_for_increment','yacc.py',640),
  ('saveQuadFor -> empty','saveQuadFor',1,'p_saveQuadFor','yacc.py',644),
  ('GotoFFor -> empty','GotoFFor',1,'p_GotoFFor','yacc.py',648),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',654),
]
