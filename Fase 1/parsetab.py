
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TOKEN_ASSIGN TOKEN_COLON TOKEN_COMMA TOKEN_CTE_FLOAT TOKEN_CTE_INT TOKEN_CTE_STRING TOKEN_DIV TOKEN_DO TOKEN_ELSE TOKEN_END TOKEN_FLOAT TOKEN_GT TOKEN_ID TOKEN_IF TOKEN_INT TOKEN_LBRACE TOKEN_LCOL TOKEN_LPAREN TOKEN_LT TOKEN_MAIN TOKEN_MINUS TOKEN_MULT TOKEN_NE TOKEN_PLUS TOKEN_PRINT TOKEN_PROGRAM TOKEN_RBRACE TOKEN_RCOL TOKEN_RPAREN TOKEN_SEMICOLON TOKEN_VAR TOKEN_VOID TOKEN_WHILEprograma : TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs TOKEN_MAIN body TOKEN_ENDdec_var : vars \n         | emptydec_funcs : funcs dec_funcs\n                | emptyvars : TOKEN_VAR variable rep_varrep_var : variable rep_var\n        | emptyvariable : TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLONmas_ids : TOKEN_COMMA TOKEN_ID mas_ids \n        | emptytype : TOKEN_INT \n        | TOKEN_FLOATbody : TOKEN_LBRACE dec_statements TOKEN_RBRACEdec_statements : statement dec_statements \n        | emptystatement : assign \n        | condition \n        | cycle \n        | f_call \n        | printprint : TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLONexpresiones : TOKEN_CTE_STRING comas \n        | expresion comascomas : TOKEN_COMMA expresion comas \n        | TOKEN_COMMA TOKEN_CTE_STRING comas \n        | emptycycle : TOKEN_WHILE TOKEN_LPAREN expresion TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLONcondition : TOKEN_IF TOKEN_LPAREN expresion TOKEN_RPAREN body else TOKEN_SEMICOLONelse : TOKEN_ELSE body \n        | emptycte : TOKEN_CTE_INT \n        | TOKEN_CTE_FLOATexpresion : exp compararcomparar : signo exp \n        | emptysigno : TOKEN_GT \n        | TOKEN_LT \n        | TOKEN_NEexp : termino suma_restasuma_resta : TOKEN_PLUS termino suma_resta\n        | TOKEN_MINUS termino suma_resta \n        | emptytermino : factor multi_divmulti_div : operacion_mul_div factor termino \n        | emptyoperacion_mul_div : TOKEN_DIV \n        | TOKEN_MULTfactor : definicion \n        | operacionesdefinicion : TOKEN_LPAREN expresion TOKEN_RPARENoperaciones : opciones_mas_menos id_cteopciones_mas_menos : TOKEN_PLUS\n        | TOKEN_MINUS \n        | emptyid_cte : TOKEN_ID\n              | ctefuncs : TOKEN_VOID TOKEN_ID TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL TOKEN_SEMICOLONtipo : def_tipo \n        | emptydef_tipo : TOKEN_ID TOKEN_COLON type comacoma : TOKEN_COMMA def_tipo coma \n        | emptyvar : vars  \n        | emptyf_call : TOKEN_ID TOKEN_LPAREN def_exp TOKEN_RPAREN TOKEN_SEMICOLONdef_exp : expresion coma2 \n        | emptycoma2 : TOKEN_COMMA expresion coma2 \n        | emptyassign : TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLONempty :'
    
_lr_action_items = {'TOKEN_PROGRAM':([0,],[2,]),'$end':([1,30,],[0,-1,]),'TOKEN_ID':([2,8,12,13,18,22,25,26,32,34,35,36,37,38,53,54,55,56,57,60,65,66,67,68,69,70,71,74,82,84,86,87,88,90,91,94,96,97,99,100,101,102,103,106,112,116,124,125,126,130,147,149,],[3,14,17,14,14,29,39,43,39,-17,-18,-19,-20,-21,-72,-72,-72,-72,-72,-9,-49,-50,-72,100,-53,-54,-55,-55,-71,-72,-37,-38,-39,-72,-72,-72,-47,-48,-52,-56,-57,-32,-33,-72,-72,43,-72,-51,-66,-22,-29,-28,]),'TOKEN_SEMICOLON':([3,47,48,49,51,61,62,63,64,65,66,83,85,89,92,93,95,99,100,101,102,103,104,110,121,122,123,125,128,135,136,137,139,141,142,146,148,],[4,60,-12,-13,-14,82,-72,-72,-72,-49,-50,-34,-36,-40,-43,-44,-46,-52,-56,-57,-32,-33,126,130,-35,-72,-72,-51,-72,-41,-42,-45,147,-31,149,150,-30,]),'TOKEN_VAR':([4,81,],[8,8,]),'TOKEN_VOID':([4,5,6,7,10,13,18,19,20,27,60,150,],[-72,12,-2,-3,12,-72,-72,-6,-8,-7,-9,-58,]),'TOKEN_MAIN':([4,5,6,7,9,10,11,13,16,18,19,20,27,60,150,],[-72,-72,-2,-3,15,-72,-5,-72,-4,-72,-6,-8,-7,-9,-58,]),'TOKEN_LBRACE':([13,15,18,19,20,27,60,81,108,118,119,120,129,140,],[-72,25,-72,-6,-8,-7,-9,-72,25,25,-64,-65,25,25,]),'TOKEN_COMMA':([14,29,48,49,62,63,64,65,66,73,78,79,80,83,85,89,92,93,95,99,100,101,102,103,115,117,121,122,123,125,127,131,132,133,135,136,137,145,],[22,22,-12,-13,-72,-72,-72,-49,-50,106,112,112,116,-34,-36,-40,-43,-44,-46,-52,-56,-57,-32,-33,-61,-63,-35,-72,-72,-51,106,112,112,116,-41,-42,-45,-62,]),'TOKEN_COLON':([14,21,23,29,43,50,],[-72,28,-11,-72,58,-10,]),'TOKEN_LPAREN':([17,39,40,41,42,53,54,55,56,57,65,66,67,84,86,87,88,90,91,94,96,97,99,100,101,102,103,106,112,124,125,],[26,54,55,56,57,67,67,67,67,67,-49,-50,67,67,-37,-38,-39,67,67,67,-47,-48,-52,-56,-57,-32,-33,67,67,67,-51,]),'TOKEN_END':([24,51,],[30,-14,]),'TOKEN_RBRACE':([25,31,32,33,34,35,36,37,38,52,82,126,130,147,149,],[-72,51,-72,-16,-17,-18,-19,-20,-21,-15,-71,-66,-22,-29,-28,]),'TOKEN_IF':([25,32,34,35,36,37,38,82,126,130,147,149,],[40,40,-17,-18,-19,-20,-21,-71,-66,-22,-29,-28,]),'TOKEN_WHILE':([25,32,34,35,36,37,38,82,126,130,147,149,],[41,41,-17,-18,-19,-20,-21,-71,-66,-22,-29,-28,]),'TOKEN_PRINT':([25,32,34,35,36,37,38,82,126,130,147,149,],[42,42,-17,-18,-19,-20,-21,-71,-66,-22,-29,-28,]),'TOKEN_RPAREN':([26,44,45,46,48,49,54,62,63,64,65,66,72,73,74,75,76,77,78,79,80,83,85,89,92,93,95,98,99,100,101,102,103,105,107,111,113,114,115,117,121,122,123,125,127,131,132,133,135,136,137,138,143,144,145,],[-72,59,-59,-60,-12,-13,-72,-72,-72,-72,-49,-50,104,-72,-68,108,109,110,-72,-72,-72,-34,-36,-40,-43,-44,-46,125,-52,-56,-57,-32,-33,-67,-70,-23,-27,-24,-61,-63,-35,-72,-72,-51,-72,-72,-72,-72,-41,-42,-45,-69,-25,-26,-62,]),'TOKEN_INT':([28,58,],[48,48,]),'TOKEN_FLOAT':([28,58,],[49,49,]),'TOKEN_ASSIGN':([39,],[53,]),'TOKEN_ELSE':([51,128,],[-14,140,]),'TOKEN_RCOL':([51,134,],[-14,146,]),'TOKEN_PLUS':([53,54,55,56,57,63,64,65,66,67,84,86,87,88,90,91,93,94,95,96,97,99,100,101,102,103,106,112,122,123,124,125,137,],[69,69,69,69,69,90,-72,-49,-50,69,69,-37,-38,-39,69,69,-44,69,-46,-47,-48,-52,-56,-57,-32,-33,69,69,90,90,69,-51,-45,]),'TOKEN_MINUS':([53,54,55,56,57,63,64,65,66,67,84,86,87,88,90,91,93,94,95,96,97,99,100,101,102,103,106,112,122,123,124,125,137,],[70,70,70,70,70,91,-72,-49,-50,70,70,-37,-38,-39,70,70,-44,70,-46,-47,-48,-52,-56,-57,-32,-33,70,70,91,91,70,-51,-45,]),'TOKEN_CTE_INT':([53,54,55,56,57,65,66,67,68,69,70,71,74,84,86,87,88,90,91,94,96,97,99,100,101,102,103,106,112,124,125,],[-72,-72,-72,-72,-72,-49,-50,-72,102,-53,-54,-55,-55,-72,-37,-38,-39,-72,-72,-72,-47,-48,-52,-56,-57,-32,-33,-72,-72,-72,-51,]),'TOKEN_CTE_FLOAT':([53,54,55,56,57,65,66,67,68,69,70,71,74,84,86,87,88,90,91,94,96,97,99,100,101,102,103,106,112,124,125,],[-72,-72,-72,-72,-72,-49,-50,-72,103,-53,-54,-55,-55,-72,-37,-38,-39,-72,-72,-72,-47,-48,-52,-56,-57,-32,-33,-72,-72,-72,-51,]),'TOKEN_CTE_STRING':([57,112,],[78,132,]),'TOKEN_LCOL':([59,],[81,]),'TOKEN_GT':([62,63,64,65,66,89,92,93,95,99,100,101,102,103,122,123,125,135,136,137,],[86,-72,-72,-49,-50,-40,-43,-44,-46,-52,-56,-57,-32,-33,-72,-72,-51,-41,-42,-45,]),'TOKEN_LT':([62,63,64,65,66,89,92,93,95,99,100,101,102,103,122,123,125,135,136,137,],[87,-72,-72,-49,-50,-40,-43,-44,-46,-52,-56,-57,-32,-33,-72,-72,-51,-41,-42,-45,]),'TOKEN_NE':([62,63,64,65,66,89,92,93,95,99,100,101,102,103,122,123,125,135,136,137,],[88,-72,-72,-49,-50,-40,-43,-44,-46,-52,-56,-57,-32,-33,-72,-72,-51,-41,-42,-45,]),'TOKEN_DIV':([64,65,66,99,100,101,102,103,125,],[96,-49,-50,-52,-56,-57,-32,-33,-51,]),'TOKEN_MULT':([64,65,66,99,100,101,102,103,125,],[97,-49,-50,-52,-56,-57,-32,-33,-51,]),'TOKEN_DO':([109,],[129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'dec_var':([4,],[5,]),'vars':([4,81,],[6,119,]),'empty':([4,5,10,13,14,18,25,26,29,32,53,54,55,56,57,62,63,64,67,73,78,79,80,81,84,90,91,94,106,112,122,123,124,127,128,131,132,133,],[7,11,11,20,23,20,33,46,23,33,71,74,71,71,71,85,92,95,71,107,113,113,117,120,71,71,71,71,71,71,92,92,71,107,141,113,113,117,]),'dec_funcs':([5,10,],[9,16,]),'funcs':([5,10,],[10,10,]),'variable':([8,13,18,],[13,18,18,]),'rep_var':([13,18,],[19,27,]),'mas_ids':([14,29,],[21,50,]),'body':([15,108,118,129,140,],[24,128,134,142,148,]),'dec_statements':([25,32,],[31,52,]),'statement':([25,32,],[32,32,]),'assign':([25,32,],[34,34,]),'condition':([25,32,],[35,35,]),'cycle':([25,32,],[36,36,]),'f_call':([25,32,],[37,37,]),'print':([25,32,],[38,38,]),'tipo':([26,],[44,]),'def_tipo':([26,116,],[45,133,]),'type':([28,58,],[47,80,]),'expresion':([53,54,55,56,57,67,106,112,],[61,73,75,76,79,98,127,131,]),'exp':([53,54,55,56,57,67,84,106,112,],[62,62,62,62,62,62,121,62,62,]),'termino':([53,54,55,56,57,67,84,90,91,106,112,124,],[63,63,63,63,63,63,63,122,123,63,63,137,]),'factor':([53,54,55,56,57,67,84,90,91,94,106,112,124,],[64,64,64,64,64,64,64,64,64,124,64,64,64,]),'definicion':([53,54,55,56,57,67,84,90,91,94,106,112,124,],[65,65,65,65,65,65,65,65,65,65,65,65,65,]),'operaciones':([53,54,55,56,57,67,84,90,91,94,106,112,124,],[66,66,66,66,66,66,66,66,66,66,66,66,66,]),'opciones_mas_menos':([53,54,55,56,57,67,84,90,91,94,106,112,124,],[68,68,68,68,68,68,68,68,68,68,68,68,68,]),'def_exp':([54,],[72,]),'expresiones':([57,],[77,]),'comparar':([62,],[83,]),'signo':([62,],[84,]),'suma_resta':([63,122,123,],[89,135,136,]),'multi_div':([64,],[93,]),'operacion_mul_div':([64,],[94,]),'id_cte':([68,],[99,]),'cte':([68,],[101,]),'coma2':([73,127,],[105,138,]),'comas':([78,79,131,132,],[111,114,143,144,]),'coma':([80,133,],[115,145,]),'var':([81,],[118,]),'else':([128,],[139,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs TOKEN_MAIN body TOKEN_END','programa',8,'p_programa','yacc.py',11),
  ('dec_var -> vars','dec_var',1,'p_dec_var','yacc.py',22),
  ('dec_var -> empty','dec_var',1,'p_dec_var','yacc.py',23),
  ('dec_funcs -> funcs dec_funcs','dec_funcs',2,'p_dec_funcs','yacc.py',27),
  ('dec_funcs -> empty','dec_funcs',1,'p_dec_funcs','yacc.py',28),
  ('vars -> TOKEN_VAR variable rep_var','vars',3,'p_vars','yacc.py',38),
  ('rep_var -> variable rep_var','rep_var',2,'p_rep_var','yacc.py',47),
  ('rep_var -> empty','rep_var',1,'p_rep_var','yacc.py',48),
  ('variable -> TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLON','variable',5,'p_variable','yacc.py',58),
  ('mas_ids -> TOKEN_COMMA TOKEN_ID mas_ids','mas_ids',3,'p_mas_ids','yacc.py',74),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','yacc.py',75),
  ('type -> TOKEN_INT','type',1,'p_type','yacc.py',84),
  ('type -> TOKEN_FLOAT','type',1,'p_type','yacc.py',85),
  ('body -> TOKEN_LBRACE dec_statements TOKEN_RBRACE','body',3,'p_body','yacc.py',90),
  ('dec_statements -> statement dec_statements','dec_statements',2,'p_dec_statements','yacc.py',95),
  ('dec_statements -> empty','dec_statements',1,'p_dec_statements','yacc.py',96),
  ('statement -> assign','statement',1,'p_statement','yacc.py',106),
  ('statement -> condition','statement',1,'p_statement','yacc.py',107),
  ('statement -> cycle','statement',1,'p_statement','yacc.py',108),
  ('statement -> f_call','statement',1,'p_statement','yacc.py',109),
  ('statement -> print','statement',1,'p_statement','yacc.py',110),
  ('print -> TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLON','print',5,'p_print','yacc.py',114),
  ('expresiones -> TOKEN_CTE_STRING comas','expresiones',2,'p_expresiones','yacc.py',119),
  ('expresiones -> expresion comas','expresiones',2,'p_expresiones','yacc.py',120),
  ('comas -> TOKEN_COMMA expresion comas','comas',3,'p_comas','yacc.py',129),
  ('comas -> TOKEN_COMMA TOKEN_CTE_STRING comas','comas',3,'p_comas','yacc.py',130),
  ('comas -> empty','comas',1,'p_comas','yacc.py',131),
  ('cycle -> TOKEN_WHILE TOKEN_LPAREN expresion TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLON','cycle',7,'p_cycle','yacc.py',142),
  ('condition -> TOKEN_IF TOKEN_LPAREN expresion TOKEN_RPAREN body else TOKEN_SEMICOLON','condition',7,'p_condition','yacc.py',149),
  ('else -> TOKEN_ELSE body','else',2,'p_else','yacc.py',156),
  ('else -> empty','else',1,'p_else','yacc.py',157),
  ('cte -> TOKEN_CTE_INT','cte',1,'p_cte','yacc.py',164),
  ('cte -> TOKEN_CTE_FLOAT','cte',1,'p_cte','yacc.py',165),
  ('expresion -> exp comparar','expresion',2,'p_expresion','yacc.py',170),
  ('comparar -> signo exp','comparar',2,'p_comparar','yacc.py',185),
  ('comparar -> empty','comparar',1,'p_comparar','yacc.py',186),
  ('signo -> TOKEN_GT','signo',1,'p_signo','yacc.py',194),
  ('signo -> TOKEN_LT','signo',1,'p_signo','yacc.py',195),
  ('signo -> TOKEN_NE','signo',1,'p_signo','yacc.py',196),
  ('exp -> termino suma_resta','exp',2,'p_exp','yacc.py',201),
  ('suma_resta -> TOKEN_PLUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',216),
  ('suma_resta -> TOKEN_MINUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',217),
  ('suma_resta -> empty','suma_resta',1,'p_suma_resta','yacc.py',218),
  ('termino -> factor multi_div','termino',2,'p_termino','yacc.py',230),
  ('multi_div -> operacion_mul_div factor termino','multi_div',3,'p_multi_div','yacc.py',245),
  ('multi_div -> empty','multi_div',1,'p_multi_div','yacc.py',246),
  ('operacion_mul_div -> TOKEN_DIV','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',257),
  ('operacion_mul_div -> TOKEN_MULT','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',258),
  ('factor -> definicion','factor',1,'p_factor','yacc.py',263),
  ('factor -> operaciones','factor',1,'p_factor','yacc.py',264),
  ('definicion -> TOKEN_LPAREN expresion TOKEN_RPAREN','definicion',3,'p_definicion','yacc.py',268),
  ('operaciones -> opciones_mas_menos id_cte','operaciones',2,'p_operaciones','yacc.py',273),
  ('opciones_mas_menos -> TOKEN_PLUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',287),
  ('opciones_mas_menos -> TOKEN_MINUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',288),
  ('opciones_mas_menos -> empty','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',289),
  ('id_cte -> TOKEN_ID','id_cte',1,'p_id_cte','yacc.py',294),
  ('id_cte -> cte','id_cte',1,'p_id_cte','yacc.py',295),
  ('funcs -> TOKEN_VOID TOKEN_ID TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL TOKEN_SEMICOLON','funcs',10,'p_funcs','yacc.py',313),
  ('tipo -> def_tipo','tipo',1,'p_tipo','yacc.py',329),
  ('tipo -> empty','tipo',1,'p_tipo','yacc.py',330),
  ('def_tipo -> TOKEN_ID TOKEN_COLON type coma','def_tipo',4,'p_def_tipo','yacc.py',334),
  ('coma -> TOKEN_COMMA def_tipo coma','coma',3,'p_coma','yacc.py',342),
  ('coma -> empty','coma',1,'p_coma','yacc.py',343),
  ('var -> vars','var',1,'p_var','yacc.py',355),
  ('var -> empty','var',1,'p_var','yacc.py',356),
  ('f_call -> TOKEN_ID TOKEN_LPAREN def_exp TOKEN_RPAREN TOKEN_SEMICOLON','f_call',5,'p_f_call','yacc.py',360),
  ('def_exp -> expresion coma2','def_exp',2,'p_def_exp','yacc.py',374),
  ('def_exp -> empty','def_exp',1,'p_def_exp','yacc.py',375),
  ('coma2 -> TOKEN_COMMA expresion coma2','coma2',3,'p_coma2','yacc.py',383),
  ('coma2 -> empty','coma2',1,'p_coma2','yacc.py',384),
  ('assign -> TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLON','assign',4,'p_assign','yacc.py',392),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',401),
]
