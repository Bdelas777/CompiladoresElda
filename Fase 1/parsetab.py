
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TOKEN_ASSIGN TOKEN_COLON TOKEN_COMMA TOKEN_CTE_FLOAT TOKEN_CTE_INT TOKEN_CTE_STRING TOKEN_DIV TOKEN_DO TOKEN_ELSE TOKEN_END TOKEN_FLOAT TOKEN_GT TOKEN_ID TOKEN_IF TOKEN_INT TOKEN_LBRACE TOKEN_LPAREN TOKEN_LT TOKEN_MAIN TOKEN_MINUS TOKEN_MULT TOKEN_NE TOKEN_PLUS TOKEN_PRINT TOKEN_PROGRAM TOKEN_RBRACE TOKEN_RPAREN TOKEN_SEMICOLON TOKEN_VAR TOKEN_VOID TOKEN_WHILEprograma : TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funs TOKEN_MAIN body TOKEN_ENDdec_var : vars\n               | emptydec_funs : funs dec_funs\n                | emptyvars : TOKEN_VAR variable rep_varrep_var : variable rep_var\n               | emptyvariable : TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLONmas_ids : TOKEN_COMMA TOKEN_ID mas_ids\n               | emptytype : TOKEN_INT \n            | TOKEN_FLOATbody : TOKEN_LBRACE dec_statements TOKEN_RBRACEdec_statements : statement dec_statements\n                      | emptystatement : assign\n                 | condition\n                 | cycle\n                 | f_call\n                 | printprint : TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLONexpresiones : TOKEN_CTE_STRING comas\n                   | expresion comascomas : TOKEN_COMMA expresion comas\n             | TOKEN_COMMA TOKEN_CTE_STRING comas\n             | emptycycle : TOKEN_WHILE TOKEN_LPAREN expresion TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLONcondition : TOKEN_IF TOKEN_LPAREN expresion TOKEN_RPAREN body else TOKEN_SEMICOLONelse : TOKEN_ELSE body\n            | emptycte : TOKEN_CTE_INT\n           | TOKEN_CTE_FLOATexpresion : exp compararcomparar : signo exp\n                | emptysigno : TOKEN_GT\n             | TOKEN_LT\n             | TOKEN_NEexp : termino suma_restasuma_resta : opcion_mas_menos exp\n                  | emptyopcion_mas_menos : TOKEN_PLUS\n                        | TOKEN_MINUStermino : factor multi_divmulti_div : operacion_mul_div termino\n                 | emptyoperacion_mul_div : TOKEN_DIV\n                         | TOKEN_MULTfactor : definicion\n              | operacionesdefinicion : TOKEN_LPAREN expresion TOKEN_RPARENoperaciones : opciones_mas_menos id_cteopciones_mas_menos : TOKEN_PLUS\n                          | TOKEN_MINUS\n                          | emptyid_cte : TOKEN_ID\n              | ctefuns : TOKEN_VOID TOKEN_ID TOKEN_LPAREN tipo TOKEN_RPAREN var body TOKEN_SEMICOLONtipo : def_tipo\n            | emptydef_tipo : TOKEN_ID TOKEN_COLON type comacoma : TOKEN_COMMA def_tipo coma\n            | emptyvar : vars\n           | emptyf_call : TOKEN_ID TOKEN_LPAREN def_exp TOKEN_RPAREN TOKEN_SEMICOLONdef_exp : expresion coma2\n               | emptycoma2 : TOKEN_COMMA expresion coma2\n             | emptyassign : TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLONempty :'
    
_lr_action_items = {'TOKEN_PROGRAM':([0,],[2,]),'$end':([1,30,],[0,-1,]),'TOKEN_ID':([2,8,12,13,18,22,25,26,32,34,35,36,37,38,53,54,55,56,57,60,67,68,69,70,71,74,84,86,88,89,90,92,94,95,97,99,100,109,115,119,126,130,143,145,],[3,14,17,14,14,29,39,43,39,-17,-18,-19,-20,-21,-73,-73,-73,-73,-73,-9,-73,103,-54,-55,-56,-56,-72,-73,-37,-38,-39,-73,-43,-44,-73,-48,-49,-73,-73,43,-67,-22,-29,-28,]),'TOKEN_SEMICOLON':([3,47,48,49,51,61,62,63,64,65,66,85,87,91,93,96,98,102,103,104,105,106,107,113,121,122,123,124,125,128,136,138,139,144,],[4,60,-12,-13,-14,84,-73,-73,-73,-50,-51,-34,-36,-40,-42,-45,-47,-53,-57,-58,-32,-33,126,130,134,-35,-41,-46,-52,-73,143,-31,145,-30,]),'TOKEN_VAR':([4,59,],[8,8,]),'TOKEN_VOID':([4,5,6,7,10,13,18,19,20,27,60,134,],[-73,12,-2,-3,12,-73,-73,-6,-8,-7,-9,-59,]),'TOKEN_MAIN':([4,5,6,7,9,10,11,13,16,18,19,20,27,60,134,],[-73,-73,-2,-3,15,-73,-5,-73,-4,-73,-6,-8,-7,-9,-59,]),'TOKEN_LBRACE':([13,15,18,19,20,27,59,60,81,82,83,111,129,137,],[-73,25,-73,-6,-8,-7,-73,-9,25,-65,-66,25,25,25,]),'TOKEN_COMMA':([14,29,48,49,62,63,64,65,66,73,78,79,80,85,87,91,93,96,98,102,103,104,105,106,118,120,122,123,124,125,127,131,132,133,142,],[22,22,-12,-13,-73,-73,-73,-50,-51,109,115,115,119,-34,-36,-40,-42,-45,-47,-53,-57,-58,-32,-33,-62,-64,-35,-41,-46,-52,109,115,115,119,-63,]),'TOKEN_COLON':([14,21,23,29,43,50,],[-73,28,-11,-73,58,-10,]),'TOKEN_LPAREN':([17,39,40,41,42,53,54,55,56,57,67,86,88,89,90,92,94,95,97,99,100,109,115,],[26,54,55,56,57,67,67,67,67,67,67,67,-37,-38,-39,67,-43,-44,67,-48,-49,67,67,]),'TOKEN_END':([24,51,],[30,-14,]),'TOKEN_RBRACE':([25,31,32,33,34,35,36,37,38,52,84,126,130,143,145,],[-73,51,-73,-16,-17,-18,-19,-20,-21,-15,-72,-67,-22,-29,-28,]),'TOKEN_IF':([25,32,34,35,36,37,38,84,126,130,143,145,],[40,40,-17,-18,-19,-20,-21,-72,-67,-22,-29,-28,]),'TOKEN_WHILE':([25,32,34,35,36,37,38,84,126,130,143,145,],[41,41,-17,-18,-19,-20,-21,-72,-67,-22,-29,-28,]),'TOKEN_PRINT':([25,32,34,35,36,37,38,84,126,130,143,145,],[42,42,-17,-18,-19,-20,-21,-72,-67,-22,-29,-28,]),'TOKEN_RPAREN':([26,44,45,46,48,49,54,62,63,64,65,66,72,73,74,75,76,77,78,79,80,85,87,91,93,96,98,101,102,103,104,105,106,108,110,114,116,117,118,120,122,123,124,125,127,131,132,133,135,140,141,142,],[-73,59,-60,-61,-12,-13,-73,-73,-73,-73,-50,-51,107,-73,-69,111,112,113,-73,-73,-73,-34,-36,-40,-42,-45,-47,125,-53,-57,-58,-32,-33,-68,-71,-23,-27,-24,-62,-64,-35,-41,-46,-52,-73,-73,-73,-73,-70,-25,-26,-63,]),'TOKEN_INT':([28,58,],[48,48,]),'TOKEN_FLOAT':([28,58,],[49,49,]),'TOKEN_ASSIGN':([39,],[53,]),'TOKEN_ELSE':([51,128,],[-14,137,]),'TOKEN_PLUS':([53,54,55,56,57,63,64,65,66,67,86,88,89,90,92,94,95,96,97,98,99,100,102,103,104,105,106,109,115,124,125,],[69,69,69,69,69,94,-73,-50,-51,69,69,-37,-38,-39,69,-43,-44,-45,69,-47,-48,-49,-53,-57,-58,-32,-33,69,69,-46,-52,]),'TOKEN_MINUS':([53,54,55,56,57,63,64,65,66,67,86,88,89,90,92,94,95,96,97,98,99,100,102,103,104,105,106,109,115,124,125,],[70,70,70,70,70,95,-73,-50,-51,70,70,-37,-38,-39,70,-43,-44,-45,70,-47,-48,-49,-53,-57,-58,-32,-33,70,70,-46,-52,]),'TOKEN_CTE_INT':([53,54,55,56,57,67,68,69,70,71,74,86,88,89,90,92,94,95,97,99,100,109,115,],[-73,-73,-73,-73,-73,-73,105,-54,-55,-56,-56,-73,-37,-38,-39,-73,-43,-44,-73,-48,-49,-73,-73,]),'TOKEN_CTE_FLOAT':([53,54,55,56,57,67,68,69,70,71,74,86,88,89,90,92,94,95,97,99,100,109,115,],[-73,-73,-73,-73,-73,-73,106,-54,-55,-56,-56,-73,-37,-38,-39,-73,-43,-44,-73,-48,-49,-73,-73,]),'TOKEN_CTE_STRING':([57,115,],[78,132,]),'TOKEN_GT':([62,63,64,65,66,91,93,96,98,102,103,104,105,106,123,124,125,],[88,-73,-73,-50,-51,-40,-42,-45,-47,-53,-57,-58,-32,-33,-41,-46,-52,]),'TOKEN_LT':([62,63,64,65,66,91,93,96,98,102,103,104,105,106,123,124,125,],[89,-73,-73,-50,-51,-40,-42,-45,-47,-53,-57,-58,-32,-33,-41,-46,-52,]),'TOKEN_NE':([62,63,64,65,66,91,93,96,98,102,103,104,105,106,123,124,125,],[90,-73,-73,-50,-51,-40,-42,-45,-47,-53,-57,-58,-32,-33,-41,-46,-52,]),'TOKEN_DIV':([64,65,66,102,103,104,105,106,125,],[99,-50,-51,-53,-57,-58,-32,-33,-52,]),'TOKEN_MULT':([64,65,66,102,103,104,105,106,125,],[100,-50,-51,-53,-57,-58,-32,-33,-52,]),'TOKEN_DO':([112,],[129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'dec_var':([4,],[5,]),'vars':([4,59,],[6,82,]),'empty':([4,5,10,13,14,18,25,26,29,32,53,54,55,56,57,59,62,63,64,67,73,78,79,80,86,92,97,109,115,127,128,131,132,133,],[7,11,11,20,23,20,33,46,23,33,71,74,71,71,71,83,87,93,98,71,110,116,116,120,71,71,71,71,71,110,138,116,116,120,]),'dec_funs':([5,10,],[9,16,]),'funs':([5,10,],[10,10,]),'variable':([8,13,18,],[13,18,18,]),'rep_var':([13,18,],[19,27,]),'mas_ids':([14,29,],[21,50,]),'body':([15,81,111,129,137,],[24,121,128,139,144,]),'dec_statements':([25,32,],[31,52,]),'statement':([25,32,],[32,32,]),'assign':([25,32,],[34,34,]),'condition':([25,32,],[35,35,]),'cycle':([25,32,],[36,36,]),'f_call':([25,32,],[37,37,]),'print':([25,32,],[38,38,]),'tipo':([26,],[44,]),'def_tipo':([26,119,],[45,133,]),'type':([28,58,],[47,80,]),'expresion':([53,54,55,56,57,67,109,115,],[61,73,75,76,79,101,127,131,]),'exp':([53,54,55,56,57,67,86,92,109,115,],[62,62,62,62,62,62,122,123,62,62,]),'termino':([53,54,55,56,57,67,86,92,97,109,115,],[63,63,63,63,63,63,63,63,124,63,63,]),'factor':([53,54,55,56,57,67,86,92,97,109,115,],[64,64,64,64,64,64,64,64,64,64,64,]),'definicion':([53,54,55,56,57,67,86,92,97,109,115,],[65,65,65,65,65,65,65,65,65,65,65,]),'operaciones':([53,54,55,56,57,67,86,92,97,109,115,],[66,66,66,66,66,66,66,66,66,66,66,]),'opciones_mas_menos':([53,54,55,56,57,67,86,92,97,109,115,],[68,68,68,68,68,68,68,68,68,68,68,]),'def_exp':([54,],[72,]),'expresiones':([57,],[77,]),'var':([59,],[81,]),'comparar':([62,],[85,]),'signo':([62,],[86,]),'suma_resta':([63,],[91,]),'opcion_mas_menos':([63,],[92,]),'multi_div':([64,],[96,]),'operacion_mul_div':([64,],[97,]),'id_cte':([68,],[102,]),'cte':([68,],[104,]),'coma2':([73,127,],[108,135,]),'comas':([78,79,131,132,],[114,117,140,141,]),'coma':([80,133,],[118,142,]),'else':([128,],[136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funs TOKEN_MAIN body TOKEN_END','programa',8,'p_programa','yacc.py',7),
  ('dec_var -> vars','dec_var',1,'p_dec_var','yacc.py',13),
  ('dec_var -> empty','dec_var',1,'p_dec_var','yacc.py',14),
  ('dec_funs -> funs dec_funs','dec_funs',2,'p_dec_funs','yacc.py',20),
  ('dec_funs -> empty','dec_funs',1,'p_dec_funs','yacc.py',21),
  ('vars -> TOKEN_VAR variable rep_var','vars',3,'p_vars','yacc.py',31),
  ('rep_var -> variable rep_var','rep_var',2,'p_rep_var','yacc.py',40),
  ('rep_var -> empty','rep_var',1,'p_rep_var','yacc.py',41),
  ('variable -> TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLON','variable',5,'p_variable','yacc.py',54),
  ('mas_ids -> TOKEN_COMMA TOKEN_ID mas_ids','mas_ids',3,'p_mas_ids','yacc.py',60),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','yacc.py',61),
  ('type -> TOKEN_INT','type',1,'p_type','yacc.py',71),
  ('type -> TOKEN_FLOAT','type',1,'p_type','yacc.py',72),
  ('body -> TOKEN_LBRACE dec_statements TOKEN_RBRACE','body',3,'p_body','yacc.py',78),
  ('dec_statements -> statement dec_statements','dec_statements',2,'p_dec_statements','yacc.py',84),
  ('dec_statements -> empty','dec_statements',1,'p_dec_statements','yacc.py',85),
  ('statement -> assign','statement',1,'p_statement','yacc.py',99),
  ('statement -> condition','statement',1,'p_statement','yacc.py',100),
  ('statement -> cycle','statement',1,'p_statement','yacc.py',101),
  ('statement -> f_call','statement',1,'p_statement','yacc.py',102),
  ('statement -> print','statement',1,'p_statement','yacc.py',103),
  ('print -> TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLON','print',5,'p_print','yacc.py',110),
  ('expresiones -> TOKEN_CTE_STRING comas','expresiones',2,'p_expresiones','yacc.py',115),
  ('expresiones -> expresion comas','expresiones',2,'p_expresiones','yacc.py',116),
  ('comas -> TOKEN_COMMA expresion comas','comas',3,'p_comas','yacc.py',126),
  ('comas -> TOKEN_COMMA TOKEN_CTE_STRING comas','comas',3,'p_comas','yacc.py',127),
  ('comas -> empty','comas',1,'p_comas','yacc.py',128),
  ('cycle -> TOKEN_WHILE TOKEN_LPAREN expresion TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLON','cycle',7,'p_cycle','yacc.py',142),
  ('condition -> TOKEN_IF TOKEN_LPAREN expresion TOKEN_RPAREN body else TOKEN_SEMICOLON','condition',7,'p_condition','yacc.py',149),
  ('else -> TOKEN_ELSE body','else',2,'p_else','yacc.py',156),
  ('else -> empty','else',1,'p_else','yacc.py',157),
  ('cte -> TOKEN_CTE_INT','cte',1,'p_cte','yacc.py',167),
  ('cte -> TOKEN_CTE_FLOAT','cte',1,'p_cte','yacc.py',168),
  ('expresion -> exp comparar','expresion',2,'p_expresion','yacc.py',174),
  ('comparar -> signo exp','comparar',2,'p_comparar','yacc.py',184),
  ('comparar -> empty','comparar',1,'p_comparar','yacc.py',185),
  ('signo -> TOKEN_GT','signo',1,'p_signo','yacc.py',195),
  ('signo -> TOKEN_LT','signo',1,'p_signo','yacc.py',196),
  ('signo -> TOKEN_NE','signo',1,'p_signo','yacc.py',197),
  ('exp -> termino suma_resta','exp',2,'p_exp','yacc.py',203),
  ('suma_resta -> opcion_mas_menos exp','suma_resta',2,'p_suma_resta','yacc.py',213),
  ('suma_resta -> empty','suma_resta',1,'p_suma_resta','yacc.py',214),
  ('opcion_mas_menos -> TOKEN_PLUS','opcion_mas_menos',1,'p_opcion_mas_menos','yacc.py',224),
  ('opcion_mas_menos -> TOKEN_MINUS','opcion_mas_menos',1,'p_opcion_mas_menos','yacc.py',225),
  ('termino -> factor multi_div','termino',2,'p_termino','yacc.py',231),
  ('multi_div -> operacion_mul_div termino','multi_div',2,'p_multi_div','yacc.py',241),
  ('multi_div -> empty','multi_div',1,'p_multi_div','yacc.py',242),
  ('operacion_mul_div -> TOKEN_DIV','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',252),
  ('operacion_mul_div -> TOKEN_MULT','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',253),
  ('factor -> definicion','factor',1,'p_factor','yacc.py',259),
  ('factor -> operaciones','factor',1,'p_factor','yacc.py',260),
  ('definicion -> TOKEN_LPAREN expresion TOKEN_RPAREN','definicion',3,'p_definicion','yacc.py',265),
  ('operaciones -> opciones_mas_menos id_cte','operaciones',2,'p_operaciones','yacc.py',271),
  ('opciones_mas_menos -> TOKEN_PLUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',281),
  ('opciones_mas_menos -> TOKEN_MINUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',282),
  ('opciones_mas_menos -> empty','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',283),
  ('id_cte -> TOKEN_ID','id_cte',1,'p_id_cte','yacc.py',291),
  ('id_cte -> cte','id_cte',1,'p_id_cte','yacc.py',292),
  ('funs -> TOKEN_VOID TOKEN_ID TOKEN_LPAREN tipo TOKEN_RPAREN var body TOKEN_SEMICOLON','funs',8,'p_funs','yacc.py',302),
  ('tipo -> def_tipo','tipo',1,'p_tipo','yacc.py',308),
  ('tipo -> empty','tipo',1,'p_tipo','yacc.py',309),
  ('def_tipo -> TOKEN_ID TOKEN_COLON type coma','def_tipo',4,'p_def_tipo','yacc.py',319),
  ('coma -> TOKEN_COMMA def_tipo coma','coma',3,'p_coma','yacc.py',328),
  ('coma -> empty','coma',1,'p_coma','yacc.py',329),
  ('var -> vars','var',1,'p_var','yacc.py',342),
  ('var -> empty','var',1,'p_var','yacc.py',343),
  ('f_call -> TOKEN_ID TOKEN_LPAREN def_exp TOKEN_RPAREN TOKEN_SEMICOLON','f_call',5,'p_f_call','yacc.py',353),
  ('def_exp -> expresion coma2','def_exp',2,'p_def_exp','yacc.py',359),
  ('def_exp -> empty','def_exp',1,'p_def_exp','yacc.py',360),
  ('coma2 -> TOKEN_COMMA expresion coma2','coma2',3,'p_coma2','yacc.py',370),
  ('coma2 -> empty','coma2',1,'p_coma2','yacc.py',371),
  ('assign -> TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLON','assign',4,'p_assign','yacc.py',382),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',389),
]
