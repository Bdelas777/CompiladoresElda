
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TOKEN_ASSIGN TOKEN_COLON TOKEN_COMMA TOKEN_CTE_FLOAT TOKEN_CTE_INT TOKEN_CTE_STRING TOKEN_DIV TOKEN_DO TOKEN_ELSE TOKEN_END TOKEN_FLOAT TOKEN_GT TOKEN_ID TOKEN_IF TOKEN_INT TOKEN_LBRACE TOKEN_LCOL TOKEN_LPAREN TOKEN_LT TOKEN_MAIN TOKEN_MINUS TOKEN_MULT TOKEN_NE TOKEN_PLUS TOKEN_PRINT TOKEN_PROGRAM TOKEN_RBRACE TOKEN_RCOL TOKEN_RPAREN TOKEN_SEMICOLON TOKEN_VAR TOKEN_VOID TOKEN_WHILEprograma : TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs TOKEN_MAIN body TOKEN_ENDprograma : TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs TOKEN_ENDdec_var : vars\n    | emptydec_funcs : funcs dec_funcs\n    | emptyvars : TOKEN_VAR variable rep_varrep_var  : variable rep_var\n    |  emptyvariable : TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLONmas_ids : TOKEN_COMMA TOKEN_ID mas_ids\n    |  emptytype : TOKEN_INT\n    | TOKEN_FLOATbody : TOKEN_LBRACE dec_statements TOKEN_RBRACEdec_statements : statement dec_statements\n    | emptystatement : assign\n        | condition\n        | cycle\n        | f_call\n        | printprint : TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLONexpresiones : TOKEN_CTE_STRING comas\n    | expresion comascomas : TOKEN_COMMA expresion comas\n    | TOKEN_COMMA TOKEN_CTE_STRING comas\n    | emptycycle : TOKEN_WHILE TOKEN_LPAREN expresion TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLONcondition : TOKEN_IF TOKEN_LPAREN expresion TOKEN_RPAREN body else TOKEN_SEMICOLONelse : TOKEN_ELSE body\n    | emptycte : TOKEN_CTE_INT\n    | TOKEN_CTE_FLOATexpresion : exp compararcomparar  : signo exp\n    | emptysigno : TOKEN_GT\n    | TOKEN_LT\n    | TOKEN_NEexp  : termino suma_restasuma_resta : TOKEN_PLUS termino suma_resta\n    | TOKEN_MINUS termino suma_resta\n    | emptytermino : factor multi_divmulti_div  : operacion_mul_div factor multi_div  \n    | emptyoperacion_mul_div : TOKEN_DIV\n    | TOKEN_MULTfactor : definicion\n    | operacionesdefinicion : TOKEN_LPAREN expresion TOKEN_RPARENoperaciones : opciones_mas_menos id_cteopciones_mas_menos : TOKEN_PLUS\n    | TOKEN_MINUS\n    | emptyid_cte : TOKEN_ID\n    | ctefuncs :  TOKEN_VOID TOKEN_ID scopefun TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL TOKEN_SEMICOLONscopefun : emptytipo : def_tipo\n    | emptydef_tipo : TOKEN_ID TOKEN_COLON type comacoma : TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma\n    | emptyvar : vars \n    | emptyf_call : TOKEN_ID TOKEN_LPAREN def_exp TOKEN_RPAREN TOKEN_SEMICOLONdef_exp : expresion coma2\n    | emptycoma2 : TOKEN_COMMA expresion coma2\n    | emptyassign : TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLONempty :'
    
_lr_action_items = {'TOKEN_PROGRAM':([0,],[2,]),'$end':([1,16,32,],[0,-2,-1,]),'TOKEN_ID':([2,8,12,13,19,23,26,34,36,37,38,39,40,45,52,53,54,55,56,61,68,69,70,71,72,75,83,85,87,88,89,91,92,95,97,98,107,113,123,127,131,148,150,],[3,14,18,14,14,31,41,41,-18,-19,-20,-21,-22,57,-74,-74,-74,-74,-74,-10,-74,101,-54,-55,-56,-56,-73,-74,-38,-39,-40,-74,-74,-74,-48,-49,-74,-74,-68,-23,146,-30,-29,]),'TOKEN_SEMICOLON':([3,46,47,48,50,62,63,64,65,66,67,84,86,90,93,94,96,100,101,102,103,104,105,111,118,119,120,121,122,125,136,137,138,140,142,143,149,152,],[4,61,-13,-14,-15,83,-74,-74,-74,-50,-51,-35,-37,-41,-44,-45,-47,-53,-57,-58,-33,-34,123,127,-36,-74,-74,-74,-52,-74,-42,-43,-46,148,-32,150,-31,154,]),'TOKEN_VAR':([4,117,],[8,8,]),'TOKEN_VOID':([4,5,6,7,10,13,19,20,21,29,61,154,],[-74,12,-3,-4,12,-74,-74,-7,-9,-8,-10,-59,]),'TOKEN_MAIN':([4,5,6,7,9,10,11,13,17,19,20,21,29,61,154,],[-74,-74,-3,-4,15,-74,-6,-74,-5,-74,-7,-9,-8,-10,-59,]),'TOKEN_END':([4,5,6,7,9,10,11,13,17,19,20,21,25,29,50,61,154,],[-74,-74,-3,-4,16,-74,-6,-74,-5,-74,-7,-9,32,-8,-15,-10,-59,]),'TOKEN_LBRACE':([13,15,19,20,21,29,61,109,117,126,133,134,135,141,],[-74,26,-74,-7,-9,-8,-10,26,-74,26,26,-66,-67,26,]),'TOKEN_COMMA':([14,31,47,48,63,64,65,66,67,74,79,80,84,86,90,93,94,96,100,101,102,103,104,116,118,119,120,121,122,124,128,129,136,137,138,153,],[23,23,-13,-14,-74,-74,-74,-50,-51,107,113,113,-35,-37,-41,-44,-45,-47,-53,-57,-58,-33,-34,131,-36,-74,-74,-74,-52,107,113,113,-42,-43,-46,131,]),'TOKEN_COLON':([14,22,24,31,49,57,146,],[-74,30,-12,-74,-11,81,151,]),'TOKEN_LPAREN':([18,27,28,41,42,43,44,52,53,54,55,56,68,85,87,88,89,91,92,95,97,98,107,113,],[-74,45,-60,53,54,55,56,68,68,68,68,68,68,68,-38,-39,-40,68,68,68,-48,-49,68,68,]),'TOKEN_RBRACE':([26,33,34,35,36,37,38,39,40,51,83,123,127,148,150,],[-74,50,-74,-17,-18,-19,-20,-21,-22,-16,-73,-68,-23,-30,-29,]),'TOKEN_IF':([26,34,36,37,38,39,40,83,123,127,148,150,],[42,42,-18,-19,-20,-21,-22,-73,-68,-23,-30,-29,]),'TOKEN_WHILE':([26,34,36,37,38,39,40,83,123,127,148,150,],[43,43,-18,-19,-20,-21,-22,-73,-68,-23,-30,-29,]),'TOKEN_PRINT':([26,34,36,37,38,39,40,83,123,127,148,150,],[44,44,-18,-19,-20,-21,-22,-73,-68,-23,-30,-29,]),'TOKEN_INT':([30,81,151,],[47,47,47,]),'TOKEN_FLOAT':([30,81,151,],[48,48,48,]),'TOKEN_ASSIGN':([41,],[52,]),'TOKEN_RPAREN':([45,47,48,53,58,59,60,63,64,65,66,67,73,74,75,76,77,78,79,80,84,86,90,93,94,96,99,100,101,102,103,104,106,108,112,114,115,116,118,119,120,121,122,124,128,129,130,132,136,137,138,139,144,145,153,155,],[-74,-13,-14,-74,82,-61,-62,-74,-74,-74,-50,-51,105,-74,-70,109,110,111,-74,-74,-35,-37,-41,-44,-45,-47,122,-53,-57,-58,-33,-34,-69,-72,-24,-28,-25,-74,-36,-74,-74,-74,-52,-74,-74,-74,-63,-65,-42,-43,-46,-71,-26,-27,-74,-64,]),'TOKEN_ELSE':([50,125,],[-15,141,]),'TOKEN_RCOL':([50,147,],[-15,152,]),'TOKEN_PLUS':([52,53,54,55,56,64,65,66,67,68,85,87,88,89,91,92,94,95,96,97,98,100,101,102,103,104,107,113,119,120,121,122,138,],[70,70,70,70,70,91,-74,-50,-51,70,70,-38,-39,-40,70,70,-45,70,-47,-48,-49,-53,-57,-58,-33,-34,70,70,91,91,-74,-52,-46,]),'TOKEN_MINUS':([52,53,54,55,56,64,65,66,67,68,85,87,88,89,91,92,94,95,96,97,98,100,101,102,103,104,107,113,119,120,121,122,138,],[71,71,71,71,71,92,-74,-50,-51,71,71,-38,-39,-40,71,71,-45,71,-47,-48,-49,-53,-57,-58,-33,-34,71,71,92,92,-74,-52,-46,]),'TOKEN_CTE_INT':([52,53,54,55,56,68,69,70,71,72,75,85,87,88,89,91,92,95,97,98,107,113,],[-74,-74,-74,-74,-74,-74,103,-54,-55,-56,-56,-74,-38,-39,-40,-74,-74,-74,-48,-49,-74,-74,]),'TOKEN_CTE_FLOAT':([52,53,54,55,56,68,69,70,71,72,75,85,87,88,89,91,92,95,97,98,107,113,],[-74,-74,-74,-74,-74,-74,104,-54,-55,-56,-56,-74,-38,-39,-40,-74,-74,-74,-48,-49,-74,-74,]),'TOKEN_CTE_STRING':([56,113,],[79,129,]),'TOKEN_GT':([63,64,65,66,67,90,93,94,96,100,101,102,103,104,119,120,121,122,136,137,138,],[87,-74,-74,-50,-51,-41,-44,-45,-47,-53,-57,-58,-33,-34,-74,-74,-74,-52,-42,-43,-46,]),'TOKEN_LT':([63,64,65,66,67,90,93,94,96,100,101,102,103,104,119,120,121,122,136,137,138,],[88,-74,-74,-50,-51,-41,-44,-45,-47,-53,-57,-58,-33,-34,-74,-74,-74,-52,-42,-43,-46,]),'TOKEN_NE':([63,64,65,66,67,90,93,94,96,100,101,102,103,104,119,120,121,122,136,137,138,],[89,-74,-74,-50,-51,-41,-44,-45,-47,-53,-57,-58,-33,-34,-74,-74,-74,-52,-42,-43,-46,]),'TOKEN_DIV':([65,66,67,100,101,102,103,104,121,122,],[97,-50,-51,-53,-57,-58,-33,-34,97,-52,]),'TOKEN_MULT':([65,66,67,100,101,102,103,104,121,122,],[98,-50,-51,-53,-57,-58,-33,-34,98,-52,]),'TOKEN_LCOL':([82,],[117,]),'TOKEN_DO':([110,],[126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'dec_var':([4,],[5,]),'vars':([4,117,],[6,134,]),'empty':([4,5,10,13,14,18,19,26,31,34,45,52,53,54,55,56,63,64,65,68,74,79,80,85,91,92,95,107,113,116,117,119,120,121,124,125,128,129,153,],[7,11,11,21,24,28,21,35,24,35,60,72,75,72,72,72,86,93,96,72,108,114,114,72,72,72,72,72,72,132,135,93,93,96,108,142,114,114,132,]),'dec_funcs':([5,10,],[9,17,]),'funcs':([5,10,],[10,10,]),'variable':([8,13,19,],[13,19,19,]),'rep_var':([13,19,],[20,29,]),'mas_ids':([14,31,],[22,49,]),'body':([15,109,126,133,141,],[25,125,143,147,149,]),'scopefun':([18,],[27,]),'dec_statements':([26,34,],[33,51,]),'statement':([26,34,],[34,34,]),'assign':([26,34,],[36,36,]),'condition':([26,34,],[37,37,]),'cycle':([26,34,],[38,38,]),'f_call':([26,34,],[39,39,]),'print':([26,34,],[40,40,]),'type':([30,81,151,],[46,116,153,]),'tipo':([45,],[58,]),'def_tipo':([45,],[59,]),'expresion':([52,53,54,55,56,68,107,113,],[62,74,76,77,80,99,124,128,]),'exp':([52,53,54,55,56,68,85,107,113,],[63,63,63,63,63,63,118,63,63,]),'termino':([52,53,54,55,56,68,85,91,92,107,113,],[64,64,64,64,64,64,64,119,120,64,64,]),'factor':([52,53,54,55,56,68,85,91,92,95,107,113,],[65,65,65,65,65,65,65,65,65,121,65,65,]),'definicion':([52,53,54,55,56,68,85,91,92,95,107,113,],[66,66,66,66,66,66,66,66,66,66,66,66,]),'operaciones':([52,53,54,55,56,68,85,91,92,95,107,113,],[67,67,67,67,67,67,67,67,67,67,67,67,]),'opciones_mas_menos':([52,53,54,55,56,68,85,91,92,95,107,113,],[69,69,69,69,69,69,69,69,69,69,69,69,]),'def_exp':([53,],[73,]),'expresiones':([56,],[78,]),'comparar':([63,],[84,]),'signo':([63,],[85,]),'suma_resta':([64,119,120,],[90,136,137,]),'multi_div':([65,121,],[94,138,]),'operacion_mul_div':([65,121,],[95,95,]),'id_cte':([69,],[100,]),'cte':([69,],[102,]),'coma2':([74,124,],[106,139,]),'comas':([79,80,128,129,],[112,115,144,145,]),'coma':([116,153,],[130,155,]),'var':([117,],[133,]),'else':([125,],[140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs TOKEN_MAIN body TOKEN_END','programa',8,'p_programa','yacc.py',12),
  ('programa -> TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs TOKEN_END','programa',6,'p_programa_error_no_main','yacc.py',21),
  ('dec_var -> vars','dec_var',1,'p_dec_var','yacc.py',28),
  ('dec_var -> empty','dec_var',1,'p_dec_var','yacc.py',29),
  ('dec_funcs -> funcs dec_funcs','dec_funcs',2,'p_dec_funcs','yacc.py',33),
  ('dec_funcs -> empty','dec_funcs',1,'p_dec_funcs','yacc.py',34),
  ('vars -> TOKEN_VAR variable rep_var','vars',3,'p_vars','yacc.py',44),
  ('rep_var -> variable rep_var','rep_var',2,'p_rep_var','yacc.py',52),
  ('rep_var -> empty','rep_var',1,'p_rep_var','yacc.py',53),
  ('variable -> TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLON','variable',5,'p_variable','yacc.py',63),
  ('mas_ids -> TOKEN_COMMA TOKEN_ID mas_ids','mas_ids',3,'p_mas_ids','yacc.py',73),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','yacc.py',74),
  ('type -> TOKEN_INT','type',1,'p_type','yacc.py',84),
  ('type -> TOKEN_FLOAT','type',1,'p_type','yacc.py',85),
  ('body -> TOKEN_LBRACE dec_statements TOKEN_RBRACE','body',3,'p_body','yacc.py',95),
  ('dec_statements -> statement dec_statements','dec_statements',2,'p_dec_statements','yacc.py',99),
  ('dec_statements -> empty','dec_statements',1,'p_dec_statements','yacc.py',100),
  ('statement -> assign','statement',1,'p_statement','yacc.py',110),
  ('statement -> condition','statement',1,'p_statement','yacc.py',111),
  ('statement -> cycle','statement',1,'p_statement','yacc.py',112),
  ('statement -> f_call','statement',1,'p_statement','yacc.py',113),
  ('statement -> print','statement',1,'p_statement','yacc.py',114),
  ('print -> TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLON','print',5,'p_print','yacc.py',118),
  ('expresiones -> TOKEN_CTE_STRING comas','expresiones',2,'p_expresiones','yacc.py',122),
  ('expresiones -> expresion comas','expresiones',2,'p_expresiones','yacc.py',123),
  ('comas -> TOKEN_COMMA expresion comas','comas',3,'p_comas','yacc.py',130),
  ('comas -> TOKEN_COMMA TOKEN_CTE_STRING comas','comas',3,'p_comas','yacc.py',131),
  ('comas -> empty','comas',1,'p_comas','yacc.py',132),
  ('cycle -> TOKEN_WHILE TOKEN_LPAREN expresion TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLON','cycle',7,'p_cycle','yacc.py',142),
  ('condition -> TOKEN_IF TOKEN_LPAREN expresion TOKEN_RPAREN body else TOKEN_SEMICOLON','condition',7,'p_condition','yacc.py',148),
  ('else -> TOKEN_ELSE body','else',2,'p_else','yacc.py',154),
  ('else -> empty','else',1,'p_else','yacc.py',155),
  ('cte -> TOKEN_CTE_INT','cte',1,'p_cte','yacc.py',162),
  ('cte -> TOKEN_CTE_FLOAT','cte',1,'p_cte','yacc.py',163),
  ('expresion -> exp comparar','expresion',2,'p_expresion','yacc.py',167),
  ('comparar -> signo exp','comparar',2,'p_comparar','yacc.py',179),
  ('comparar -> empty','comparar',1,'p_comparar','yacc.py',180),
  ('signo -> TOKEN_GT','signo',1,'p_signo','yacc.py',187),
  ('signo -> TOKEN_LT','signo',1,'p_signo','yacc.py',188),
  ('signo -> TOKEN_NE','signo',1,'p_signo','yacc.py',189),
  ('exp -> termino suma_resta','exp',2,'p_exp','yacc.py',193),
  ('suma_resta -> TOKEN_PLUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',205),
  ('suma_resta -> TOKEN_MINUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',206),
  ('suma_resta -> empty','suma_resta',1,'p_suma_resta','yacc.py',207),
  ('termino -> factor multi_div','termino',2,'p_termino','yacc.py',217),
  ('multi_div -> operacion_mul_div factor multi_div','multi_div',3,'p_multi_div','yacc.py',229),
  ('multi_div -> empty','multi_div',1,'p_multi_div','yacc.py',230),
  ('operacion_mul_div -> TOKEN_DIV','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',240),
  ('operacion_mul_div -> TOKEN_MULT','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',241),
  ('factor -> definicion','factor',1,'p_factor','yacc.py',245),
  ('factor -> operaciones','factor',1,'p_factor','yacc.py',246),
  ('definicion -> TOKEN_LPAREN expresion TOKEN_RPAREN','definicion',3,'p_definicion','yacc.py',250),
  ('operaciones -> opciones_mas_menos id_cte','operaciones',2,'p_operaciones','yacc.py',254),
  ('opciones_mas_menos -> TOKEN_PLUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',265),
  ('opciones_mas_menos -> TOKEN_MINUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',266),
  ('opciones_mas_menos -> empty','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',267),
  ('id_cte -> TOKEN_ID','id_cte',1,'p_id_cte','yacc.py',271),
  ('id_cte -> cte','id_cte',1,'p_id_cte','yacc.py',272),
  ('funcs -> TOKEN_VOID TOKEN_ID scopefun TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL TOKEN_SEMICOLON','funcs',11,'p_funcs','yacc.py',287),
  ('scopefun -> empty','scopefun',1,'p_scopefun','yacc.py',315),
  ('tipo -> def_tipo','tipo',1,'p_tipo','yacc.py',326),
  ('tipo -> empty','tipo',1,'p_tipo','yacc.py',327),
  ('def_tipo -> TOKEN_ID TOKEN_COLON type coma','def_tipo',4,'p_def_tipo','yacc.py',331),
  ('coma -> TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma','coma',5,'p_coma','yacc.py',338),
  ('coma -> empty','coma',1,'p_coma','yacc.py',339),
  ('var -> vars','var',1,'p_var','yacc.py',350),
  ('var -> empty','var',1,'p_var','yacc.py',351),
  ('f_call -> TOKEN_ID TOKEN_LPAREN def_exp TOKEN_RPAREN TOKEN_SEMICOLON','f_call',5,'p_f_call','yacc.py',355),
  ('def_exp -> expresion coma2','def_exp',2,'p_def_exp','yacc.py',371),
  ('def_exp -> empty','def_exp',1,'p_def_exp','yacc.py',372),
  ('coma2 -> TOKEN_COMMA expresion coma2','coma2',3,'p_coma2','yacc.py',379),
  ('coma2 -> empty','coma2',1,'p_coma2','yacc.py',380),
  ('assign -> TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLON','assign',4,'p_assign','yacc.py',387),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',394),
]
