
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TOKEN_ASSIGN TOKEN_COLON TOKEN_COMMA TOKEN_CTE_FLOAT TOKEN_CTE_INT TOKEN_CTE_STRING TOKEN_DIV TOKEN_DO TOKEN_ELSE TOKEN_END TOKEN_FLOAT TOKEN_GT TOKEN_ID TOKEN_IF TOKEN_INT TOKEN_LBRACE TOKEN_LCOL TOKEN_LPAREN TOKEN_LT TOKEN_MAIN TOKEN_MINUS TOKEN_MULT TOKEN_NE TOKEN_PLUS TOKEN_PRINT TOKEN_PROGRAM TOKEN_RBRACE TOKEN_RCOL TOKEN_RPAREN TOKEN_SEMICOLON TOKEN_VAR TOKEN_VOID TOKEN_WHILEprograma : TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs TOKEN_MAIN body TOKEN_ENDdec_var : vars\n    | emptydec_funcs : funcs dec_funcs\n    | emptyvars : TOKEN_VAR variable rep_varrep_var  : variable rep_var\n    |  emptyvariable : TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLONmas_ids : TOKEN_COMMA TOKEN_ID mas_ids\n    |  emptytype : TOKEN_INT\n    | TOKEN_FLOATbody : TOKEN_LBRACE dec_statements TOKEN_RBRACEdec_statements : statement dec_statements\n    | emptystatement : assign\n        | condition\n        | cycle\n        | f_call\n        | printprint : TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLONexpresiones : TOKEN_CTE_STRING comas\n    | expresion comascomas : TOKEN_COMMA expresion comas\n    | TOKEN_COMMA TOKEN_CTE_STRING comas\n    | emptycycle : TOKEN_WHILE TOKEN_LPAREN expresion TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLONcondition : TOKEN_IF TOKEN_LPAREN expresion TOKEN_RPAREN body else TOKEN_SEMICOLONelse : TOKEN_ELSE body\n    | emptycte : TOKEN_CTE_INT\n    | TOKEN_CTE_FLOATexpresion : exp compararcomparar  : signo exp\n    | emptysigno : TOKEN_GT\n    | TOKEN_LT\n    | TOKEN_NEexp  : termino suma_restasuma_resta : TOKEN_PLUS termino suma_resta\n    | TOKEN_MINUS termino suma_resta\n    | emptytermino : factor multi_divmulti_div  : operacion_mul_div factor multi_div  \n    | emptyoperacion_mul_div : TOKEN_DIV\n    | TOKEN_MULTfactor : definicion\n    | operacionesdefinicion : TOKEN_LPAREN expresion TOKEN_RPARENoperaciones : opciones_mas_menos id_cteopciones_mas_menos : TOKEN_PLUS\n    | TOKEN_MINUS\n    | emptyid_cte : TOKEN_ID\n    | ctefuncs :  TOKEN_VOID TOKEN_ID scopefun TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL TOKEN_SEMICOLONscopefun : emptytipo : def_tipo\n    | emptydef_tipo : TOKEN_ID TOKEN_COLON type comacoma : TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma\n    | emptyvar : vars \n    | emptyf_call : TOKEN_ID TOKEN_LPAREN def_exp TOKEN_RPAREN TOKEN_SEMICOLONdef_exp : expresion coma2\n    | emptycoma2 : TOKEN_COMMA expresion coma2\n    | emptyassign : TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLONempty :'
    
_lr_action_items = {'TOKEN_PROGRAM':([0,],[2,]),'$end':([1,31,],[0,-1,]),'TOKEN_ID':([2,8,12,13,18,22,25,33,35,36,37,38,39,44,51,52,53,54,55,60,67,68,69,70,71,74,82,84,86,87,88,90,91,94,96,97,106,112,122,126,130,147,149,],[3,14,17,14,14,30,40,40,-17,-18,-19,-20,-21,56,-73,-73,-73,-73,-73,-9,-73,100,-53,-54,-55,-55,-72,-73,-37,-38,-39,-73,-73,-73,-47,-48,-73,-73,-67,-22,145,-29,-28,]),'TOKEN_SEMICOLON':([3,45,46,47,49,61,62,63,64,65,66,83,85,89,92,93,95,99,100,101,102,103,104,110,117,118,119,120,121,124,135,136,137,139,141,142,148,151,],[4,60,-12,-13,-14,82,-73,-73,-73,-49,-50,-34,-36,-40,-43,-44,-46,-52,-56,-57,-32,-33,122,126,-35,-73,-73,-73,-51,-73,-41,-42,-45,147,-31,149,-30,153,]),'TOKEN_VAR':([4,116,],[8,8,]),'TOKEN_VOID':([4,5,6,7,10,13,18,19,20,28,60,153,],[-73,12,-2,-3,12,-73,-73,-6,-8,-7,-9,-58,]),'TOKEN_MAIN':([4,5,6,7,9,10,11,13,16,18,19,20,28,60,153,],[-73,-73,-2,-3,15,-73,-5,-73,-4,-73,-6,-8,-7,-9,-58,]),'TOKEN_LBRACE':([13,15,18,19,20,28,60,108,116,125,132,133,134,140,],[-73,25,-73,-6,-8,-7,-9,25,-73,25,25,-65,-66,25,]),'TOKEN_COMMA':([14,30,46,47,62,63,64,65,66,73,78,79,83,85,89,92,93,95,99,100,101,102,103,115,117,118,119,120,121,123,127,128,135,136,137,152,],[22,22,-12,-13,-73,-73,-73,-49,-50,106,112,112,-34,-36,-40,-43,-44,-46,-52,-56,-57,-32,-33,130,-35,-73,-73,-73,-51,106,112,112,-41,-42,-45,130,]),'TOKEN_COLON':([14,21,23,30,48,56,145,],[-73,29,-11,-73,-10,80,150,]),'TOKEN_LPAREN':([17,26,27,40,41,42,43,51,52,53,54,55,67,84,86,87,88,90,91,94,96,97,106,112,],[-73,44,-59,52,53,54,55,67,67,67,67,67,67,67,-37,-38,-39,67,67,67,-47,-48,67,67,]),'TOKEN_END':([24,49,],[31,-14,]),'TOKEN_RBRACE':([25,32,33,34,35,36,37,38,39,50,82,122,126,147,149,],[-73,49,-73,-16,-17,-18,-19,-20,-21,-15,-72,-67,-22,-29,-28,]),'TOKEN_IF':([25,33,35,36,37,38,39,82,122,126,147,149,],[41,41,-17,-18,-19,-20,-21,-72,-67,-22,-29,-28,]),'TOKEN_WHILE':([25,33,35,36,37,38,39,82,122,126,147,149,],[42,42,-17,-18,-19,-20,-21,-72,-67,-22,-29,-28,]),'TOKEN_PRINT':([25,33,35,36,37,38,39,82,122,126,147,149,],[43,43,-17,-18,-19,-20,-21,-72,-67,-22,-29,-28,]),'TOKEN_INT':([29,80,150,],[46,46,46,]),'TOKEN_FLOAT':([29,80,150,],[47,47,47,]),'TOKEN_ASSIGN':([40,],[51,]),'TOKEN_RPAREN':([44,46,47,52,57,58,59,62,63,64,65,66,72,73,74,75,76,77,78,79,83,85,89,92,93,95,98,99,100,101,102,103,105,107,111,113,114,115,117,118,119,120,121,123,127,128,129,131,135,136,137,138,143,144,152,154,],[-73,-12,-13,-73,81,-60,-61,-73,-73,-73,-49,-50,104,-73,-69,108,109,110,-73,-73,-34,-36,-40,-43,-44,-46,121,-52,-56,-57,-32,-33,-68,-71,-23,-27,-24,-73,-35,-73,-73,-73,-51,-73,-73,-73,-62,-64,-41,-42,-45,-70,-25,-26,-73,-63,]),'TOKEN_ELSE':([49,124,],[-14,140,]),'TOKEN_RCOL':([49,146,],[-14,151,]),'TOKEN_PLUS':([51,52,53,54,55,63,64,65,66,67,84,86,87,88,90,91,93,94,95,96,97,99,100,101,102,103,106,112,118,119,120,121,137,],[69,69,69,69,69,90,-73,-49,-50,69,69,-37,-38,-39,69,69,-44,69,-46,-47,-48,-52,-56,-57,-32,-33,69,69,90,90,-73,-51,-45,]),'TOKEN_MINUS':([51,52,53,54,55,63,64,65,66,67,84,86,87,88,90,91,93,94,95,96,97,99,100,101,102,103,106,112,118,119,120,121,137,],[70,70,70,70,70,91,-73,-49,-50,70,70,-37,-38,-39,70,70,-44,70,-46,-47,-48,-52,-56,-57,-32,-33,70,70,91,91,-73,-51,-45,]),'TOKEN_CTE_INT':([51,52,53,54,55,67,68,69,70,71,74,84,86,87,88,90,91,94,96,97,106,112,],[-73,-73,-73,-73,-73,-73,102,-53,-54,-55,-55,-73,-37,-38,-39,-73,-73,-73,-47,-48,-73,-73,]),'TOKEN_CTE_FLOAT':([51,52,53,54,55,67,68,69,70,71,74,84,86,87,88,90,91,94,96,97,106,112,],[-73,-73,-73,-73,-73,-73,103,-53,-54,-55,-55,-73,-37,-38,-39,-73,-73,-73,-47,-48,-73,-73,]),'TOKEN_CTE_STRING':([55,112,],[78,128,]),'TOKEN_GT':([62,63,64,65,66,89,92,93,95,99,100,101,102,103,118,119,120,121,135,136,137,],[86,-73,-73,-49,-50,-40,-43,-44,-46,-52,-56,-57,-32,-33,-73,-73,-73,-51,-41,-42,-45,]),'TOKEN_LT':([62,63,64,65,66,89,92,93,95,99,100,101,102,103,118,119,120,121,135,136,137,],[87,-73,-73,-49,-50,-40,-43,-44,-46,-52,-56,-57,-32,-33,-73,-73,-73,-51,-41,-42,-45,]),'TOKEN_NE':([62,63,64,65,66,89,92,93,95,99,100,101,102,103,118,119,120,121,135,136,137,],[88,-73,-73,-49,-50,-40,-43,-44,-46,-52,-56,-57,-32,-33,-73,-73,-73,-51,-41,-42,-45,]),'TOKEN_DIV':([64,65,66,99,100,101,102,103,120,121,],[96,-49,-50,-52,-56,-57,-32,-33,96,-51,]),'TOKEN_MULT':([64,65,66,99,100,101,102,103,120,121,],[97,-49,-50,-52,-56,-57,-32,-33,97,-51,]),'TOKEN_LCOL':([81,],[116,]),'TOKEN_DO':([109,],[125,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'dec_var':([4,],[5,]),'vars':([4,116,],[6,133,]),'empty':([4,5,10,13,14,17,18,25,30,33,44,51,52,53,54,55,62,63,64,67,73,78,79,84,90,91,94,106,112,115,116,118,119,120,123,124,127,128,152,],[7,11,11,20,23,27,20,34,23,34,59,71,74,71,71,71,85,92,95,71,107,113,113,71,71,71,71,71,71,131,134,92,92,95,107,141,113,113,131,]),'dec_funcs':([5,10,],[9,16,]),'funcs':([5,10,],[10,10,]),'variable':([8,13,18,],[13,18,18,]),'rep_var':([13,18,],[19,28,]),'mas_ids':([14,30,],[21,48,]),'body':([15,108,125,132,140,],[24,124,142,146,148,]),'scopefun':([17,],[26,]),'dec_statements':([25,33,],[32,50,]),'statement':([25,33,],[33,33,]),'assign':([25,33,],[35,35,]),'condition':([25,33,],[36,36,]),'cycle':([25,33,],[37,37,]),'f_call':([25,33,],[38,38,]),'print':([25,33,],[39,39,]),'type':([29,80,150,],[45,115,152,]),'tipo':([44,],[57,]),'def_tipo':([44,],[58,]),'expresion':([51,52,53,54,55,67,106,112,],[61,73,75,76,79,98,123,127,]),'exp':([51,52,53,54,55,67,84,106,112,],[62,62,62,62,62,62,117,62,62,]),'termino':([51,52,53,54,55,67,84,90,91,106,112,],[63,63,63,63,63,63,63,118,119,63,63,]),'factor':([51,52,53,54,55,67,84,90,91,94,106,112,],[64,64,64,64,64,64,64,64,64,120,64,64,]),'definicion':([51,52,53,54,55,67,84,90,91,94,106,112,],[65,65,65,65,65,65,65,65,65,65,65,65,]),'operaciones':([51,52,53,54,55,67,84,90,91,94,106,112,],[66,66,66,66,66,66,66,66,66,66,66,66,]),'opciones_mas_menos':([51,52,53,54,55,67,84,90,91,94,106,112,],[68,68,68,68,68,68,68,68,68,68,68,68,]),'def_exp':([52,],[72,]),'expresiones':([55,],[77,]),'comparar':([62,],[83,]),'signo':([62,],[84,]),'suma_resta':([63,118,119,],[89,135,136,]),'multi_div':([64,120,],[93,137,]),'operacion_mul_div':([64,120,],[94,94,]),'id_cte':([68,],[99,]),'cte':([68,],[101,]),'coma2':([73,123,],[105,138,]),'comas':([78,79,127,128,],[111,114,143,144,]),'coma':([115,152,],[129,154,]),'var':([116,],[132,]),'else':([124,],[139,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs TOKEN_MAIN body TOKEN_END','programa',8,'p_programa','yacc.py',12),
  ('dec_var -> vars','dec_var',1,'p_dec_var','yacc.py',20),
  ('dec_var -> empty','dec_var',1,'p_dec_var','yacc.py',21),
  ('dec_funcs -> funcs dec_funcs','dec_funcs',2,'p_dec_funcs','yacc.py',24),
  ('dec_funcs -> empty','dec_funcs',1,'p_dec_funcs','yacc.py',25),
  ('vars -> TOKEN_VAR variable rep_var','vars',3,'p_vars','yacc.py',32),
  ('rep_var -> variable rep_var','rep_var',2,'p_rep_var','yacc.py',40),
  ('rep_var -> empty','rep_var',1,'p_rep_var','yacc.py',41),
  ('variable -> TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLON','variable',5,'p_variable','yacc.py',49),
  ('mas_ids -> TOKEN_COMMA TOKEN_ID mas_ids','mas_ids',3,'p_mas_ids','yacc.py',58),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','yacc.py',59),
  ('type -> TOKEN_INT','type',1,'p_type','yacc.py',68),
  ('type -> TOKEN_FLOAT','type',1,'p_type','yacc.py',69),
  ('body -> TOKEN_LBRACE dec_statements TOKEN_RBRACE','body',3,'p_body','yacc.py',72),
  ('dec_statements -> statement dec_statements','dec_statements',2,'p_dec_statements','yacc.py',75),
  ('dec_statements -> empty','dec_statements',1,'p_dec_statements','yacc.py',76),
  ('statement -> assign','statement',1,'p_statement','yacc.py',82),
  ('statement -> condition','statement',1,'p_statement','yacc.py',83),
  ('statement -> cycle','statement',1,'p_statement','yacc.py',84),
  ('statement -> f_call','statement',1,'p_statement','yacc.py',85),
  ('statement -> print','statement',1,'p_statement','yacc.py',86),
  ('print -> TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLON','print',5,'p_print','yacc.py',89),
  ('expresiones -> TOKEN_CTE_STRING comas','expresiones',2,'p_expresiones','yacc.py',92),
  ('expresiones -> expresion comas','expresiones',2,'p_expresiones','yacc.py',93),
  ('comas -> TOKEN_COMMA expresion comas','comas',3,'p_comas','yacc.py',100),
  ('comas -> TOKEN_COMMA TOKEN_CTE_STRING comas','comas',3,'p_comas','yacc.py',101),
  ('comas -> empty','comas',1,'p_comas','yacc.py',102),
  ('cycle -> TOKEN_WHILE TOKEN_LPAREN expresion TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLON','cycle',7,'p_cycle','yacc.py',112),
  ('condition -> TOKEN_IF TOKEN_LPAREN expresion TOKEN_RPAREN body else TOKEN_SEMICOLON','condition',7,'p_condition','yacc.py',118),
  ('else -> TOKEN_ELSE body','else',2,'p_else','yacc.py',123),
  ('else -> empty','else',1,'p_else','yacc.py',124),
  ('cte -> TOKEN_CTE_INT','cte',1,'p_cte','yacc.py',130),
  ('cte -> TOKEN_CTE_FLOAT','cte',1,'p_cte','yacc.py',131),
  ('expresion -> exp comparar','expresion',2,'p_expresion','yacc.py',135),
  ('comparar -> signo exp','comparar',2,'p_comparar','yacc.py',147),
  ('comparar -> empty','comparar',1,'p_comparar','yacc.py',148),
  ('signo -> TOKEN_GT','signo',1,'p_signo','yacc.py',155),
  ('signo -> TOKEN_LT','signo',1,'p_signo','yacc.py',156),
  ('signo -> TOKEN_NE','signo',1,'p_signo','yacc.py',157),
  ('exp -> termino suma_resta','exp',2,'p_exp','yacc.py',160),
  ('suma_resta -> TOKEN_PLUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',172),
  ('suma_resta -> TOKEN_MINUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',173),
  ('suma_resta -> empty','suma_resta',1,'p_suma_resta','yacc.py',174),
  ('termino -> factor multi_div','termino',2,'p_termino','yacc.py',182),
  ('multi_div -> operacion_mul_div factor multi_div','multi_div',3,'p_multi_div','yacc.py',194),
  ('multi_div -> empty','multi_div',1,'p_multi_div','yacc.py',195),
  ('operacion_mul_div -> TOKEN_DIV','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',205),
  ('operacion_mul_div -> TOKEN_MULT','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',206),
  ('factor -> definicion','factor',1,'p_factor','yacc.py',209),
  ('factor -> operaciones','factor',1,'p_factor','yacc.py',210),
  ('definicion -> TOKEN_LPAREN expresion TOKEN_RPAREN','definicion',3,'p_definicion','yacc.py',213),
  ('operaciones -> opciones_mas_menos id_cte','operaciones',2,'p_operaciones','yacc.py',216),
  ('opciones_mas_menos -> TOKEN_PLUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',225),
  ('opciones_mas_menos -> TOKEN_MINUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',226),
  ('opciones_mas_menos -> empty','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',227),
  ('id_cte -> TOKEN_ID','id_cte',1,'p_id_cte','yacc.py',230),
  ('id_cte -> cte','id_cte',1,'p_id_cte','yacc.py',231),
  ('funcs -> TOKEN_VOID TOKEN_ID scopefun TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL TOKEN_SEMICOLON','funcs',11,'p_funcs','yacc.py',243),
  ('scopefun -> empty','scopefun',1,'p_scopefun','yacc.py',261),
  ('tipo -> def_tipo','tipo',1,'p_tipo','yacc.py',272),
  ('tipo -> empty','tipo',1,'p_tipo','yacc.py',273),
  ('def_tipo -> TOKEN_ID TOKEN_COLON type coma','def_tipo',4,'p_def_tipo','yacc.py',276),
  ('coma -> TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma','coma',5,'p_coma','yacc.py',282),
  ('coma -> empty','coma',1,'p_coma','yacc.py',283),
  ('var -> vars','var',1,'p_var','yacc.py',294),
  ('var -> empty','var',1,'p_var','yacc.py',295),
  ('f_call -> TOKEN_ID TOKEN_LPAREN def_exp TOKEN_RPAREN TOKEN_SEMICOLON','f_call',5,'p_f_call','yacc.py',299),
  ('def_exp -> expresion coma2','def_exp',2,'p_def_exp','yacc.py',314),
  ('def_exp -> empty','def_exp',1,'p_def_exp','yacc.py',315),
  ('coma2 -> TOKEN_COMMA expresion coma2','coma2',3,'p_coma2','yacc.py',319),
  ('coma2 -> empty','coma2',1,'p_coma2','yacc.py',320),
  ('assign -> TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLON','assign',4,'p_assign','yacc.py',326),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',332),
]
