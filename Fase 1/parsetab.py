
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TOKEN_ASSIGN TOKEN_COLON TOKEN_COMMA TOKEN_CTE_FLOAT TOKEN_CTE_INT TOKEN_CTE_STRING TOKEN_DIV TOKEN_DO TOKEN_ELSE TOKEN_END TOKEN_FLOAT TOKEN_GT TOKEN_ID TOKEN_IF TOKEN_INT TOKEN_LBRACE TOKEN_LCOL TOKEN_LPAREN TOKEN_LT TOKEN_MAIN TOKEN_MINUS TOKEN_MULT TOKEN_NE TOKEN_PLUS TOKEN_PRINT TOKEN_PROGRAM TOKEN_RBRACE TOKEN_RCOL TOKEN_RPAREN TOKEN_SEMICOLON TOKEN_VAR TOKEN_VOID TOKEN_WHILEprograma : TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs main_declaration TOKEN_MAIN body TOKEN_ENDmain_declaration : emptyprograma : TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs TOKEN_ENDdec_var : vars\n    | emptydec_funcs : funcs dec_funcs\n    | emptyvars : TOKEN_VAR variable rep_varrep_var  : variable rep_var\n    |  emptyvariable : TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLONmas_ids : TOKEN_COMMA TOKEN_ID mas_ids\n    |  emptytype : TOKEN_INT\n    | TOKEN_FLOATbody : TOKEN_LBRACE dec_statements TOKEN_RBRACEdec_statements : statement dec_statements\n    | emptystatement : assign\n        | condition\n        | cycle\n        | f_call\n        | printprint : TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLONexpresiones : TOKEN_CTE_STRING comas\n    | expresion comascomas : TOKEN_COMMA expresion comas\n    | TOKEN_COMMA TOKEN_CTE_STRING comas\n    | emptysaveQuad : emptyGotoF : emptycycle : TOKEN_WHILE TOKEN_LPAREN saveQuad expresion GotoF TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLONsaveQuadIF : emptyGotoFIF : emptycondition : TOKEN_IF TOKEN_LPAREN expresion saveQuadIF TOKEN_RPAREN body GotoFIF else TOKEN_SEMICOLONelse : TOKEN_ELSE body\n    | emptycte : TOKEN_CTE_INT\n    | TOKEN_CTE_FLOATexpresion : exp compararcomparar  : signo exp\n    | emptysigno : TOKEN_GT\n    | TOKEN_LT\n    | TOKEN_NEexp  : termino suma_restasuma_resta : TOKEN_PLUS termino suma_resta\n    | TOKEN_MINUS termino suma_resta\n    | emptytermino : factor multi_divmulti_div  : operacion_mul_div factor multi_div  \n    | emptyoperacion_mul_div : TOKEN_DIV\n    | TOKEN_MULTfactor : definicion\n    | operacionesdefinicion : TOKEN_LPAREN expresion TOKEN_RPARENoperaciones : opciones_mas_menos id_cteopciones_mas_menos : TOKEN_PLUS\n    | TOKEN_MINUS\n    | emptyid_cte : TOKEN_ID\n    | ctefuncs : TOKEN_VOID TOKEN_ID save_func_start TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL end_func TOKEN_SEMICOLONsave_func_start : emptyend_func : emptyscopefun : emptytipo : def_tipo\n    | emptydef_tipo : TOKEN_ID TOKEN_COLON type comacoma : TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma\n    | emptyvar : vars \n    | emptyf_call : TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad TOKEN_SEMICOLONera_quad : emptygosub_quad : emptydef_exp : expresion param_quad coma2\n    | emptyparam_quad : emptycoma2 : TOKEN_COMMA expresion param_quad_coma coma2\n    | emptyparam_quad_coma : emptyassign : TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLONempty :'
    
_lr_action_items = {'TOKEN_PROGRAM':([0,],[2,]),'$end':([1,16,39,],[0,-3,-1,]),'TOKEN_ID':([2,8,12,13,20,24,33,34,41,43,44,45,46,47,56,59,62,63,64,73,74,75,76,77,78,80,81,87,89,91,92,93,95,96,99,101,102,111,117,121,137,148,156,173,175,],[3,14,19,14,14,31,48,52,48,-19,-20,-21,-22,-23,-11,-85,-85,-85,-85,-85,105,-59,-60,-61,-85,-85,-30,-84,-85,-43,-44,-45,-85,-85,-85,-53,-54,-61,-85,140,-24,-85,-75,-35,-32,]),'TOKEN_SEMICOLON':([3,35,36,37,57,67,68,69,70,71,72,88,90,94,97,98,100,104,105,106,107,108,115,126,127,128,129,130,131,142,143,144,145,146,150,155,158,159,162,163,166,168,169,174,],[4,56,-14,-15,-16,87,-85,-85,-85,-55,-56,-40,-42,-46,-49,-50,-52,-58,-62,-63,-38,-39,137,-41,-85,-85,-85,-57,-85,-47,-48,-51,156,-77,-85,-85,-85,-34,171,-66,173,-37,175,-36,]),'TOKEN_VAR':([4,86,],[8,8,]),'TOKEN_VOID':([4,5,6,7,10,13,20,21,22,29,56,171,],[-85,12,-4,-5,12,-85,-85,-8,-10,-9,-11,-64,]),'TOKEN_END':([4,5,6,7,9,10,11,13,18,20,21,22,29,32,56,57,171,],[-85,-85,-4,-5,16,-85,-7,-85,-6,-85,-8,-10,-9,39,-11,-16,-64,]),'TOKEN_MAIN':([4,5,6,7,9,10,11,13,15,17,18,20,21,22,29,56,171,],[-85,-85,-4,-5,-85,-85,-7,-85,26,-2,-6,-85,-8,-10,-9,-11,-64,]),'TOKEN_LBRACE':([13,20,21,22,26,29,56,86,123,124,125,134,160,167,],[-85,-85,-8,-10,33,-9,-11,-85,33,-73,-74,33,33,33,]),'TOKEN_COMMA':([14,31,36,37,68,69,70,71,72,83,84,85,88,90,94,97,98,100,104,105,106,107,108,110,126,127,128,129,130,132,133,138,139,142,143,144,157,161,164,165,],[24,24,-14,-15,-85,-85,-85,-55,-56,117,117,121,-40,-42,-46,-49,-50,-52,-58,-62,-63,-38,-39,-85,-41,-85,-85,-85,-57,148,-80,117,117,-47,-48,-51,-85,121,148,-83,]),'TOKEN_COLON':([14,23,25,31,38,52,140,],[-85,30,-13,-85,-12,65,154,]),'TOKEN_LPAREN':([19,27,28,48,49,50,51,59,60,61,62,63,64,73,78,80,81,89,91,92,93,95,96,99,101,102,117,148,],[-85,34,-65,-85,62,63,64,73,78,-76,73,-85,73,73,73,73,-30,73,-43,-44,-45,73,73,73,-53,-54,73,73,]),'TOKEN_INT':([30,65,154,],[36,36,36,]),'TOKEN_FLOAT':([30,65,154,],[37,37,37,]),'TOKEN_RBRACE':([33,40,41,42,43,44,45,46,47,58,87,137,156,173,175,],[-85,57,-85,-18,-19,-20,-21,-22,-23,-17,-84,-24,-75,-35,-32,]),'TOKEN_IF':([33,41,43,44,45,46,47,87,137,156,173,175,],[49,49,-19,-20,-21,-22,-23,-84,-24,-75,-35,-32,]),'TOKEN_WHILE':([33,41,43,44,45,46,47,87,137,156,173,175,],[50,50,-19,-20,-21,-22,-23,-84,-24,-75,-35,-32,]),'TOKEN_PRINT':([33,41,43,44,45,46,47,87,137,156,173,175,],[51,51,-19,-20,-21,-22,-23,-84,-24,-75,-35,-32,]),'TOKEN_RPAREN':([34,36,37,53,54,55,68,69,70,71,72,78,79,82,83,84,85,88,90,94,97,98,100,103,104,105,106,107,108,109,110,111,112,113,114,116,118,119,120,122,126,127,128,129,130,132,133,135,136,138,139,142,143,144,147,149,152,153,157,161,164,165,170,172,],[-85,-14,-15,66,-68,-69,-85,-85,-85,-55,-56,-85,-85,115,-85,-85,-85,-40,-42,-46,-49,-50,-52,130,-58,-62,-63,-38,-39,131,-85,-79,134,-33,-85,-25,-29,-26,-70,-72,-41,-85,-85,-85,-57,-85,-80,151,-31,-85,-85,-47,-48,-51,-78,-82,-27,-28,-85,-85,-85,-83,-71,-81,]),'TOKEN_ASSIGN':([48,],[59,]),'TOKEN_RCOL':([57,141,],[-16,155,]),'TOKEN_ELSE':([57,150,158,159,],[-16,-85,167,-34,]),'TOKEN_PLUS':([59,62,63,64,69,70,71,72,73,78,80,81,89,91,92,93,95,96,98,99,100,101,102,104,105,106,107,108,117,127,128,129,130,144,148,],[75,75,-85,75,95,-85,-55,-56,75,75,75,-30,75,-43,-44,-45,75,75,-50,75,-52,-53,-54,-58,-62,-63,-38,-39,75,95,95,-85,-57,-51,75,]),'TOKEN_MINUS':([59,62,63,64,69,70,71,72,73,78,80,81,89,91,92,93,95,96,98,99,100,101,102,104,105,106,107,108,117,127,128,129,130,144,148,],[76,76,-85,76,96,-85,-55,-56,76,76,76,-30,76,-43,-44,-45,76,76,-50,76,-52,-53,-54,-58,-62,-63,-38,-39,76,96,96,-85,-57,-51,76,]),'TOKEN_CTE_INT':([59,62,63,64,73,74,75,76,77,78,80,81,89,91,92,93,95,96,99,101,102,111,117,148,],[-85,-85,-85,-85,-85,107,-59,-60,-61,-85,-85,-30,-85,-43,-44,-45,-85,-85,-85,-53,-54,-61,-85,-85,]),'TOKEN_CTE_FLOAT':([59,62,63,64,73,74,75,76,77,78,80,81,89,91,92,93,95,96,99,101,102,111,117,148,],[-85,-85,-85,-85,-85,108,-59,-60,-61,-85,-85,-30,-85,-43,-44,-45,-85,-85,-85,-53,-54,-61,-85,-85,]),'TOKEN_CTE_STRING':([64,117,],[83,139,]),'TOKEN_LCOL':([66,],[86,]),'TOKEN_GT':([68,69,70,71,72,94,97,98,100,104,105,106,107,108,127,128,129,130,142,143,144,],[91,-85,-85,-55,-56,-46,-49,-50,-52,-58,-62,-63,-38,-39,-85,-85,-85,-57,-47,-48,-51,]),'TOKEN_LT':([68,69,70,71,72,94,97,98,100,104,105,106,107,108,127,128,129,130,142,143,144,],[92,-85,-85,-55,-56,-46,-49,-50,-52,-58,-62,-63,-38,-39,-85,-85,-85,-57,-47,-48,-51,]),'TOKEN_NE':([68,69,70,71,72,94,97,98,100,104,105,106,107,108,127,128,129,130,142,143,144,],[93,-85,-85,-55,-56,-46,-49,-50,-52,-58,-62,-63,-38,-39,-85,-85,-85,-57,-47,-48,-51,]),'TOKEN_DIV':([70,71,72,104,105,106,107,108,129,130,],[101,-55,-56,-58,-62,-63,-38,-39,101,-57,]),'TOKEN_MULT':([70,71,72,104,105,106,107,108,129,130,],[102,-55,-56,-58,-62,-63,-38,-39,102,-57,]),'TOKEN_DO':([151,],[160,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'dec_var':([4,],[5,]),'vars':([4,86,],[6,124,]),'empty':([4,5,9,10,13,14,19,20,31,33,34,41,48,59,62,63,64,68,69,70,73,78,79,80,83,84,85,86,89,95,96,99,110,114,117,127,128,129,131,132,138,139,148,150,155,157,158,161,164,],[7,11,17,11,22,25,28,22,25,42,55,42,61,77,77,81,77,90,97,100,77,111,113,77,118,118,122,125,77,77,77,77,133,136,77,97,97,100,146,149,118,118,77,159,163,165,168,122,149,]),'dec_funcs':([5,10,],[9,18,]),'funcs':([5,10,],[10,10,]),'variable':([8,13,20,],[13,20,20,]),'main_declaration':([9,],[15,]),'rep_var':([13,20,],[21,29,]),'mas_ids':([14,31,],[23,38,]),'save_func_start':([19,],[27,]),'body':([26,123,134,160,167,],[32,141,150,169,174,]),'type':([30,65,154,],[35,85,161,]),'dec_statements':([33,41,],[40,58,]),'statement':([33,41,],[41,41,]),'assign':([33,41,],[43,43,]),'condition':([33,41,],[44,44,]),'cycle':([33,41,],[45,45,]),'f_call':([33,41,],[46,46,]),'print':([33,41,],[47,47,]),'tipo':([34,],[53,]),'def_tipo':([34,],[54,]),'era_quad':([48,],[60,]),'expresion':([59,62,64,73,78,80,117,148,],[67,79,84,103,110,114,138,157,]),'exp':([59,62,64,73,78,80,89,117,148,],[68,68,68,68,68,68,126,68,68,]),'termino':([59,62,64,73,78,80,89,95,96,117,148,],[69,69,69,69,69,69,69,127,128,69,69,]),'factor':([59,62,64,73,78,80,89,95,96,99,117,148,],[70,70,70,70,70,70,70,70,70,129,70,70,]),'definicion':([59,62,64,73,78,80,89,95,96,99,117,148,],[71,71,71,71,71,71,71,71,71,71,71,71,]),'operaciones':([59,62,64,73,78,80,89,95,96,99,117,148,],[72,72,72,72,72,72,72,72,72,72,72,72,]),'opciones_mas_menos':([59,62,64,73,78,80,89,95,96,99,117,148,],[74,74,74,74,74,74,74,74,74,74,74,74,]),'saveQuad':([63,],[80,]),'expresiones':([64,],[82,]),'comparar':([68,],[88,]),'signo':([68,],[89,]),'suma_resta':([69,127,128,],[94,142,143,]),'multi_div':([70,129,],[98,144,]),'operacion_mul_div':([70,129,],[99,99,]),'id_cte':([74,],[104,]),'cte':([74,],[106,]),'def_exp':([78,],[109,]),'saveQuadIF':([79,],[112,]),'comas':([83,84,138,139,],[116,119,152,153,]),'coma':([85,161,],[120,170,]),'var':([86,],[123,]),'param_quad':([110,],[132,]),'GotoF':([114,],[135,]),'gosub_quad':([131,],[145,]),'coma2':([132,164,],[147,172,]),'GotoFIF':([150,],[158,]),'end_func':([155,],[162,]),'param_quad_coma':([157,],[164,]),'else':([158,],[166,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs main_declaration TOKEN_MAIN body TOKEN_END','programa',9,'p_programa','yacc.py',24),
  ('main_declaration -> empty','main_declaration',1,'p_main_declaration','yacc.py',32),
  ('programa -> TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs TOKEN_END','programa',6,'p_programa_error_no_main','yacc.py',40),
  ('dec_var -> vars','dec_var',1,'p_dec_var','yacc.py',47),
  ('dec_var -> empty','dec_var',1,'p_dec_var','yacc.py',48),
  ('dec_funcs -> funcs dec_funcs','dec_funcs',2,'p_dec_funcs','yacc.py',52),
  ('dec_funcs -> empty','dec_funcs',1,'p_dec_funcs','yacc.py',53),
  ('vars -> TOKEN_VAR variable rep_var','vars',3,'p_vars','yacc.py',63),
  ('rep_var -> variable rep_var','rep_var',2,'p_rep_var','yacc.py',71),
  ('rep_var -> empty','rep_var',1,'p_rep_var','yacc.py',72),
  ('variable -> TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLON','variable',5,'p_variable','yacc.py',82),
  ('mas_ids -> TOKEN_COMMA TOKEN_ID mas_ids','mas_ids',3,'p_mas_ids','yacc.py',92),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','yacc.py',93),
  ('type -> TOKEN_INT','type',1,'p_type','yacc.py',103),
  ('type -> TOKEN_FLOAT','type',1,'p_type','yacc.py',104),
  ('body -> TOKEN_LBRACE dec_statements TOKEN_RBRACE','body',3,'p_body','yacc.py',113),
  ('dec_statements -> statement dec_statements','dec_statements',2,'p_dec_statements','yacc.py',117),
  ('dec_statements -> empty','dec_statements',1,'p_dec_statements','yacc.py',118),
  ('statement -> assign','statement',1,'p_statement','yacc.py',128),
  ('statement -> condition','statement',1,'p_statement','yacc.py',129),
  ('statement -> cycle','statement',1,'p_statement','yacc.py',130),
  ('statement -> f_call','statement',1,'p_statement','yacc.py',131),
  ('statement -> print','statement',1,'p_statement','yacc.py',132),
  ('print -> TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLON','print',5,'p_print','yacc.py',136),
  ('expresiones -> TOKEN_CTE_STRING comas','expresiones',2,'p_expresiones','yacc.py',146),
  ('expresiones -> expresion comas','expresiones',2,'p_expresiones','yacc.py',147),
  ('comas -> TOKEN_COMMA expresion comas','comas',3,'p_comas','yacc.py',154),
  ('comas -> TOKEN_COMMA TOKEN_CTE_STRING comas','comas',3,'p_comas','yacc.py',155),
  ('comas -> empty','comas',1,'p_comas','yacc.py',156),
  ('saveQuad -> empty','saveQuad',1,'p_saveQuad','yacc.py',166),
  ('GotoF -> empty','GotoF',1,'p_GotoF','yacc.py',171),
  ('cycle -> TOKEN_WHILE TOKEN_LPAREN saveQuad expresion GotoF TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLON','cycle',9,'p_cycle','yacc.py',178),
  ('saveQuadIF -> empty','saveQuadIF',1,'p_saveQuadIF','yacc.py',193),
  ('GotoFIF -> empty','GotoFIF',1,'p_GotoFIF','yacc.py',202),
  ('condition -> TOKEN_IF TOKEN_LPAREN expresion saveQuadIF TOKEN_RPAREN body GotoFIF else TOKEN_SEMICOLON','condition',9,'p_condition','yacc.py',214),
  ('else -> TOKEN_ELSE body','else',2,'p_else','yacc.py',228),
  ('else -> empty','else',1,'p_else','yacc.py',229),
  ('cte -> TOKEN_CTE_INT','cte',1,'p_cte','yacc.py',236),
  ('cte -> TOKEN_CTE_FLOAT','cte',1,'p_cte','yacc.py',237),
  ('expresion -> exp comparar','expresion',2,'p_expresion','yacc.py',244),
  ('comparar -> signo exp','comparar',2,'p_comparar','yacc.py',262),
  ('comparar -> empty','comparar',1,'p_comparar','yacc.py',263),
  ('signo -> TOKEN_GT','signo',1,'p_signo','yacc.py',270),
  ('signo -> TOKEN_LT','signo',1,'p_signo','yacc.py',271),
  ('signo -> TOKEN_NE','signo',1,'p_signo','yacc.py',272),
  ('exp -> termino suma_resta','exp',2,'p_exp','yacc.py',276),
  ('suma_resta -> TOKEN_PLUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',294),
  ('suma_resta -> TOKEN_MINUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',295),
  ('suma_resta -> empty','suma_resta',1,'p_suma_resta','yacc.py',296),
  ('termino -> factor multi_div','termino',2,'p_termino','yacc.py',306),
  ('multi_div -> operacion_mul_div factor multi_div','multi_div',3,'p_multi_div','yacc.py',324),
  ('multi_div -> empty','multi_div',1,'p_multi_div','yacc.py',325),
  ('operacion_mul_div -> TOKEN_DIV','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',335),
  ('operacion_mul_div -> TOKEN_MULT','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',336),
  ('factor -> definicion','factor',1,'p_factor','yacc.py',340),
  ('factor -> operaciones','factor',1,'p_factor','yacc.py',341),
  ('definicion -> TOKEN_LPAREN expresion TOKEN_RPAREN','definicion',3,'p_definicion','yacc.py',345),
  ('operaciones -> opciones_mas_menos id_cte','operaciones',2,'p_operaciones','yacc.py',352),
  ('opciones_mas_menos -> TOKEN_PLUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',369),
  ('opciones_mas_menos -> TOKEN_MINUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',370),
  ('opciones_mas_menos -> empty','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',371),
  ('id_cte -> TOKEN_ID','id_cte',1,'p_id_cte','yacc.py',375),
  ('id_cte -> cte','id_cte',1,'p_id_cte','yacc.py',376),
  ('funcs -> TOKEN_VOID TOKEN_ID save_func_start TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL end_func TOKEN_SEMICOLON','funcs',12,'p_funcs','yacc.py',392),
  ('save_func_start -> empty','save_func_start',1,'p_save_func_start','yacc.py',399),
  ('end_func -> empty','end_func',1,'p_end_func','yacc.py',408),
  ('scopefun -> empty','scopefun',1,'p_scopefun','yacc.py',416),
  ('tipo -> def_tipo','tipo',1,'p_tipo','yacc.py',422),
  ('tipo -> empty','tipo',1,'p_tipo','yacc.py',423),
  ('def_tipo -> TOKEN_ID TOKEN_COLON type coma','def_tipo',4,'p_def_tipo','yacc.py',436),
  ('coma -> TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma','coma',5,'p_coma','yacc.py',443),
  ('coma -> empty','coma',1,'p_coma','yacc.py',444),
  ('var -> vars','var',1,'p_var','yacc.py',455),
  ('var -> empty','var',1,'p_var','yacc.py',456),
  ('f_call -> TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad TOKEN_SEMICOLON','f_call',7,'p_f_call','yacc.py',460),
  ('era_quad -> empty','era_quad',1,'p_era_quad','yacc.py',478),
  ('gosub_quad -> empty','gosub_quad',1,'p_gosub_quad','yacc.py',485),
  ('def_exp -> expresion param_quad coma2','def_exp',3,'p_def_exp','yacc.py',492),
  ('def_exp -> empty','def_exp',1,'p_def_exp','yacc.py',493),
  ('param_quad -> empty','param_quad',1,'p_param_quad','yacc.py',503),
  ('coma2 -> TOKEN_COMMA expresion param_quad_coma coma2','coma2',4,'p_coma2','yacc.py',512),
  ('coma2 -> empty','coma2',1,'p_coma2','yacc.py',513),
  ('param_quad_coma -> empty','param_quad_coma',1,'p_param_quad_coma','yacc.py',520),
  ('assign -> TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLON','assign',4,'p_assign','yacc.py',531),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',541),
]
