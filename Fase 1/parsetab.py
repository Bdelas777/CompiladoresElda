
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TOKEN_ASSIGN TOKEN_COLON TOKEN_COMMA TOKEN_CTE_FLOAT TOKEN_CTE_INT TOKEN_CTE_STRING TOKEN_DIV TOKEN_DO TOKEN_ELSE TOKEN_END TOKEN_FLOAT TOKEN_GT TOKEN_ID TOKEN_IF TOKEN_INT TOKEN_LBRACE TOKEN_LCOL TOKEN_LPAREN TOKEN_LT TOKEN_MAIN TOKEN_MINUS TOKEN_MULT TOKEN_NE TOKEN_PLUS TOKEN_PRINT TOKEN_PROGRAM TOKEN_RBRACE TOKEN_RCOL TOKEN_RPAREN TOKEN_SEMICOLON TOKEN_VAR TOKEN_VOID TOKEN_WHILEprograma : TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON  dec_var dec_funcs TOKEN_MAIN  body TOKEN_ENDdec_var : vars\n    | emptydec_funcs : funcs dec_funcs\n    | emptyvars : TOKEN_VAR variable rep_varrep_var  : variable rep_var\n    |  emptyvariable : TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLONmas_ids : TOKEN_COMMA TOKEN_ID mas_ids\n    |  emptytype : TOKEN_INT\n    | TOKEN_FLOATbody : TOKEN_LBRACE dec_statements TOKEN_RBRACEdec_statements : statement dec_statements\n    | emptystatement : assign\n        | condition\n        | cycle\n        | f_call\n        | printprint : TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLONexpresiones : TOKEN_CTE_STRING comas\n    | expresion comascomas : TOKEN_COMMA expresion comas\n    | TOKEN_COMMA TOKEN_CTE_STRING comas\n    | emptysaveQuad : emptyGotoF : emptycycle : TOKEN_WHILE TOKEN_LPAREN saveQuad expresion GotoF TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLONsaveQuadIF : emptyGotoFIF : emptycondition : TOKEN_IF TOKEN_LPAREN expresion saveQuadIF TOKEN_RPAREN body GotoFIF else TOKEN_SEMICOLONelse : TOKEN_ELSE body\n    | emptycte : TOKEN_CTE_INT\n    | TOKEN_CTE_FLOATexpresion : exp compararcomparar  : signo exp\n    | emptysigno : TOKEN_GT\n    | TOKEN_LT\n    | TOKEN_NEexp  : termino suma_restasuma_resta : TOKEN_PLUS termino suma_resta\n    | TOKEN_MINUS termino suma_resta\n    | emptytermino : factor multi_divmulti_div  : operacion_mul_div factor multi_div  \n    | emptyoperacion_mul_div : TOKEN_DIV\n    | TOKEN_MULTfactor : definicion\n    | operacionesdefinicion : TOKEN_LPAREN expresion TOKEN_RPARENoperaciones : opciones_mas_menos id_cteopciones_mas_menos : TOKEN_PLUS\n    | TOKEN_MINUS\n    | emptyid_cte : TOKEN_ID\n    | ctefuncs : TOKEN_VOID TOKEN_ID save_func_start TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL end_func TOKEN_SEMICOLONsave_func_start : emptyend_func : emptyscopefun : emptytipo : def_tipo\n    | emptydef_tipo : TOKEN_ID TOKEN_COLON type comacoma : TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma\n    | emptyvar : vars \n    | emptyf_call : TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad TOKEN_SEMICOLONera_quad : emptygosub_quad : emptydef_exp : expresion param_quad coma2\n    | emptyparam_quad : emptycoma2 : TOKEN_COMMA expresion param_quad_coma coma2\n    | emptyparam_quad_coma : emptyassign : TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLONempty :'
    
_lr_action_items = {'TOKEN_PROGRAM':([0,],[2,]),'$end':([1,31,],[0,-1,]),'TOKEN_ID':([2,8,12,13,18,22,25,33,35,36,37,38,39,44,51,54,55,56,61,68,69,70,71,72,73,75,76,82,84,86,87,88,90,91,94,96,97,106,112,128,132,143,151,168,170,],[3,14,17,14,14,30,40,40,-17,-18,-19,-20,-21,57,-83,-83,-83,-83,-9,-83,100,-57,-58,-59,-83,-83,-28,-82,-83,-41,-42,-43,-83,-83,-83,-51,-52,-59,-83,-22,149,-83,-73,-33,-30,]),'TOKEN_SEMICOLON':([3,45,46,47,49,62,63,64,65,66,67,83,85,89,92,93,95,99,100,101,102,103,110,117,118,119,120,121,122,137,138,139,140,141,145,153,154,157,160,162,163,165,166,169,],[4,61,-12,-13,-14,82,-83,-83,-83,-53,-54,-38,-40,-44,-47,-48,-50,-56,-60,-61,-36,-37,128,-39,-83,-83,-83,-55,-83,-45,-46,-49,151,-75,-83,-83,-32,-83,168,-35,170,172,-64,-34,]),'TOKEN_VAR':([4,116,],[8,8,]),'TOKEN_VOID':([4,5,6,7,10,13,18,19,20,28,61,172,],[-83,12,-2,-3,12,-83,-83,-6,-8,-7,-9,-62,]),'TOKEN_MAIN':([4,5,6,7,9,10,11,13,16,18,19,20,28,61,172,],[-83,-83,-2,-3,15,-83,-5,-83,-4,-83,-6,-8,-7,-9,-62,]),'TOKEN_LBRACE':([13,15,18,19,20,28,61,116,125,134,135,136,155,161,],[-83,25,-83,-6,-8,-7,-9,-83,25,25,-71,-72,25,25,]),'TOKEN_COMMA':([14,30,46,47,63,64,65,66,67,78,79,83,85,89,92,93,95,99,100,101,102,103,105,115,117,118,119,120,121,123,124,129,130,137,138,139,152,158,159,164,],[22,22,-12,-13,-83,-83,-83,-53,-54,112,112,-38,-40,-44,-47,-48,-50,-56,-60,-61,-36,-37,-83,132,-39,-83,-83,-83,-55,143,-78,112,112,-45,-46,-49,-83,143,-81,132,]),'TOKEN_COLON':([14,21,23,30,48,57,149,],[-83,29,-11,-83,-10,80,156,]),'TOKEN_LPAREN':([17,26,27,40,41,42,43,51,52,53,54,55,56,68,73,75,76,84,86,87,88,90,91,94,96,97,112,143,],[-83,44,-63,-83,54,55,56,68,73,-74,68,-83,68,68,68,68,-28,68,-41,-42,-43,68,68,68,-51,-52,68,68,]),'TOKEN_END':([24,49,],[31,-14,]),'TOKEN_RBRACE':([25,32,33,34,35,36,37,38,39,50,82,128,151,168,170,],[-83,49,-83,-16,-17,-18,-19,-20,-21,-15,-82,-22,-73,-33,-30,]),'TOKEN_IF':([25,33,35,36,37,38,39,82,128,151,168,170,],[41,41,-17,-18,-19,-20,-21,-82,-22,-73,-33,-30,]),'TOKEN_WHILE':([25,33,35,36,37,38,39,82,128,151,168,170,],[42,42,-17,-18,-19,-20,-21,-82,-22,-73,-33,-30,]),'TOKEN_PRINT':([25,33,35,36,37,38,39,82,128,151,168,170,],[43,43,-17,-18,-19,-20,-21,-82,-22,-73,-33,-30,]),'TOKEN_INT':([29,80,156,],[46,46,46,]),'TOKEN_FLOAT':([29,80,156,],[47,47,47,]),'TOKEN_ASSIGN':([40,],[51,]),'TOKEN_RPAREN':([44,46,47,58,59,60,63,64,65,66,67,73,74,77,78,79,83,85,89,92,93,95,98,99,100,101,102,103,104,105,106,107,108,109,111,113,114,115,117,118,119,120,121,123,124,126,127,129,130,131,133,137,138,139,142,144,147,148,152,158,159,164,167,171,],[-83,-12,-13,81,-66,-67,-83,-83,-83,-53,-54,-83,-83,110,-83,-83,-38,-40,-44,-47,-48,-50,121,-56,-60,-61,-36,-37,122,-83,-77,125,-31,-83,-23,-27,-24,-83,-39,-83,-83,-83,-55,-83,-78,146,-29,-83,-83,-68,-70,-45,-46,-49,-76,-80,-25,-26,-83,-83,-81,-83,-79,-69,]),'TOKEN_ELSE':([49,145,153,154,],[-14,-83,161,-32,]),'TOKEN_RCOL':([49,150,],[-14,157,]),'TOKEN_PLUS':([51,54,55,56,64,65,66,67,68,73,75,76,84,86,87,88,90,91,93,94,95,96,97,99,100,101,102,103,112,118,119,120,121,139,143,],[70,70,-83,70,90,-83,-53,-54,70,70,70,-28,70,-41,-42,-43,70,70,-48,70,-50,-51,-52,-56,-60,-61,-36,-37,70,90,90,-83,-55,-49,70,]),'TOKEN_MINUS':([51,54,55,56,64,65,66,67,68,73,75,76,84,86,87,88,90,91,93,94,95,96,97,99,100,101,102,103,112,118,119,120,121,139,143,],[71,71,-83,71,91,-83,-53,-54,71,71,71,-28,71,-41,-42,-43,71,71,-48,71,-50,-51,-52,-56,-60,-61,-36,-37,71,91,91,-83,-55,-49,71,]),'TOKEN_CTE_INT':([51,54,55,56,68,69,70,71,72,73,75,76,84,86,87,88,90,91,94,96,97,106,112,143,],[-83,-83,-83,-83,-83,102,-57,-58,-59,-83,-83,-28,-83,-41,-42,-43,-83,-83,-83,-51,-52,-59,-83,-83,]),'TOKEN_CTE_FLOAT':([51,54,55,56,68,69,70,71,72,73,75,76,84,86,87,88,90,91,94,96,97,106,112,143,],[-83,-83,-83,-83,-83,103,-57,-58,-59,-83,-83,-28,-83,-41,-42,-43,-83,-83,-83,-51,-52,-59,-83,-83,]),'TOKEN_CTE_STRING':([56,112,],[78,130,]),'TOKEN_GT':([63,64,65,66,67,89,92,93,95,99,100,101,102,103,118,119,120,121,137,138,139,],[86,-83,-83,-53,-54,-44,-47,-48,-50,-56,-60,-61,-36,-37,-83,-83,-83,-55,-45,-46,-49,]),'TOKEN_LT':([63,64,65,66,67,89,92,93,95,99,100,101,102,103,118,119,120,121,137,138,139,],[87,-83,-83,-53,-54,-44,-47,-48,-50,-56,-60,-61,-36,-37,-83,-83,-83,-55,-45,-46,-49,]),'TOKEN_NE':([63,64,65,66,67,89,92,93,95,99,100,101,102,103,118,119,120,121,137,138,139,],[88,-83,-83,-53,-54,-44,-47,-48,-50,-56,-60,-61,-36,-37,-83,-83,-83,-55,-45,-46,-49,]),'TOKEN_DIV':([65,66,67,99,100,101,102,103,120,121,],[96,-53,-54,-56,-60,-61,-36,-37,96,-55,]),'TOKEN_MULT':([65,66,67,99,100,101,102,103,120,121,],[97,-53,-54,-56,-60,-61,-36,-37,97,-55,]),'TOKEN_LCOL':([81,],[116,]),'TOKEN_DO':([146,],[155,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'dec_var':([4,],[5,]),'vars':([4,116,],[6,135,]),'empty':([4,5,10,13,14,17,18,25,30,33,40,44,51,54,55,56,63,64,65,68,73,74,75,78,79,84,90,91,94,105,109,112,115,116,118,119,120,122,123,129,130,143,145,152,153,157,158,164,],[7,11,11,20,23,27,20,34,23,34,53,60,72,72,76,72,85,92,95,72,106,108,72,113,113,72,72,72,72,124,127,72,133,136,92,92,95,141,144,113,113,72,154,159,162,166,144,133,]),'dec_funcs':([5,10,],[9,16,]),'funcs':([5,10,],[10,10,]),'variable':([8,13,18,],[13,18,18,]),'rep_var':([13,18,],[19,28,]),'mas_ids':([14,30,],[21,48,]),'body':([15,125,134,155,161,],[24,145,150,163,169,]),'save_func_start':([17,],[26,]),'dec_statements':([25,33,],[32,50,]),'statement':([25,33,],[33,33,]),'assign':([25,33,],[35,35,]),'condition':([25,33,],[36,36,]),'cycle':([25,33,],[37,37,]),'f_call':([25,33,],[38,38,]),'print':([25,33,],[39,39,]),'type':([29,80,156,],[45,115,164,]),'era_quad':([40,],[52,]),'tipo':([44,],[58,]),'def_tipo':([44,],[59,]),'expresion':([51,54,56,68,73,75,112,143,],[62,74,79,98,105,109,129,152,]),'exp':([51,54,56,68,73,75,84,112,143,],[63,63,63,63,63,63,117,63,63,]),'termino':([51,54,56,68,73,75,84,90,91,112,143,],[64,64,64,64,64,64,64,118,119,64,64,]),'factor':([51,54,56,68,73,75,84,90,91,94,112,143,],[65,65,65,65,65,65,65,65,65,120,65,65,]),'definicion':([51,54,56,68,73,75,84,90,91,94,112,143,],[66,66,66,66,66,66,66,66,66,66,66,66,]),'operaciones':([51,54,56,68,73,75,84,90,91,94,112,143,],[67,67,67,67,67,67,67,67,67,67,67,67,]),'opciones_mas_menos':([51,54,56,68,73,75,84,90,91,94,112,143,],[69,69,69,69,69,69,69,69,69,69,69,69,]),'saveQuad':([55,],[75,]),'expresiones':([56,],[77,]),'comparar':([63,],[83,]),'signo':([63,],[84,]),'suma_resta':([64,118,119,],[89,137,138,]),'multi_div':([65,120,],[93,139,]),'operacion_mul_div':([65,120,],[94,94,]),'id_cte':([69,],[99,]),'cte':([69,],[101,]),'def_exp':([73,],[104,]),'saveQuadIF':([74,],[107,]),'comas':([78,79,129,130,],[111,114,147,148,]),'param_quad':([105,],[123,]),'GotoF':([109,],[126,]),'coma':([115,164,],[131,171,]),'var':([116,],[134,]),'gosub_quad':([122,],[140,]),'coma2':([123,158,],[142,167,]),'GotoFIF':([145,],[153,]),'param_quad_coma':([152,],[158,]),'else':([153,],[160,]),'end_func':([157,],[165,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funcs TOKEN_MAIN body TOKEN_END','programa',8,'p_programa','yacc.py',22),
  ('dec_var -> vars','dec_var',1,'p_dec_var','yacc.py',43),
  ('dec_var -> empty','dec_var',1,'p_dec_var','yacc.py',44),
  ('dec_funcs -> funcs dec_funcs','dec_funcs',2,'p_dec_funcs','yacc.py',48),
  ('dec_funcs -> empty','dec_funcs',1,'p_dec_funcs','yacc.py',49),
  ('vars -> TOKEN_VAR variable rep_var','vars',3,'p_vars','yacc.py',59),
  ('rep_var -> variable rep_var','rep_var',2,'p_rep_var','yacc.py',67),
  ('rep_var -> empty','rep_var',1,'p_rep_var','yacc.py',68),
  ('variable -> TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLON','variable',5,'p_variable','yacc.py',78),
  ('mas_ids -> TOKEN_COMMA TOKEN_ID mas_ids','mas_ids',3,'p_mas_ids','yacc.py',88),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','yacc.py',89),
  ('type -> TOKEN_INT','type',1,'p_type','yacc.py',99),
  ('type -> TOKEN_FLOAT','type',1,'p_type','yacc.py',100),
  ('body -> TOKEN_LBRACE dec_statements TOKEN_RBRACE','body',3,'p_body','yacc.py',109),
  ('dec_statements -> statement dec_statements','dec_statements',2,'p_dec_statements','yacc.py',113),
  ('dec_statements -> empty','dec_statements',1,'p_dec_statements','yacc.py',114),
  ('statement -> assign','statement',1,'p_statement','yacc.py',124),
  ('statement -> condition','statement',1,'p_statement','yacc.py',125),
  ('statement -> cycle','statement',1,'p_statement','yacc.py',126),
  ('statement -> f_call','statement',1,'p_statement','yacc.py',127),
  ('statement -> print','statement',1,'p_statement','yacc.py',128),
  ('print -> TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLON','print',5,'p_print','yacc.py',132),
  ('expresiones -> TOKEN_CTE_STRING comas','expresiones',2,'p_expresiones','yacc.py',142),
  ('expresiones -> expresion comas','expresiones',2,'p_expresiones','yacc.py',143),
  ('comas -> TOKEN_COMMA expresion comas','comas',3,'p_comas','yacc.py',150),
  ('comas -> TOKEN_COMMA TOKEN_CTE_STRING comas','comas',3,'p_comas','yacc.py',151),
  ('comas -> empty','comas',1,'p_comas','yacc.py',152),
  ('saveQuad -> empty','saveQuad',1,'p_saveQuad','yacc.py',162),
  ('GotoF -> empty','GotoF',1,'p_GotoF','yacc.py',166),
  ('cycle -> TOKEN_WHILE TOKEN_LPAREN saveQuad expresion GotoF TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLON','cycle',9,'p_cycle','yacc.py',172),
  ('saveQuadIF -> empty','saveQuadIF',1,'p_saveQuadIF','yacc.py',182),
  ('GotoFIF -> empty','GotoFIF',1,'p_GotoFIF','yacc.py',188),
  ('condition -> TOKEN_IF TOKEN_LPAREN expresion saveQuadIF TOKEN_RPAREN body GotoFIF else TOKEN_SEMICOLON','condition',9,'p_condition','yacc.py',195),
  ('else -> TOKEN_ELSE body','else',2,'p_else','yacc.py',205),
  ('else -> empty','else',1,'p_else','yacc.py',206),
  ('cte -> TOKEN_CTE_INT','cte',1,'p_cte','yacc.py',213),
  ('cte -> TOKEN_CTE_FLOAT','cte',1,'p_cte','yacc.py',214),
  ('expresion -> exp comparar','expresion',2,'p_expresion','yacc.py',221),
  ('comparar -> signo exp','comparar',2,'p_comparar','yacc.py',239),
  ('comparar -> empty','comparar',1,'p_comparar','yacc.py',240),
  ('signo -> TOKEN_GT','signo',1,'p_signo','yacc.py',247),
  ('signo -> TOKEN_LT','signo',1,'p_signo','yacc.py',248),
  ('signo -> TOKEN_NE','signo',1,'p_signo','yacc.py',249),
  ('exp -> termino suma_resta','exp',2,'p_exp','yacc.py',253),
  ('suma_resta -> TOKEN_PLUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',271),
  ('suma_resta -> TOKEN_MINUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',272),
  ('suma_resta -> empty','suma_resta',1,'p_suma_resta','yacc.py',273),
  ('termino -> factor multi_div','termino',2,'p_termino','yacc.py',283),
  ('multi_div -> operacion_mul_div factor multi_div','multi_div',3,'p_multi_div','yacc.py',301),
  ('multi_div -> empty','multi_div',1,'p_multi_div','yacc.py',302),
  ('operacion_mul_div -> TOKEN_DIV','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',312),
  ('operacion_mul_div -> TOKEN_MULT','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',313),
  ('factor -> definicion','factor',1,'p_factor','yacc.py',317),
  ('factor -> operaciones','factor',1,'p_factor','yacc.py',318),
  ('definicion -> TOKEN_LPAREN expresion TOKEN_RPAREN','definicion',3,'p_definicion','yacc.py',322),
  ('operaciones -> opciones_mas_menos id_cte','operaciones',2,'p_operaciones','yacc.py',329),
  ('opciones_mas_menos -> TOKEN_PLUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',346),
  ('opciones_mas_menos -> TOKEN_MINUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',347),
  ('opciones_mas_menos -> empty','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',348),
  ('id_cte -> TOKEN_ID','id_cte',1,'p_id_cte','yacc.py',352),
  ('id_cte -> cte','id_cte',1,'p_id_cte','yacc.py',353),
  ('funcs -> TOKEN_VOID TOKEN_ID save_func_start TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL end_func TOKEN_SEMICOLON','funcs',12,'p_funcs','yacc.py',369),
  ('save_func_start -> empty','save_func_start',1,'p_save_func_start','yacc.py',376),
  ('end_func -> empty','end_func',1,'p_end_func','yacc.py',383),
  ('scopefun -> empty','scopefun',1,'p_scopefun','yacc.py',389),
  ('tipo -> def_tipo','tipo',1,'p_tipo','yacc.py',395),
  ('tipo -> empty','tipo',1,'p_tipo','yacc.py',396),
  ('def_tipo -> TOKEN_ID TOKEN_COLON type coma','def_tipo',4,'p_def_tipo','yacc.py',409),
  ('coma -> TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma','coma',5,'p_coma','yacc.py',416),
  ('coma -> empty','coma',1,'p_coma','yacc.py',417),
  ('var -> vars','var',1,'p_var','yacc.py',428),
  ('var -> empty','var',1,'p_var','yacc.py',429),
  ('f_call -> TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad TOKEN_SEMICOLON','f_call',7,'p_f_call','yacc.py',433),
  ('era_quad -> empty','era_quad',1,'p_era_quad','yacc.py',450),
  ('gosub_quad -> empty','gosub_quad',1,'p_gosub_quad','yacc.py',457),
  ('def_exp -> expresion param_quad coma2','def_exp',3,'p_def_exp','yacc.py',463),
  ('def_exp -> empty','def_exp',1,'p_def_exp','yacc.py',464),
  ('param_quad -> empty','param_quad',1,'p_param_quad','yacc.py',474),
  ('coma2 -> TOKEN_COMMA expresion param_quad_coma coma2','coma2',4,'p_coma2','yacc.py',483),
  ('coma2 -> empty','coma2',1,'p_coma2','yacc.py',484),
  ('param_quad_coma -> empty','param_quad_coma',1,'p_param_quad_coma','yacc.py',491),
  ('assign -> TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLON','assign',4,'p_assign','yacc.py',500),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',509),
]
