
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TOKEN_ASSIGN TOKEN_COLON TOKEN_COMMA TOKEN_CTE_FLOAT TOKEN_CTE_INT TOKEN_CTE_STRING TOKEN_DIV TOKEN_DO TOKEN_ELSE TOKEN_END TOKEN_EQ TOKEN_FLOAT TOKEN_GE TOKEN_GT TOKEN_ID TOKEN_IF TOKEN_INT TOKEN_LBRACE TOKEN_LE TOKEN_LPAREN TOKEN_LT TOKEN_MAIN TOKEN_MINUS TOKEN_MULT TOKEN_NE TOKEN_PLUS TOKEN_PRINT TOKEN_PROGRAM TOKEN_RBRACE TOKEN_RPAREN TOKEN_SEMICOLON TOKEN_VAR TOKEN_VOID TOKEN_WHILEprograma : TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funs TOKEN_MAIN body TOKEN_ENDdec_var : vars\n               | emptydec_funs : funs dec_funs\n                | emptyvars : TOKEN_VAR variable rep_varrep_var : TOKEN_VAR variable rep_var\n               | emptyvariable : TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLONmas_ids : TOKEN_COMMA TOKEN_ID mas_ids\n               | emptytype : TOKEN_INT \n            | TOKEN_FLOATbody : TOKEN_LBRACE dec_statements TOKEN_RBRACEdec_statements : statement dec_statements\n                      | emptystatement : assign\n                 | condition\n                 | cycle\n                 | f_call\n                 | printprint : TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLONexpresiones : TOKEN_CTE_STRING comas\n                   | expresion comascomas : TOKEN_COMMA expresion comas\n             | TOKEN_COMMA TOKEN_CTE_STRING comas\n             | emptycycle : TOKEN_WHILE TOKEN_LPAREN expresion TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLONcondition : TOKEN_IF TOKEN_LPAREN expresion TOKEN_RPAREN body else TOKEN_SEMICOLONelse : TOKEN_ELSE body\n            | emptycte : TOKEN_CTE_INT\n           | TOKEN_CTE_FLOATexpresion : exp compararcomparar : signo exp\n                | emptysigno : TOKEN_GT\n             | TOKEN_LT\n             | TOKEN_NE\n             | TOKEN_GE\n             | TOKEN_LE\n             | TOKEN_EQexp : termino suma_restasuma_resta : TOKEN_PLUS termino suma_resta\n                  | TOKEN_MINUS termino suma_resta\n                  | emptyopcion_mas_menos : TOKEN_PLUS\n                        | TOKEN_MINUStermino : factor multi_divmulti_div : operacion_mul_div factor multi_div\n                 | emptyoperacion_mul_div : TOKEN_DIV\n                         | TOKEN_MULTfactor : definicion\n              | operacionesdefinicion : TOKEN_LPAREN expresion TOKEN_RPARENoperaciones : opciones_mas_menos id_cteopciones_mas_menos : TOKEN_PLUS\n                          | TOKEN_MINUS\n                          | emptyid_cte : TOKEN_ID\n              | cte\n              | f_call_exprf_call_expr : TOKEN_ID TOKEN_LPAREN def_exp TOKEN_RPARENfuns : TOKEN_VOID TOKEN_ID TOKEN_LPAREN tipo TOKEN_RPAREN var body TOKEN_SEMICOLONtipo : def_tipo\n            | emptydef_tipo : TOKEN_ID TOKEN_COLON type comacoma : TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma\n            | emptyvar : vars\n           | emptyf_call : TOKEN_ID TOKEN_LPAREN def_exp TOKEN_RPAREN TOKEN_SEMICOLONdef_exp : expresion coma2\n               | emptycoma2 : TOKEN_COMMA expresion coma2\n             | emptyassign : TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLONempty :'
    
_lr_action_items = {'TOKEN_PROGRAM':([0,],[2,]),'$end':([1,30,],[0,-1,]),'TOKEN_ID':([2,8,12,18,22,25,26,32,34,35,36,37,38,54,55,56,57,58,68,69,70,71,72,75,85,87,89,90,91,92,93,94,96,97,100,102,103,113,119,123,131,132,136,154,156,],[3,14,17,14,29,39,43,39,-17,-18,-19,-20,-21,-79,-79,-79,-79,-79,-79,106,-58,-59,-60,-60,-78,-79,-37,-38,-39,-40,-41,-42,-79,-79,-79,-52,-53,-79,-79,139,-79,-73,-22,-29,-28,]),'TOKEN_SEMICOLON':([3,48,49,50,52,62,63,64,65,66,67,86,88,95,98,99,101,105,106,107,108,109,110,111,117,125,126,127,128,129,130,134,141,142,143,146,148,149,153,155,],[4,61,-12,-13,-14,85,-79,-79,-79,-54,-55,-34,-36,-43,-46,-49,-51,-57,-61,-62,-63,-32,-33,132,136,140,-35,-79,-79,-79,-56,-79,-44,-45,-50,154,-31,156,-64,-30,]),'TOKEN_VAR':([4,13,27,60,61,],[8,18,18,8,-9,]),'TOKEN_VOID':([4,5,6,7,10,13,19,20,27,47,61,140,],[-79,12,-2,-3,12,-79,-6,-8,-79,-7,-9,-65,]),'TOKEN_MAIN':([4,5,6,7,9,10,11,13,16,19,20,27,47,61,140,],[-79,-79,-2,-3,15,-79,-5,-79,-4,-6,-8,-79,-7,-9,-65,]),'TOKEN_LBRACE':([13,15,19,20,27,47,60,61,82,83,84,115,135,147,],[-79,25,-6,-8,-79,-7,-79,-9,25,-71,-72,25,25,25,]),'TOKEN_COMMA':([14,29,49,50,63,64,65,66,67,74,79,80,81,86,88,95,98,99,101,105,106,107,108,109,110,126,127,128,129,130,133,137,138,141,142,143,153,157,],[22,22,-12,-13,-79,-79,-79,-54,-55,113,119,119,123,-34,-36,-43,-46,-49,-51,-57,-61,-62,-63,-32,-33,-35,-79,-79,-79,-56,113,119,119,-44,-45,-50,-64,123,]),'TOKEN_COLON':([14,21,23,29,43,51,139,],[-79,28,-11,-79,59,-10,152,]),'TOKEN_LPAREN':([17,39,40,41,42,54,55,56,57,58,68,87,89,90,91,92,93,94,96,97,100,102,103,106,113,119,131,],[26,55,56,57,58,68,68,68,68,68,68,68,-37,-38,-39,-40,-41,-42,68,68,68,-52,-53,131,68,68,68,]),'TOKEN_END':([24,52,],[30,-14,]),'TOKEN_RBRACE':([25,31,32,33,34,35,36,37,38,53,85,132,136,154,156,],[-79,52,-79,-16,-17,-18,-19,-20,-21,-15,-78,-73,-22,-29,-28,]),'TOKEN_IF':([25,32,34,35,36,37,38,85,132,136,154,156,],[40,40,-17,-18,-19,-20,-21,-78,-73,-22,-29,-28,]),'TOKEN_WHILE':([25,32,34,35,36,37,38,85,132,136,154,156,],[41,41,-17,-18,-19,-20,-21,-78,-73,-22,-29,-28,]),'TOKEN_PRINT':([25,32,34,35,36,37,38,85,132,136,154,156,],[42,42,-17,-18,-19,-20,-21,-78,-73,-22,-29,-28,]),'TOKEN_RPAREN':([26,44,45,46,49,50,55,63,64,65,66,67,73,74,75,76,77,78,79,80,81,86,88,95,98,99,101,104,105,106,107,108,109,110,112,114,118,120,121,122,124,126,127,128,129,130,131,133,137,138,141,142,143,144,145,150,151,153,157,158,],[-79,60,-66,-67,-12,-13,-79,-79,-79,-79,-54,-55,111,-79,-75,115,116,117,-79,-79,-79,-34,-36,-43,-46,-49,-51,130,-57,-61,-62,-63,-32,-33,-74,-77,-23,-27,-24,-68,-70,-35,-79,-79,-79,-56,-79,-79,-79,-79,-44,-45,-50,153,-76,-25,-26,-64,-79,-69,]),'TOKEN_INT':([28,59,152,],[49,49,49,]),'TOKEN_FLOAT':([28,59,152,],[50,50,50,]),'TOKEN_ASSIGN':([39,],[54,]),'TOKEN_ELSE':([52,134,],[-14,147,]),'TOKEN_PLUS':([54,55,56,57,58,64,65,66,67,68,87,89,90,91,92,93,94,96,97,99,100,101,102,103,105,106,107,108,109,110,113,119,127,128,129,130,131,143,153,],[70,70,70,70,70,96,-79,-54,-55,70,70,-37,-38,-39,-40,-41,-42,70,70,-49,70,-51,-52,-53,-57,-61,-62,-63,-32,-33,70,70,96,96,-79,-56,70,-50,-64,]),'TOKEN_MINUS':([54,55,56,57,58,64,65,66,67,68,87,89,90,91,92,93,94,96,97,99,100,101,102,103,105,106,107,108,109,110,113,119,127,128,129,130,131,143,153,],[71,71,71,71,71,97,-79,-54,-55,71,71,-37,-38,-39,-40,-41,-42,71,71,-49,71,-51,-52,-53,-57,-61,-62,-63,-32,-33,71,71,97,97,-79,-56,71,-50,-64,]),'TOKEN_CTE_INT':([54,55,56,57,58,68,69,70,71,72,75,87,89,90,91,92,93,94,96,97,100,102,103,113,119,131,],[-79,-79,-79,-79,-79,-79,109,-58,-59,-60,-60,-79,-37,-38,-39,-40,-41,-42,-79,-79,-79,-52,-53,-79,-79,-79,]),'TOKEN_CTE_FLOAT':([54,55,56,57,58,68,69,70,71,72,75,87,89,90,91,92,93,94,96,97,100,102,103,113,119,131,],[-79,-79,-79,-79,-79,-79,110,-58,-59,-60,-60,-79,-37,-38,-39,-40,-41,-42,-79,-79,-79,-52,-53,-79,-79,-79,]),'TOKEN_CTE_STRING':([58,119,],[79,138,]),'TOKEN_GT':([63,64,65,66,67,95,98,99,101,105,106,107,108,109,110,127,128,129,130,141,142,143,153,],[89,-79,-79,-54,-55,-43,-46,-49,-51,-57,-61,-62,-63,-32,-33,-79,-79,-79,-56,-44,-45,-50,-64,]),'TOKEN_LT':([63,64,65,66,67,95,98,99,101,105,106,107,108,109,110,127,128,129,130,141,142,143,153,],[90,-79,-79,-54,-55,-43,-46,-49,-51,-57,-61,-62,-63,-32,-33,-79,-79,-79,-56,-44,-45,-50,-64,]),'TOKEN_NE':([63,64,65,66,67,95,98,99,101,105,106,107,108,109,110,127,128,129,130,141,142,143,153,],[91,-79,-79,-54,-55,-43,-46,-49,-51,-57,-61,-62,-63,-32,-33,-79,-79,-79,-56,-44,-45,-50,-64,]),'TOKEN_GE':([63,64,65,66,67,95,98,99,101,105,106,107,108,109,110,127,128,129,130,141,142,143,153,],[92,-79,-79,-54,-55,-43,-46,-49,-51,-57,-61,-62,-63,-32,-33,-79,-79,-79,-56,-44,-45,-50,-64,]),'TOKEN_LE':([63,64,65,66,67,95,98,99,101,105,106,107,108,109,110,127,128,129,130,141,142,143,153,],[93,-79,-79,-54,-55,-43,-46,-49,-51,-57,-61,-62,-63,-32,-33,-79,-79,-79,-56,-44,-45,-50,-64,]),'TOKEN_EQ':([63,64,65,66,67,95,98,99,101,105,106,107,108,109,110,127,128,129,130,141,142,143,153,],[94,-79,-79,-54,-55,-43,-46,-49,-51,-57,-61,-62,-63,-32,-33,-79,-79,-79,-56,-44,-45,-50,-64,]),'TOKEN_DIV':([65,66,67,105,106,107,108,109,110,129,130,153,],[102,-54,-55,-57,-61,-62,-63,-32,-33,102,-56,-64,]),'TOKEN_MULT':([65,66,67,105,106,107,108,109,110,129,130,153,],[103,-54,-55,-57,-61,-62,-63,-32,-33,103,-56,-64,]),'TOKEN_DO':([116,],[135,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'dec_var':([4,],[5,]),'vars':([4,60,],[6,83,]),'empty':([4,5,10,13,14,25,26,27,29,32,54,55,56,57,58,60,63,64,65,68,74,79,80,81,87,96,97,100,113,119,127,128,129,131,133,134,137,138,157,],[7,11,11,20,23,33,46,20,23,33,72,75,72,72,72,84,88,98,101,72,114,120,120,124,72,72,72,72,72,72,98,98,101,75,114,148,120,120,124,]),'dec_funs':([5,10,],[9,16,]),'funs':([5,10,],[10,10,]),'variable':([8,18,],[13,27,]),'rep_var':([13,27,],[19,47,]),'mas_ids':([14,29,],[21,51,]),'body':([15,82,115,135,147,],[24,125,134,149,155,]),'dec_statements':([25,32,],[31,53,]),'statement':([25,32,],[32,32,]),'assign':([25,32,],[34,34,]),'condition':([25,32,],[35,35,]),'cycle':([25,32,],[36,36,]),'f_call':([25,32,],[37,37,]),'print':([25,32,],[38,38,]),'tipo':([26,],[44,]),'def_tipo':([26,],[45,]),'type':([28,59,152,],[48,81,157,]),'expresion':([54,55,56,57,58,68,113,119,131,],[62,74,76,77,80,104,133,137,74,]),'exp':([54,55,56,57,58,68,87,113,119,131,],[63,63,63,63,63,63,126,63,63,63,]),'termino':([54,55,56,57,58,68,87,96,97,113,119,131,],[64,64,64,64,64,64,64,127,128,64,64,64,]),'factor':([54,55,56,57,58,68,87,96,97,100,113,119,131,],[65,65,65,65,65,65,65,65,65,129,65,65,65,]),'definicion':([54,55,56,57,58,68,87,96,97,100,113,119,131,],[66,66,66,66,66,66,66,66,66,66,66,66,66,]),'operaciones':([54,55,56,57,58,68,87,96,97,100,113,119,131,],[67,67,67,67,67,67,67,67,67,67,67,67,67,]),'opciones_mas_menos':([54,55,56,57,58,68,87,96,97,100,113,119,131,],[69,69,69,69,69,69,69,69,69,69,69,69,69,]),'def_exp':([55,131,],[73,144,]),'expresiones':([58,],[78,]),'var':([60,],[82,]),'comparar':([63,],[86,]),'signo':([63,],[87,]),'suma_resta':([64,127,128,],[95,141,142,]),'multi_div':([65,129,],[99,143,]),'operacion_mul_div':([65,129,],[100,100,]),'id_cte':([69,],[105,]),'cte':([69,],[107,]),'f_call_expr':([69,],[108,]),'coma2':([74,133,],[112,145,]),'comas':([79,80,137,138,],[118,121,150,151,]),'coma':([81,157,],[122,158,]),'else':([134,],[146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON dec_var dec_funs TOKEN_MAIN body TOKEN_END','programa',8,'p_programa','yacc.py',7),
  ('dec_var -> vars','dec_var',1,'p_dec_var','yacc.py',13),
  ('dec_var -> empty','dec_var',1,'p_dec_var','yacc.py',14),
  ('dec_funs -> funs dec_funs','dec_funs',2,'p_dec_funs','yacc.py',20),
  ('dec_funs -> empty','dec_funs',1,'p_dec_funs','yacc.py',21),
  ('vars -> TOKEN_VAR variable rep_var','vars',3,'p_vars','yacc.py',34),
  ('rep_var -> TOKEN_VAR variable rep_var','rep_var',3,'p_rep_var','yacc.py',43),
  ('rep_var -> empty','rep_var',1,'p_rep_var','yacc.py',44),
  ('variable -> TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLON','variable',5,'p_variable','yacc.py',57),
  ('mas_ids -> TOKEN_COMMA TOKEN_ID mas_ids','mas_ids',3,'p_mas_ids','yacc.py',63),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','yacc.py',64),
  ('type -> TOKEN_INT','type',1,'p_type','yacc.py',74),
  ('type -> TOKEN_FLOAT','type',1,'p_type','yacc.py',75),
  ('body -> TOKEN_LBRACE dec_statements TOKEN_RBRACE','body',3,'p_body','yacc.py',81),
  ('dec_statements -> statement dec_statements','dec_statements',2,'p_dec_statements','yacc.py',87),
  ('dec_statements -> empty','dec_statements',1,'p_dec_statements','yacc.py',88),
  ('statement -> assign','statement',1,'p_statement','yacc.py',102),
  ('statement -> condition','statement',1,'p_statement','yacc.py',103),
  ('statement -> cycle','statement',1,'p_statement','yacc.py',104),
  ('statement -> f_call','statement',1,'p_statement','yacc.py',105),
  ('statement -> print','statement',1,'p_statement','yacc.py',106),
  ('print -> TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLON','print',5,'p_print','yacc.py',113),
  ('expresiones -> TOKEN_CTE_STRING comas','expresiones',2,'p_expresiones','yacc.py',118),
  ('expresiones -> expresion comas','expresiones',2,'p_expresiones','yacc.py',119),
  ('comas -> TOKEN_COMMA expresion comas','comas',3,'p_comas','yacc.py',129),
  ('comas -> TOKEN_COMMA TOKEN_CTE_STRING comas','comas',3,'p_comas','yacc.py',130),
  ('comas -> empty','comas',1,'p_comas','yacc.py',131),
  ('cycle -> TOKEN_WHILE TOKEN_LPAREN expresion TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLON','cycle',7,'p_cycle','yacc.py',146),
  ('condition -> TOKEN_IF TOKEN_LPAREN expresion TOKEN_RPAREN body else TOKEN_SEMICOLON','condition',7,'p_condition','yacc.py',153),
  ('else -> TOKEN_ELSE body','else',2,'p_else','yacc.py',160),
  ('else -> empty','else',1,'p_else','yacc.py',161),
  ('cte -> TOKEN_CTE_INT','cte',1,'p_cte','yacc.py',171),
  ('cte -> TOKEN_CTE_FLOAT','cte',1,'p_cte','yacc.py',172),
  ('expresion -> exp comparar','expresion',2,'p_expresion','yacc.py',178),
  ('comparar -> signo exp','comparar',2,'p_comparar','yacc.py',188),
  ('comparar -> empty','comparar',1,'p_comparar','yacc.py',189),
  ('signo -> TOKEN_GT','signo',1,'p_signo','yacc.py',199),
  ('signo -> TOKEN_LT','signo',1,'p_signo','yacc.py',200),
  ('signo -> TOKEN_NE','signo',1,'p_signo','yacc.py',201),
  ('signo -> TOKEN_GE','signo',1,'p_signo','yacc.py',202),
  ('signo -> TOKEN_LE','signo',1,'p_signo','yacc.py',203),
  ('signo -> TOKEN_EQ','signo',1,'p_signo','yacc.py',204),
  ('exp -> termino suma_resta','exp',2,'p_exp','yacc.py',210),
  ('suma_resta -> TOKEN_PLUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',220),
  ('suma_resta -> TOKEN_MINUS termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',221),
  ('suma_resta -> empty','suma_resta',1,'p_suma_resta','yacc.py',222),
  ('opcion_mas_menos -> TOKEN_PLUS','opcion_mas_menos',1,'p_opcion_mas_menos','yacc.py',237),
  ('opcion_mas_menos -> TOKEN_MINUS','opcion_mas_menos',1,'p_opcion_mas_menos','yacc.py',238),
  ('termino -> factor multi_div','termino',2,'p_termino','yacc.py',244),
  ('multi_div -> operacion_mul_div factor multi_div','multi_div',3,'p_multi_div','yacc.py',254),
  ('multi_div -> empty','multi_div',1,'p_multi_div','yacc.py',255),
  ('operacion_mul_div -> TOKEN_DIV','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',268),
  ('operacion_mul_div -> TOKEN_MULT','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',269),
  ('factor -> definicion','factor',1,'p_factor','yacc.py',275),
  ('factor -> operaciones','factor',1,'p_factor','yacc.py',276),
  ('definicion -> TOKEN_LPAREN expresion TOKEN_RPAREN','definicion',3,'p_definicion','yacc.py',281),
  ('operaciones -> opciones_mas_menos id_cte','operaciones',2,'p_operaciones','yacc.py',287),
  ('opciones_mas_menos -> TOKEN_PLUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',297),
  ('opciones_mas_menos -> TOKEN_MINUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',298),
  ('opciones_mas_menos -> empty','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',299),
  ('id_cte -> TOKEN_ID','id_cte',1,'p_id_cte','yacc.py',307),
  ('id_cte -> cte','id_cte',1,'p_id_cte','yacc.py',308),
  ('id_cte -> f_call_expr','id_cte',1,'p_id_cte','yacc.py',309),
  ('f_call_expr -> TOKEN_ID TOKEN_LPAREN def_exp TOKEN_RPAREN','f_call_expr',4,'p_f_call_expr','yacc.py',318),
  ('funs -> TOKEN_VOID TOKEN_ID TOKEN_LPAREN tipo TOKEN_RPAREN var body TOKEN_SEMICOLON','funs',8,'p_funs','yacc.py',325),
  ('tipo -> def_tipo','tipo',1,'p_tipo','yacc.py',331),
  ('tipo -> empty','tipo',1,'p_tipo','yacc.py',332),
  ('def_tipo -> TOKEN_ID TOKEN_COLON type coma','def_tipo',4,'p_def_tipo','yacc.py',342),
  ('coma -> TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma','coma',5,'p_coma','yacc.py',351),
  ('coma -> empty','coma',1,'p_coma','yacc.py',352),
  ('var -> vars','var',1,'p_var','yacc.py',366),
  ('var -> empty','var',1,'p_var','yacc.py',367),
  ('f_call -> TOKEN_ID TOKEN_LPAREN def_exp TOKEN_RPAREN TOKEN_SEMICOLON','f_call',5,'p_f_call','yacc.py',377),
  ('def_exp -> expresion coma2','def_exp',2,'p_def_exp','yacc.py',383),
  ('def_exp -> empty','def_exp',1,'p_def_exp','yacc.py',384),
  ('coma2 -> TOKEN_COMMA expresion coma2','coma2',3,'p_coma2','yacc.py',394),
  ('coma2 -> empty','coma2',1,'p_coma2','yacc.py',395),
  ('assign -> TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLON','assign',4,'p_assign','yacc.py',406),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',413),
]
