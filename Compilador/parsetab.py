
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TOKEN_ASSIGN TOKEN_COLON TOKEN_COMMA TOKEN_CTE_FLOAT TOKEN_CTE_INT TOKEN_CTE_STRING TOKEN_DIV TOKEN_DO TOKEN_ELSE TOKEN_END TOKEN_FLOAT TOKEN_FOR TOKEN_GT TOKEN_ID TOKEN_IF TOKEN_INT TOKEN_LBRACE TOKEN_LCOL TOKEN_LPAREN TOKEN_LT TOKEN_MAIN TOKEN_MINUS TOKEN_MULT TOKEN_NE TOKEN_PLUS TOKEN_PRINT TOKEN_PROGRAM TOKEN_RBRACE TOKEN_RCOL TOKEN_RETURN TOKEN_RPAREN TOKEN_SEMICOLON TOKEN_VAR TOKEN_VOID TOKEN_WHILEprograma : TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON saveGo dec_var dec_funcs TOKEN_MAIN fillMain body TOKEN_ENDsaveGo : emptyfillMain : emptydec_var : vars\n    | emptydec_funcs : funcs dec_funcs\n    | emptyvars : TOKEN_VAR variable rep_varrep_var  : variable rep_var\n    |  emptyvariable : TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLONmas_ids : TOKEN_COMMA TOKEN_ID mas_ids\n    |  emptytype_fun : TOKEN_INT\n    | TOKEN_FLOAT\n    | TOKEN_VOIDtype : TOKEN_INT\n    | TOKEN_FLOATbody : TOKEN_LBRACE dec_statements TOKEN_RBRACEdec_statements : statement dec_statements\n    | emptystatement : assign\n        | condition\n        | cycle\n        | f_call\n        | print\n        | for_cycle\n        | return_stmtreturn_stmt : TOKEN_RETURN expresion TOKEN_SEMICOLONprint : TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLONexpresiones : TOKEN_CTE_STRING comas\n    | expresion comascomas : TOKEN_COMMA expresion comas\n    | TOKEN_COMMA TOKEN_CTE_STRING comas\n    | emptysaveQuad : emptyGotoF : emptycycle : TOKEN_WHILE TOKEN_LPAREN saveQuad expresion GotoF TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLONsaveQuadIF : emptyGotoFIF : emptycondition : TOKEN_IF TOKEN_LPAREN expresion saveQuadIF TOKEN_RPAREN body GotoFIF else TOKEN_SEMICOLONelse : TOKEN_ELSE body\n    | emptycte : TOKEN_CTE_INT\n    | TOKEN_CTE_FLOATexpresion : exp compararcomparar  : signo exp\n    | emptysigno : TOKEN_GT\n    | TOKEN_LT\n    | TOKEN_NEexp : termino suma_restaoperacion_sum_res : TOKEN_PLUS\n    | TOKEN_MINUSsuma_resta  : operacion_sum_res termino suma_resta\n                    | emptytermino : factor multi_divmulti_div : operacion_mul_div factor multi_div\n                    | emptyoperacion_mul_div : TOKEN_DIV\n    | TOKEN_MULTfactor : definicion\n    | operacionesdefinicion : TOKEN_LPAREN expresion TOKEN_RPARENoperaciones : opciones_mas_menos id_cteopciones_mas_menos : TOKEN_PLUS\n    | TOKEN_MINUS\n    | emptyid_cte : TOKEN_ID\n    | cte\n    | function_call_exprfuncs : type_fun TOKEN_ID save_func_start TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL end_func TOKEN_SEMICOLONsave_func_start : emptyend_func : emptytipo : def_tipo\n    | emptydef_tipo : TOKEN_ID TOKEN_COLON type comacoma : TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma\n    | emptyvar : vars \n    | emptyf_call : TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad TOKEN_SEMICOLONfunction_call_expr : TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quadera_quad : emptygosub_quad : emptydef_exp : expresion param_quad coma2\n    | emptyparam_quad : emptycoma2 : TOKEN_COMMA expresion param_quad_coma coma2\n    | emptyparam_quad_coma : emptyassign : TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLONfor_cycle : TOKEN_FOR TOKEN_LPAREN for_init TOKEN_SEMICOLON saveQuadFor expresion GotoFFor TOKEN_SEMICOLON for_increment TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLONfor_init : assign_for\n                | emptyassign_for : TOKEN_ID TOKEN_ASSIGN expresionfor_increment : assign_for\n                     | emptysaveQuadFor : emptyGotoFFor : emptyempty :'
    
_lr_action_items = {'TOKEN_PROGRAM':([0,],[2,]),'$end':([1,43,],[0,-1,]),'TOKEN_ID':([2,10,14,15,16,17,18,23,27,37,38,45,47,48,49,50,51,52,53,59,64,67,70,71,72,73,80,81,82,83,84,88,90,91,99,101,103,104,105,107,109,110,112,114,115,125,128,134,137,138,145,156,159,160,164,170,180,197,202,204,211,],[3,19,22,-14,-15,-16,19,19,35,54,60,54,-22,-23,-24,-25,-26,-27,-28,-101,-11,-101,-101,-101,-101,98,-101,118,-66,-67,-68,-101,-101,-36,-29,-101,-49,-50,-51,-101,-53,-54,-101,-60,-61,-92,-68,-101,-101,-101,165,-30,-101,-99,-101,-101,-82,98,-41,-38,-93,]),'TOKEN_SEMICOLON':([3,39,40,41,65,73,74,75,76,77,78,79,87,95,96,97,100,102,106,108,111,113,117,118,119,120,121,122,132,139,140,141,142,150,161,162,163,167,168,172,176,179,182,183,185,186,187,189,190,193,195,196,198,203,210,],[4,64,-17,-18,-19,-101,99,-101,-101,-101,-62,-63,125,137,-94,-95,-46,-48,-52,-56,-57,-59,-65,-69,-70,-71,-44,-45,156,-47,-101,-101,-64,-101,-96,-55,-58,180,-85,-101,-101,-101,-101,-40,197,-100,-101,200,-74,202,-43,204,-83,-42,211,]),'TOKEN_VAR':([4,5,6,124,],[-101,10,-2,10,]),'TOKEN_INT':([4,5,6,7,8,9,12,18,23,24,25,33,34,64,85,178,200,],[-101,-101,-2,15,-4,-5,15,-101,-101,-8,-10,-9,40,-11,40,40,-72,]),'TOKEN_FLOAT':([4,5,6,7,8,9,12,18,23,24,25,33,34,64,85,178,200,],[-101,-101,-2,16,-4,-5,16,-101,-101,-8,-10,-9,41,-11,41,41,-72,]),'TOKEN_VOID':([4,5,6,7,8,9,12,18,23,24,25,33,64,200,],[-101,-101,-2,17,-4,-5,17,-101,-101,-8,-10,-9,-11,-72,]),'TOKEN_MAIN':([4,5,6,7,8,9,11,12,13,18,21,23,24,25,33,64,200,],[-101,-101,-2,-101,-4,-5,20,-101,-7,-101,-6,-101,-8,-10,-9,-11,-72,]),'TOKEN_LBRACE':([18,20,23,24,25,29,30,33,64,124,147,148,149,153,184,194,209,],[-101,-101,-101,-8,-10,37,-3,-9,-11,-101,37,-80,-81,37,37,37,37,]),'TOKEN_COMMA':([19,35,40,41,75,76,77,78,79,93,94,100,102,106,108,111,113,117,118,119,120,121,122,123,127,139,140,141,142,151,152,157,158,162,163,168,181,187,188,191,192,198,],[27,27,-17,-18,-101,-101,-101,-62,-63,134,134,-46,-48,-52,-56,-57,-59,-65,-69,-70,-71,-44,-45,145,-101,-47,-101,-101,-64,170,-88,134,134,-55,-58,-85,-101,-101,145,170,-91,-83,]),'TOKEN_COLON':([19,26,28,35,42,60,165,],[-101,34,-13,-101,-12,85,178,]),'TOKEN_LPAREN':([22,31,32,54,55,56,57,58,59,67,68,69,70,71,72,80,88,90,91,101,103,104,105,107,109,110,112,114,115,118,134,137,138,143,159,160,164,170,],[-101,38,-73,-101,70,71,72,73,80,80,88,-84,80,-101,80,80,80,80,-36,80,-49,-50,-51,80,-53,-54,80,-60,-61,-101,80,-101,80,164,80,-99,80,80,]),'TOKEN_END':([36,65,],[43,-19,]),'TOKEN_RBRACE':([37,44,45,46,47,48,49,50,51,52,53,66,99,125,156,180,202,204,211,],[-101,65,-101,-21,-22,-23,-24,-25,-26,-27,-28,-20,-29,-92,-30,-82,-41,-38,-93,]),'TOKEN_IF':([37,45,47,48,49,50,51,52,53,99,125,156,180,202,204,211,],[55,55,-22,-23,-24,-25,-26,-27,-28,-29,-92,-30,-82,-41,-38,-93,]),'TOKEN_WHILE':([37,45,47,48,49,50,51,52,53,99,125,156,180,202,204,211,],[56,56,-22,-23,-24,-25,-26,-27,-28,-29,-92,-30,-82,-41,-38,-93,]),'TOKEN_PRINT':([37,45,47,48,49,50,51,52,53,99,125,156,180,202,204,211,],[57,57,-22,-23,-24,-25,-26,-27,-28,-29,-92,-30,-82,-41,-38,-93,]),'TOKEN_FOR':([37,45,47,48,49,50,51,52,53,99,125,156,180,202,204,211,],[58,58,-22,-23,-24,-25,-26,-27,-28,-29,-92,-30,-82,-41,-38,-93,]),'TOKEN_RETURN':([37,45,47,48,49,50,51,52,53,99,125,156,180,202,204,211,],[59,59,-22,-23,-24,-25,-26,-27,-28,-29,-92,-30,-82,-41,-38,-93,]),'TOKEN_RPAREN':([38,40,41,61,62,63,75,76,77,78,79,88,89,92,93,94,100,102,106,108,111,113,116,117,118,119,120,121,122,123,126,127,128,129,130,131,133,135,136,139,140,141,142,144,146,151,152,154,155,157,158,161,162,163,164,168,169,171,174,175,177,181,187,188,191,192,197,198,199,201,205,206,207,],[-101,-17,-18,86,-75,-76,-101,-101,-101,-62,-63,-101,-101,132,-101,-101,-46,-48,-52,-56,-57,-59,142,-65,-69,-70,-71,-44,-45,-101,150,-101,-87,153,-39,-101,-31,-35,-32,-47,-101,-101,-64,-77,-79,-101,-88,173,-37,-101,-101,-96,-55,-58,-101,-85,-86,-90,-33,-34,187,-101,-101,-101,-101,-91,-101,-83,-78,-89,208,-97,-98,]),'TOKEN_ASSIGN':([54,98,],[67,138,]),'TOKEN_PLUS':([59,67,70,71,72,76,77,78,79,80,88,90,91,101,103,104,105,107,109,110,111,112,113,114,115,117,118,119,120,121,122,134,137,138,140,141,142,159,160,163,164,168,170,187,198,],[82,82,82,-101,82,109,-101,-62,-63,82,82,82,-36,82,-49,-50,-51,82,-53,-54,-57,82,-59,-60,-61,-65,-69,-70,-71,-44,-45,82,-101,82,109,-101,-64,82,-99,-58,82,-85,82,-101,-83,]),'TOKEN_MINUS':([59,67,70,71,72,76,77,78,79,80,88,90,91,101,103,104,105,107,109,110,111,112,113,114,115,117,118,119,120,121,122,134,137,138,140,141,142,159,160,163,164,168,170,187,198,],[83,83,83,-101,83,110,-101,-62,-63,83,83,83,-36,83,-49,-50,-51,83,-53,-54,-57,83,-59,-60,-61,-65,-69,-70,-71,-44,-45,83,-101,83,110,-101,-64,83,-99,-58,83,-85,83,-101,-83,]),'TOKEN_CTE_INT':([59,67,70,71,72,80,81,82,83,84,88,90,91,101,103,104,105,107,109,110,112,114,115,128,134,137,138,159,160,164,170,],[-101,-101,-101,-101,-101,-101,121,-66,-67,-68,-101,-101,-36,-101,-49,-50,-51,-101,-53,-54,-101,-60,-61,-68,-101,-101,-101,-101,-99,-101,-101,]),'TOKEN_CTE_FLOAT':([59,67,70,71,72,80,81,82,83,84,88,90,91,101,103,104,105,107,109,110,112,114,115,128,134,137,138,159,160,164,170,],[-101,-101,-101,-101,-101,-101,122,-66,-67,-68,-101,-101,-36,-101,-49,-50,-51,-101,-53,-54,-101,-60,-61,-68,-101,-101,-101,-101,-99,-101,-101,]),'TOKEN_RCOL':([65,166,],[-19,179,]),'TOKEN_ELSE':([65,172,182,183,],[-19,-101,194,-40,]),'TOKEN_CTE_STRING':([72,134,],[93,158,]),'TOKEN_GT':([75,76,77,78,79,106,108,111,113,117,118,119,120,121,122,140,141,142,162,163,168,187,198,],[103,-101,-101,-62,-63,-52,-56,-57,-59,-65,-69,-70,-71,-44,-45,-101,-101,-64,-55,-58,-85,-101,-83,]),'TOKEN_LT':([75,76,77,78,79,106,108,111,113,117,118,119,120,121,122,140,141,142,162,163,168,187,198,],[104,-101,-101,-62,-63,-52,-56,-57,-59,-65,-69,-70,-71,-44,-45,-101,-101,-64,-55,-58,-85,-101,-83,]),'TOKEN_NE':([75,76,77,78,79,106,108,111,113,117,118,119,120,121,122,140,141,142,162,163,168,187,198,],[105,-101,-101,-62,-63,-52,-56,-57,-59,-65,-69,-70,-71,-44,-45,-101,-101,-64,-55,-58,-85,-101,-83,]),'TOKEN_DIV':([77,78,79,117,118,119,120,121,122,141,142,168,187,198,],[114,-62,-63,-65,-69,-70,-71,-44,-45,114,-64,-85,-101,-83,]),'TOKEN_MULT':([77,78,79,117,118,119,120,121,122,141,142,168,187,198,],[115,-62,-63,-65,-69,-70,-71,-44,-45,115,-64,-85,-101,-83,]),'TOKEN_LCOL':([86,],[124,]),'TOKEN_DO':([173,208,],[184,209,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'saveGo':([4,],[5,]),'empty':([4,5,7,12,18,19,20,22,23,35,37,38,45,54,59,67,70,71,72,73,75,76,77,80,88,89,90,93,94,101,107,112,118,123,124,127,131,134,137,138,140,141,150,151,157,158,159,164,170,172,176,179,181,182,187,188,191,197,],[6,9,13,13,25,28,30,32,25,28,46,63,46,69,84,84,84,91,84,97,102,108,113,84,128,130,84,135,135,84,84,84,69,146,149,152,155,84,160,84,108,113,168,171,135,135,84,128,84,183,186,190,192,195,168,146,171,207,]),'dec_var':([5,],[7,]),'vars':([5,124,],[8,148,]),'dec_funcs':([7,12,],[11,21,]),'funcs':([7,12,],[12,12,]),'type_fun':([7,12,],[14,14,]),'variable':([10,18,23,],[18,23,23,]),'rep_var':([18,23,],[24,33,]),'mas_ids':([19,35,],[26,42,]),'fillMain':([20,],[29,]),'save_func_start':([22,],[31,]),'body':([29,147,153,184,194,209,],[36,166,172,196,203,210,]),'type':([34,85,178,],[39,123,188,]),'dec_statements':([37,45,],[44,66,]),'statement':([37,45,],[45,45,]),'assign':([37,45,],[47,47,]),'condition':([37,45,],[48,48,]),'cycle':([37,45,],[49,49,]),'f_call':([37,45,],[50,50,]),'print':([37,45,],[51,51,]),'for_cycle':([37,45,],[52,52,]),'return_stmt':([37,45,],[53,53,]),'tipo':([38,],[61,]),'def_tipo':([38,],[62,]),'era_quad':([54,118,],[68,143,]),'expresion':([59,67,70,72,80,88,90,134,138,159,164,170,],[74,87,89,94,116,127,131,157,161,176,127,181,]),'exp':([59,67,70,72,80,88,90,101,134,138,159,164,170,],[75,75,75,75,75,75,75,139,75,75,75,75,75,]),'termino':([59,67,70,72,80,88,90,101,107,134,138,159,164,170,],[76,76,76,76,76,76,76,76,140,76,76,76,76,76,]),'factor':([59,67,70,72,80,88,90,101,107,112,134,138,159,164,170,],[77,77,77,77,77,77,77,77,77,141,77,77,77,77,77,]),'definicion':([59,67,70,72,80,88,90,101,107,112,134,138,159,164,170,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'operaciones':([59,67,70,72,80,88,90,101,107,112,134,138,159,164,170,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'opciones_mas_menos':([59,67,70,72,80,88,90,101,107,112,134,138,159,164,170,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'saveQuad':([71,],[90,]),'expresiones':([72,],[92,]),'for_init':([73,],[95,]),'assign_for':([73,197,],[96,206,]),'comparar':([75,],[100,]),'signo':([75,],[101,]),'suma_resta':([76,140,],[106,162,]),'operacion_sum_res':([76,140,],[107,107,]),'multi_div':([77,141,],[111,163,]),'operacion_mul_div':([77,141,],[112,112,]),'id_cte':([81,],[117,]),'cte':([81,],[119,]),'function_call_expr':([81,],[120,]),'def_exp':([88,164,],[126,177,]),'saveQuadIF':([89,],[129,]),'comas':([93,94,157,158,],[133,136,174,175,]),'coma':([123,188,],[144,199,]),'var':([124,],[147,]),'param_quad':([127,],[151,]),'GotoF':([131,],[154,]),'saveQuadFor':([137,],[159,]),'gosub_quad':([150,187,],[167,198,]),'coma2':([151,191,],[169,201,]),'GotoFIF':([172,],[182,]),'GotoFFor':([176,],[185,]),'end_func':([179,],[189,]),'param_quad_coma':([181,],[191,]),'else':([182,],[193,]),'for_increment':([197,],[205,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> TOKEN_PROGRAM TOKEN_ID TOKEN_SEMICOLON saveGo dec_var dec_funcs TOKEN_MAIN fillMain body TOKEN_END','programa',10,'p_programa','yacc.py',39),
  ('saveGo -> empty','saveGo',1,'p_saveGo','yacc.py',47),
  ('fillMain -> empty','fillMain',1,'p_fillMain','yacc.py',53),
  ('dec_var -> vars','dec_var',1,'p_dec_var','yacc.py',65),
  ('dec_var -> empty','dec_var',1,'p_dec_var','yacc.py',66),
  ('dec_funcs -> funcs dec_funcs','dec_funcs',2,'p_dec_funcs','yacc.py',70),
  ('dec_funcs -> empty','dec_funcs',1,'p_dec_funcs','yacc.py',71),
  ('vars -> TOKEN_VAR variable rep_var','vars',3,'p_vars','yacc.py',81),
  ('rep_var -> variable rep_var','rep_var',2,'p_rep_var','yacc.py',89),
  ('rep_var -> empty','rep_var',1,'p_rep_var','yacc.py',90),
  ('variable -> TOKEN_ID mas_ids TOKEN_COLON type TOKEN_SEMICOLON','variable',5,'p_variable','yacc.py',100),
  ('mas_ids -> TOKEN_COMMA TOKEN_ID mas_ids','mas_ids',3,'p_mas_ids','yacc.py',110),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','yacc.py',111),
  ('type_fun -> TOKEN_INT','type_fun',1,'p_type_fun','yacc.py',121),
  ('type_fun -> TOKEN_FLOAT','type_fun',1,'p_type_fun','yacc.py',122),
  ('type_fun -> TOKEN_VOID','type_fun',1,'p_type_fun','yacc.py',123),
  ('type -> TOKEN_INT','type',1,'p_type','yacc.py',132),
  ('type -> TOKEN_FLOAT','type',1,'p_type','yacc.py',133),
  ('body -> TOKEN_LBRACE dec_statements TOKEN_RBRACE','body',3,'p_body','yacc.py',142),
  ('dec_statements -> statement dec_statements','dec_statements',2,'p_dec_statements','yacc.py',146),
  ('dec_statements -> empty','dec_statements',1,'p_dec_statements','yacc.py',147),
  ('statement -> assign','statement',1,'p_statement','yacc.py',157),
  ('statement -> condition','statement',1,'p_statement','yacc.py',158),
  ('statement -> cycle','statement',1,'p_statement','yacc.py',159),
  ('statement -> f_call','statement',1,'p_statement','yacc.py',160),
  ('statement -> print','statement',1,'p_statement','yacc.py',161),
  ('statement -> for_cycle','statement',1,'p_statement','yacc.py',162),
  ('statement -> return_stmt','statement',1,'p_statement','yacc.py',163),
  ('return_stmt -> TOKEN_RETURN expresion TOKEN_SEMICOLON','return_stmt',3,'p_return_stmt','yacc.py',167),
  ('print -> TOKEN_PRINT TOKEN_LPAREN expresiones TOKEN_RPAREN TOKEN_SEMICOLON','print',5,'p_print','yacc.py',178),
  ('expresiones -> TOKEN_CTE_STRING comas','expresiones',2,'p_expresiones','yacc.py',189),
  ('expresiones -> expresion comas','expresiones',2,'p_expresiones','yacc.py',190),
  ('comas -> TOKEN_COMMA expresion comas','comas',3,'p_comas','yacc.py',197),
  ('comas -> TOKEN_COMMA TOKEN_CTE_STRING comas','comas',3,'p_comas','yacc.py',198),
  ('comas -> empty','comas',1,'p_comas','yacc.py',199),
  ('saveQuad -> empty','saveQuad',1,'p_saveQuad','yacc.py',209),
  ('GotoF -> empty','GotoF',1,'p_GotoF','yacc.py',213),
  ('cycle -> TOKEN_WHILE TOKEN_LPAREN saveQuad expresion GotoF TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLON','cycle',9,'p_cycle','yacc.py',219),
  ('saveQuadIF -> empty','saveQuadIF',1,'p_saveQuadIF','yacc.py',229),
  ('GotoFIF -> empty','GotoFIF',1,'p_GotoFIF','yacc.py',235),
  ('condition -> TOKEN_IF TOKEN_LPAREN expresion saveQuadIF TOKEN_RPAREN body GotoFIF else TOKEN_SEMICOLON','condition',9,'p_condition','yacc.py',242),
  ('else -> TOKEN_ELSE body','else',2,'p_else','yacc.py',252),
  ('else -> empty','else',1,'p_else','yacc.py',253),
  ('cte -> TOKEN_CTE_INT','cte',1,'p_cte','yacc.py',260),
  ('cte -> TOKEN_CTE_FLOAT','cte',1,'p_cte','yacc.py',261),
  ('expresion -> exp comparar','expresion',2,'p_expresion','yacc.py',268),
  ('comparar -> signo exp','comparar',2,'p_comparar','yacc.py',288),
  ('comparar -> empty','comparar',1,'p_comparar','yacc.py',289),
  ('signo -> TOKEN_GT','signo',1,'p_signo','yacc.py',296),
  ('signo -> TOKEN_LT','signo',1,'p_signo','yacc.py',297),
  ('signo -> TOKEN_NE','signo',1,'p_signo','yacc.py',298),
  ('exp -> termino suma_resta','exp',2,'p_exp','yacc.py',302),
  ('operacion_sum_res -> TOKEN_PLUS','operacion_sum_res',1,'p_operacion_sum_res','yacc.py',327),
  ('operacion_sum_res -> TOKEN_MINUS','operacion_sum_res',1,'p_operacion_sum_res','yacc.py',328),
  ('suma_resta -> operacion_sum_res termino suma_resta','suma_resta',3,'p_suma_resta','yacc.py',332),
  ('suma_resta -> empty','suma_resta',1,'p_suma_resta','yacc.py',333),
  ('termino -> factor multi_div','termino',2,'p_termino','yacc.py',343),
  ('multi_div -> operacion_mul_div factor multi_div','multi_div',3,'p_multi_div','yacc.py',367),
  ('multi_div -> empty','multi_div',1,'p_multi_div','yacc.py',368),
  ('operacion_mul_div -> TOKEN_DIV','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',378),
  ('operacion_mul_div -> TOKEN_MULT','operacion_mul_div',1,'p_operacion_mul_div','yacc.py',379),
  ('factor -> definicion','factor',1,'p_factor','yacc.py',383),
  ('factor -> operaciones','factor',1,'p_factor','yacc.py',384),
  ('definicion -> TOKEN_LPAREN expresion TOKEN_RPAREN','definicion',3,'p_definicion','yacc.py',388),
  ('operaciones -> opciones_mas_menos id_cte','operaciones',2,'p_operaciones','yacc.py',394),
  ('opciones_mas_menos -> TOKEN_PLUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',411),
  ('opciones_mas_menos -> TOKEN_MINUS','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',412),
  ('opciones_mas_menos -> empty','opciones_mas_menos',1,'p_opciones_mas_menos','yacc.py',413),
  ('id_cte -> TOKEN_ID','id_cte',1,'p_id_cte','yacc.py',417),
  ('id_cte -> cte','id_cte',1,'p_id_cte','yacc.py',418),
  ('id_cte -> function_call_expr','id_cte',1,'p_id_cte','yacc.py',419),
  ('funcs -> type_fun TOKEN_ID save_func_start TOKEN_LPAREN tipo TOKEN_RPAREN TOKEN_LCOL var body TOKEN_RCOL end_func TOKEN_SEMICOLON','funcs',12,'p_funcs','yacc.py',436),
  ('save_func_start -> empty','save_func_start',1,'p_save_func_start','yacc.py',443),
  ('end_func -> empty','end_func',1,'p_end_func','yacc.py',460),
  ('tipo -> def_tipo','tipo',1,'p_tipo','yacc.py',466),
  ('tipo -> empty','tipo',1,'p_tipo','yacc.py',467),
  ('def_tipo -> TOKEN_ID TOKEN_COLON type coma','def_tipo',4,'p_def_tipo','yacc.py',480),
  ('coma -> TOKEN_COMMA TOKEN_ID TOKEN_COLON type coma','coma',5,'p_coma','yacc.py',487),
  ('coma -> empty','coma',1,'p_coma','yacc.py',488),
  ('var -> vars','var',1,'p_var','yacc.py',499),
  ('var -> empty','var',1,'p_var','yacc.py',500),
  ('f_call -> TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad TOKEN_SEMICOLON','f_call',7,'p_f_call','yacc.py',504),
  ('function_call_expr -> TOKEN_ID era_quad TOKEN_LPAREN def_exp TOKEN_RPAREN gosub_quad','function_call_expr',6,'p_function_call_expr','yacc.py',521),
  ('era_quad -> empty','era_quad',1,'p_era_quad','yacc.py',541),
  ('gosub_quad -> empty','gosub_quad',1,'p_gosub_quad','yacc.py',548),
  ('def_exp -> expresion param_quad coma2','def_exp',3,'p_def_exp','yacc.py',556),
  ('def_exp -> empty','def_exp',1,'p_def_exp','yacc.py',557),
  ('param_quad -> empty','param_quad',1,'p_param_quad','yacc.py',567),
  ('coma2 -> TOKEN_COMMA expresion param_quad_coma coma2','coma2',4,'p_coma2','yacc.py',576),
  ('coma2 -> empty','coma2',1,'p_coma2','yacc.py',577),
  ('param_quad_coma -> empty','param_quad_coma',1,'p_param_quad_coma','yacc.py',584),
  ('assign -> TOKEN_ID TOKEN_ASSIGN expresion TOKEN_SEMICOLON','assign',4,'p_assign','yacc.py',593),
  ('for_cycle -> TOKEN_FOR TOKEN_LPAREN for_init TOKEN_SEMICOLON saveQuadFor expresion GotoFFor TOKEN_SEMICOLON for_increment TOKEN_RPAREN TOKEN_DO body TOKEN_SEMICOLON','for_cycle',13,'p_for_cycle','yacc.py',602),
  ('for_init -> assign_for','for_init',1,'p_for_init','yacc.py',633),
  ('for_init -> empty','for_init',1,'p_for_init','yacc.py',634),
  ('assign_for -> TOKEN_ID TOKEN_ASSIGN expresion','assign_for',3,'p_assign_for','yacc.py',638),
  ('for_increment -> assign_for','for_increment',1,'p_for_increment','yacc.py',647),
  ('for_increment -> empty','for_increment',1,'p_for_increment','yacc.py',648),
  ('saveQuadFor -> empty','saveQuadFor',1,'p_saveQuadFor','yacc.py',652),
  ('GotoFFor -> empty','GotoFFor',1,'p_GotoFFor','yacc.py',656),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',662),
]
